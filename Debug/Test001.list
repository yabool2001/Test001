
Test001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d58  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003e14  08003e14  00013e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e9c  08003e9c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e9c  08003e9c  00013e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ea4  08003ea4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ea4  08003ea4  00013ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ea8  08003ea8  00013ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003eac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  2000001c  08003ec8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08003ec8  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124f8  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002000  00000000  00000000  0003253c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00034540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  00035328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016077  00000000  00000000  00036058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e32e  00000000  00000000  0004c0cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c7e4  00000000  00000000  0005a3fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6be1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032dc  00000000  00000000  000e6c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000001c 	.word	0x2000001c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003dfc 	.word	0x08003dfc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000020 	.word	0x20000020
 8000100:	08003dfc 	.word	0x08003dfc

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	1c08      	adds	r0, r1, #0
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8d8 	bl	8000614 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8d3 	bl	8000614 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	469b      	mov	fp, r3
 8000476:	d433      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000478:	465a      	mov	r2, fp
 800047a:	4653      	mov	r3, sl
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83a      	bhi.n	8000502 <__udivmoddi4+0xc2>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e078      	b.n	8000584 <__udivmoddi4+0x144>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e075      	b.n	800058a <__udivmoddi4+0x14a>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e028      	b.n	800050a <__udivmoddi4+0xca>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	2320      	movs	r3, #32
 80004e4:	1a9b      	subs	r3, r3, r2
 80004e6:	4652      	mov	r2, sl
 80004e8:	40da      	lsrs	r2, r3
 80004ea:	4641      	mov	r1, r8
 80004ec:	0013      	movs	r3, r2
 80004ee:	464a      	mov	r2, r9
 80004f0:	408a      	lsls	r2, r1
 80004f2:	0017      	movs	r7, r2
 80004f4:	4642      	mov	r2, r8
 80004f6:	431f      	orrs	r7, r3
 80004f8:	4653      	mov	r3, sl
 80004fa:	4093      	lsls	r3, r2
 80004fc:	001e      	movs	r6, r3
 80004fe:	42af      	cmp	r7, r5
 8000500:	d9c4      	bls.n	800048c <__udivmoddi4+0x4c>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	4643      	mov	r3, r8
 800050c:	2b00      	cmp	r3, #0
 800050e:	d0d9      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000510:	07fb      	lsls	r3, r7, #31
 8000512:	0872      	lsrs	r2, r6, #1
 8000514:	431a      	orrs	r2, r3
 8000516:	4646      	mov	r6, r8
 8000518:	087b      	lsrs	r3, r7, #1
 800051a:	e00e      	b.n	800053a <__udivmoddi4+0xfa>
 800051c:	42ab      	cmp	r3, r5
 800051e:	d101      	bne.n	8000524 <__udivmoddi4+0xe4>
 8000520:	42a2      	cmp	r2, r4
 8000522:	d80c      	bhi.n	800053e <__udivmoddi4+0xfe>
 8000524:	1aa4      	subs	r4, r4, r2
 8000526:	419d      	sbcs	r5, r3
 8000528:	2001      	movs	r0, #1
 800052a:	1924      	adds	r4, r4, r4
 800052c:	416d      	adcs	r5, r5
 800052e:	2100      	movs	r1, #0
 8000530:	3e01      	subs	r6, #1
 8000532:	1824      	adds	r4, r4, r0
 8000534:	414d      	adcs	r5, r1
 8000536:	2e00      	cmp	r6, #0
 8000538:	d006      	beq.n	8000548 <__udivmoddi4+0x108>
 800053a:	42ab      	cmp	r3, r5
 800053c:	d9ee      	bls.n	800051c <__udivmoddi4+0xdc>
 800053e:	3e01      	subs	r6, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2e00      	cmp	r6, #0
 8000546:	d1f8      	bne.n	800053a <__udivmoddi4+0xfa>
 8000548:	9800      	ldr	r0, [sp, #0]
 800054a:	9901      	ldr	r1, [sp, #4]
 800054c:	465b      	mov	r3, fp
 800054e:	1900      	adds	r0, r0, r4
 8000550:	4169      	adcs	r1, r5
 8000552:	2b00      	cmp	r3, #0
 8000554:	db24      	blt.n	80005a0 <__udivmoddi4+0x160>
 8000556:	002b      	movs	r3, r5
 8000558:	465a      	mov	r2, fp
 800055a:	4644      	mov	r4, r8
 800055c:	40d3      	lsrs	r3, r2
 800055e:	002a      	movs	r2, r5
 8000560:	40e2      	lsrs	r2, r4
 8000562:	001c      	movs	r4, r3
 8000564:	465b      	mov	r3, fp
 8000566:	0015      	movs	r5, r2
 8000568:	2b00      	cmp	r3, #0
 800056a:	db2a      	blt.n	80005c2 <__udivmoddi4+0x182>
 800056c:	0026      	movs	r6, r4
 800056e:	409e      	lsls	r6, r3
 8000570:	0033      	movs	r3, r6
 8000572:	0026      	movs	r6, r4
 8000574:	4647      	mov	r7, r8
 8000576:	40be      	lsls	r6, r7
 8000578:	0032      	movs	r2, r6
 800057a:	1a80      	subs	r0, r0, r2
 800057c:	4199      	sbcs	r1, r3
 800057e:	9000      	str	r0, [sp, #0]
 8000580:	9101      	str	r1, [sp, #4]
 8000582:	e79f      	b.n	80004c4 <__udivmoddi4+0x84>
 8000584:	42a3      	cmp	r3, r4
 8000586:	d8bc      	bhi.n	8000502 <__udivmoddi4+0xc2>
 8000588:	e783      	b.n	8000492 <__udivmoddi4+0x52>
 800058a:	4642      	mov	r2, r8
 800058c:	2320      	movs	r3, #32
 800058e:	2100      	movs	r1, #0
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	2200      	movs	r2, #0
 8000594:	9100      	str	r1, [sp, #0]
 8000596:	9201      	str	r2, [sp, #4]
 8000598:	2201      	movs	r2, #1
 800059a:	40da      	lsrs	r2, r3
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	e786      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	4646      	mov	r6, r8
 80005aa:	409a      	lsls	r2, r3
 80005ac:	0023      	movs	r3, r4
 80005ae:	40f3      	lsrs	r3, r6
 80005b0:	4644      	mov	r4, r8
 80005b2:	4313      	orrs	r3, r2
 80005b4:	002a      	movs	r2, r5
 80005b6:	40e2      	lsrs	r2, r4
 80005b8:	001c      	movs	r4, r3
 80005ba:	465b      	mov	r3, fp
 80005bc:	0015      	movs	r5, r2
 80005be:	2b00      	cmp	r3, #0
 80005c0:	dad4      	bge.n	800056c <__udivmoddi4+0x12c>
 80005c2:	4642      	mov	r2, r8
 80005c4:	002f      	movs	r7, r5
 80005c6:	2320      	movs	r3, #32
 80005c8:	0026      	movs	r6, r4
 80005ca:	4097      	lsls	r7, r2
 80005cc:	1a9b      	subs	r3, r3, r2
 80005ce:	40de      	lsrs	r6, r3
 80005d0:	003b      	movs	r3, r7
 80005d2:	4333      	orrs	r3, r6
 80005d4:	e7cd      	b.n	8000572 <__udivmoddi4+0x132>
 80005d6:	46c0      	nop			; (mov r8, r8)

080005d8 <__clzsi2>:
 80005d8:	211c      	movs	r1, #28
 80005da:	2301      	movs	r3, #1
 80005dc:	041b      	lsls	r3, r3, #16
 80005de:	4298      	cmp	r0, r3
 80005e0:	d301      	bcc.n	80005e6 <__clzsi2+0xe>
 80005e2:	0c00      	lsrs	r0, r0, #16
 80005e4:	3910      	subs	r1, #16
 80005e6:	0a1b      	lsrs	r3, r3, #8
 80005e8:	4298      	cmp	r0, r3
 80005ea:	d301      	bcc.n	80005f0 <__clzsi2+0x18>
 80005ec:	0a00      	lsrs	r0, r0, #8
 80005ee:	3908      	subs	r1, #8
 80005f0:	091b      	lsrs	r3, r3, #4
 80005f2:	4298      	cmp	r0, r3
 80005f4:	d301      	bcc.n	80005fa <__clzsi2+0x22>
 80005f6:	0900      	lsrs	r0, r0, #4
 80005f8:	3904      	subs	r1, #4
 80005fa:	a202      	add	r2, pc, #8	; (adr r2, 8000604 <__clzsi2+0x2c>)
 80005fc:	5c10      	ldrb	r0, [r2, r0]
 80005fe:	1840      	adds	r0, r0, r1
 8000600:	4770      	bx	lr
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	02020304 	.word	0x02020304
 8000608:	01010101 	.word	0x01010101
	...

08000614 <__clzdi2>:
 8000614:	b510      	push	{r4, lr}
 8000616:	2900      	cmp	r1, #0
 8000618:	d103      	bne.n	8000622 <__clzdi2+0xe>
 800061a:	f7ff ffdd 	bl	80005d8 <__clzsi2>
 800061e:	3020      	adds	r0, #32
 8000620:	e002      	b.n	8000628 <__clzdi2+0x14>
 8000622:	1c08      	adds	r0, r1, #0
 8000624:	f7ff ffd8 	bl	80005d8 <__clzsi2>
 8000628:	bd10      	pop	{r4, pc}
 800062a:	46c0      	nop			; (mov r8, r8)

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	stmdev_ctx_t dev_ctx;
	dev_ctx.write_reg = platform_write;
 8000632:	003b      	movs	r3, r7
 8000634:	4a3a      	ldr	r2, [pc, #232]	; (8000720 <main+0xf4>)
 8000636:	601a      	str	r2, [r3, #0]
	dev_ctx.read_reg = platform_read;
 8000638:	003b      	movs	r3, r7
 800063a:	4a3a      	ldr	r2, [pc, #232]	; (8000724 <main+0xf8>)
 800063c:	605a      	str	r2, [r3, #4]
	dev_ctx.handle = &iis2dlpc_comm;
 800063e:	003b      	movs	r3, r7
 8000640:	4a39      	ldr	r2, [pc, #228]	; (8000728 <main+0xfc>)
 8000642:	609a      	str	r2, [r3, #8]
	iis2dlpc_device_id_get ( &dev_ctx , &whoami );
 8000644:	4a39      	ldr	r2, [pc, #228]	; (800072c <main+0x100>)
 8000646:	003b      	movs	r3, r7
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f000 fbd4 	bl	8000df8 <iis2dlpc_device_id_get>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000650:	f000 fbe4 	bl	8000e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000654:	f000 f876 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000658:	f000 f994 	bl	8000984 <MX_GPIO_Init>
  MX_SPI1_Init();
 800065c:	f000 f8d2 	bl	8000804 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000660:	f000 f90e 	bl	8000880 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000664:	f000 f95a 	bl	800091c <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit ( &huart2, &whoami , 1 , 1000 );
 8000668:	23fa      	movs	r3, #250	; 0xfa
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	492f      	ldr	r1, [pc, #188]	; (800072c <main+0x100>)
 800066e:	4830      	ldr	r0, [pc, #192]	; (8000730 <main+0x104>)
 8000670:	2201      	movs	r2, #1
 8000672:	f002 fc77 	bl	8002f64 <HAL_UART_Transmit>

	  r = HAL_UART_Receive (&huart2, uart_rx_buffer , sizeof ( uart_rx_buffer ) , 1000 );
 8000676:	23fa      	movs	r3, #250	; 0xfa
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	492e      	ldr	r1, [pc, #184]	; (8000734 <main+0x108>)
 800067c:	482c      	ldr	r0, [pc, #176]	; (8000730 <main+0x104>)
 800067e:	220a      	movs	r2, #10
 8000680:	f002 fd1c 	bl	80030bc <HAL_UART_Receive>
 8000684:	0003      	movs	r3, r0
 8000686:	001a      	movs	r2, r3
 8000688:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <main+0x10c>)
 800068a:	701a      	strb	r2, [r3, #0]
	  for ( uint8_t i = 0 ; i < sizeof ( uart_rx_buffer ) ; i++)
 800068c:	230f      	movs	r3, #15
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e021      	b.n	80006da <main+0xae>
	  {
		  if ( strncmp ( (const char*)template , (const char*)&uart_rx_buffer[i] , 2 ) == 0 )
 8000696:	230f      	movs	r3, #15
 8000698:	18fb      	adds	r3, r7, r3
 800069a:	781a      	ldrb	r2, [r3, #0]
 800069c:	4b25      	ldr	r3, [pc, #148]	; (8000734 <main+0x108>)
 800069e:	18d1      	adds	r1, r2, r3
 80006a0:	4b26      	ldr	r3, [pc, #152]	; (800073c <main+0x110>)
 80006a2:	2202      	movs	r2, #2
 80006a4:	0018      	movs	r0, r3
 80006a6:	f003 fb97 	bl	8003dd8 <strncmp>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d10f      	bne.n	80006ce <main+0xa2>
			  r = HAL_UART_Transmit ( &huart2, uart_rx_buffer , (uint16_t)strlen ( (const char*)uart_rx_buffer ) , 1000 );
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <main+0x108>)
 80006b0:	0018      	movs	r0, r3
 80006b2:	f7ff fd27 	bl	8000104 <strlen>
 80006b6:	0003      	movs	r3, r0
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	23fa      	movs	r3, #250	; 0xfa
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	491d      	ldr	r1, [pc, #116]	; (8000734 <main+0x108>)
 80006c0:	481b      	ldr	r0, [pc, #108]	; (8000730 <main+0x104>)
 80006c2:	f002 fc4f 	bl	8002f64 <HAL_UART_Transmit>
 80006c6:	0003      	movs	r3, r0
 80006c8:	001a      	movs	r2, r3
 80006ca:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <main+0x10c>)
 80006cc:	701a      	strb	r2, [r3, #0]
	  for ( uint8_t i = 0 ; i < sizeof ( uart_rx_buffer ) ; i++)
 80006ce:	210f      	movs	r1, #15
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	781a      	ldrb	r2, [r3, #0]
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	3201      	adds	r2, #1
 80006d8:	701a      	strb	r2, [r3, #0]
 80006da:	230f      	movs	r3, #15
 80006dc:	18fb      	adds	r3, r7, r3
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b09      	cmp	r3, #9
 80006e2:	d9d8      	bls.n	8000696 <main+0x6a>
	  }

	  HAL_GPIO_WritePin	( SPI1_CS_GPIO_Port , SPI1_CS_Pin , GPIO_PIN_RESET );
 80006e4:	23a0      	movs	r3, #160	; 0xa0
 80006e6:	05db      	lsls	r3, r3, #23
 80006e8:	2200      	movs	r2, #0
 80006ea:	2101      	movs	r1, #1
 80006ec:	0018      	movs	r0, r3
 80006ee:	f000 fe33 	bl	8001358 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit	( &hspi1 , 0x0F , 1 , 1000 );
 80006f2:	23fa      	movs	r3, #250	; 0xfa
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	480c      	ldr	r0, [pc, #48]	; (8000728 <main+0xfc>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	210f      	movs	r1, #15
 80006fc:	f001 fd92 	bl	8002224 <HAL_SPI_Transmit>
	  HAL_SPI_Receive	( &hspi1 , &whoami2 , 1 , 1000 );
 8000700:	23fa      	movs	r3, #250	; 0xfa
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	490e      	ldr	r1, [pc, #56]	; (8000740 <main+0x114>)
 8000706:	4808      	ldr	r0, [pc, #32]	; (8000728 <main+0xfc>)
 8000708:	2201      	movs	r2, #1
 800070a:	f001 fee3 	bl	80024d4 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin	( SPI1_CS_GPIO_Port , SPI1_CS_Pin , GPIO_PIN_SET );
 800070e:	23a0      	movs	r3, #160	; 0xa0
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	2201      	movs	r2, #1
 8000714:	2101      	movs	r1, #1
 8000716:	0018      	movs	r0, r3
 8000718:	f000 fe1e 	bl	8001358 <HAL_GPIO_WritePin>
	  HAL_UART_Transmit ( &huart2, &whoami , 1 , 1000 );
 800071c:	e7a4      	b.n	8000668 <main+0x3c>
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	08000a65 	.word	0x08000a65
 8000724:	08000ac9 	.word	0x08000ac9
 8000728:	200000d0 	.word	0x200000d0
 800072c:	20000038 	.word	0x20000038
 8000730:	20000134 	.word	0x20000134
 8000734:	20000000 	.word	0x20000000
 8000738:	2000003c 	.word	0x2000003c
 800073c:	2000000c 	.word	0x2000000c
 8000740:	20000039 	.word	0x20000039

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b09d      	sub	sp, #116	; 0x74
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	2438      	movs	r4, #56	; 0x38
 800074c:	193b      	adds	r3, r7, r4
 800074e:	0018      	movs	r0, r3
 8000750:	2338      	movs	r3, #56	; 0x38
 8000752:	001a      	movs	r2, r3
 8000754:	2100      	movs	r1, #0
 8000756:	f003 fb37 	bl	8003dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075a:	2328      	movs	r3, #40	; 0x28
 800075c:	18fb      	adds	r3, r7, r3
 800075e:	0018      	movs	r0, r3
 8000760:	2310      	movs	r3, #16
 8000762:	001a      	movs	r2, r3
 8000764:	2100      	movs	r1, #0
 8000766:	f003 fb2f 	bl	8003dc8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800076a:	003b      	movs	r3, r7
 800076c:	0018      	movs	r0, r3
 800076e:	2328      	movs	r3, #40	; 0x28
 8000770:	001a      	movs	r2, r3
 8000772:	2100      	movs	r1, #0
 8000774:	f003 fb28 	bl	8003dc8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	0018      	movs	r0, r3
 800077e:	f000 fe09 	bl	8001394 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000782:	193b      	adds	r3, r7, r4
 8000784:	2202      	movs	r2, #2
 8000786:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	193b      	adds	r3, r7, r4
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	0052      	lsls	r2, r2, #1
 800078e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000790:	193b      	adds	r3, r7, r4
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000796:	193b      	adds	r3, r7, r4
 8000798:	2240      	movs	r2, #64	; 0x40
 800079a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800079c:	193b      	adds	r3, r7, r4
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	0018      	movs	r0, r3
 80007a6:	f000 fe41 	bl	800142c <HAL_RCC_OscConfig>
 80007aa:	1e03      	subs	r3, r0, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007ae:	f000 f9c5 	bl	8000b3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b2:	2128      	movs	r1, #40	; 0x28
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2207      	movs	r2, #7
 80007b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2200      	movs	r2, #0
 80007be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2100      	movs	r1, #0
 80007d0:	0018      	movs	r0, r3
 80007d2:	f001 f94b 	bl	8001a6c <HAL_RCC_ClockConfig>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007da:	f000 f9af 	bl	8000b3c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80007de:	003b      	movs	r3, r7
 80007e0:	2201      	movs	r2, #1
 80007e2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80007e4:	003b      	movs	r3, r7
 80007e6:	2200      	movs	r2, #0
 80007e8:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ea:	003b      	movs	r3, r7
 80007ec:	0018      	movs	r0, r3
 80007ee:	f001 fae7 	bl	8001dc0 <HAL_RCCEx_PeriphCLKConfig>
 80007f2:	1e03      	subs	r3, r0, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007f6:	f000 f9a1 	bl	8000b3c <Error_Handler>
  }
}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b01d      	add	sp, #116	; 0x74
 8000800:	bd90      	pop	{r4, r7, pc}
	...

08000804 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <MX_SPI1_Init+0x74>)
 800080a:	4a1c      	ldr	r2, [pc, #112]	; (800087c <MX_SPI1_Init+0x78>)
 800080c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_SPI1_Init+0x74>)
 8000810:	2282      	movs	r2, #130	; 0x82
 8000812:	0052      	lsls	r2, r2, #1
 8000814:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_SPI1_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <MX_SPI1_Init+0x74>)
 800081e:	22e0      	movs	r2, #224	; 0xe0
 8000820:	00d2      	lsls	r2, r2, #3
 8000822:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_SPI1_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_SPI1_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_SPI1_Init+0x74>)
 8000832:	2280      	movs	r2, #128	; 0x80
 8000834:	0092      	lsls	r2, r2, #2
 8000836:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_SPI1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_SPI1_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_SPI1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_SPI1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_SPI1_Init+0x74>)
 8000852:	2207      	movs	r2, #7
 8000854:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_SPI1_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_SPI1_Init+0x74>)
 800085e:	2208      	movs	r2, #8
 8000860:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <MX_SPI1_Init+0x74>)
 8000864:	0018      	movs	r0, r3
 8000866:	f001 fc25 	bl	80020b4 <HAL_SPI_Init>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800086e:	f000 f965 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200000d0 	.word	0x200000d0
 800087c:	40013000 	.word	0x40013000

08000880 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000884:	4b23      	ldr	r3, [pc, #140]	; (8000914 <MX_USART1_UART_Init+0x94>)
 8000886:	4a24      	ldr	r2, [pc, #144]	; (8000918 <MX_USART1_UART_Init+0x98>)
 8000888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800088a:	4b22      	ldr	r3, [pc, #136]	; (8000914 <MX_USART1_UART_Init+0x94>)
 800088c:	2296      	movs	r2, #150	; 0x96
 800088e:	0192      	lsls	r2, r2, #6
 8000890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b20      	ldr	r3, [pc, #128]	; (8000914 <MX_USART1_UART_Init+0x94>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <MX_USART1_UART_Init+0x94>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008ca:	0018      	movs	r0, r3
 80008cc:	f002 faf4 	bl	8002eb8 <HAL_UART_Init>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d001      	beq.n	80008d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008d4:	f000 f932 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008da:	2100      	movs	r1, #0
 80008dc:	0018      	movs	r0, r3
 80008de:	f003 f96f 	bl	8003bc0 <HAL_UARTEx_SetTxFifoThreshold>
 80008e2:	1e03      	subs	r3, r0, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008e6:	f000 f929 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ea:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008ec:	2100      	movs	r1, #0
 80008ee:	0018      	movs	r0, r3
 80008f0:	f003 f9a6 	bl	8003c40 <HAL_UARTEx_SetRxFifoThreshold>
 80008f4:	1e03      	subs	r3, r0, #0
 80008f6:	d001      	beq.n	80008fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008f8:	f000 f920 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <MX_USART1_UART_Init+0x94>)
 80008fe:	0018      	movs	r0, r3
 8000900:	f003 f924 	bl	8003b4c <HAL_UARTEx_DisableFifoMode>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d001      	beq.n	800090c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000908:	f000 f918 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	20000040 	.word	0x20000040
 8000918:	40013800 	.word	0x40013800

0800091c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_USART2_UART_Init+0x60>)
 8000922:	4a17      	ldr	r2, [pc, #92]	; (8000980 <MX_USART2_UART_Init+0x64>)
 8000924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <MX_USART2_UART_Init+0x60>)
 8000928:	22e1      	movs	r2, #225	; 0xe1
 800092a:	0252      	lsls	r2, r2, #9
 800092c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <MX_USART2_UART_Init+0x60>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_USART2_UART_Init+0x60>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <MX_USART2_UART_Init+0x60>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_USART2_UART_Init+0x60>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <MX_USART2_UART_Init+0x60>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_USART2_UART_Init+0x60>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <MX_USART2_UART_Init+0x60>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_USART2_UART_Init+0x60>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <MX_USART2_UART_Init+0x60>)
 8000960:	2200      	movs	r2, #0
 8000962:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <MX_USART2_UART_Init+0x60>)
 8000966:	0018      	movs	r0, r3
 8000968:	f002 faa6 	bl	8002eb8 <HAL_UART_Init>
 800096c:	1e03      	subs	r3, r0, #0
 800096e:	d001      	beq.n	8000974 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000970:	f000 f8e4 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	20000134 	.word	0x20000134
 8000980:	40004400 	.word	0x40004400

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b089      	sub	sp, #36	; 0x24
 8000988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	240c      	movs	r4, #12
 800098c:	193b      	adds	r3, r7, r4
 800098e:	0018      	movs	r0, r3
 8000990:	2314      	movs	r3, #20
 8000992:	001a      	movs	r2, r3
 8000994:	2100      	movs	r1, #0
 8000996:	f003 fa17 	bl	8003dc8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b30      	ldr	r3, [pc, #192]	; (8000a5c <MX_GPIO_Init+0xd8>)
 800099c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800099e:	4b2f      	ldr	r3, [pc, #188]	; (8000a5c <MX_GPIO_Init+0xd8>)
 80009a0:	2101      	movs	r1, #1
 80009a2:	430a      	orrs	r2, r1
 80009a4:	635a      	str	r2, [r3, #52]	; 0x34
 80009a6:	4b2d      	ldr	r3, [pc, #180]	; (8000a5c <MX_GPIO_Init+0xd8>)
 80009a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009aa:	2201      	movs	r2, #1
 80009ac:	4013      	ands	r3, r2
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	4b2a      	ldr	r3, [pc, #168]	; (8000a5c <MX_GPIO_Init+0xd8>)
 80009b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009b6:	4b29      	ldr	r3, [pc, #164]	; (8000a5c <MX_GPIO_Init+0xd8>)
 80009b8:	2104      	movs	r1, #4
 80009ba:	430a      	orrs	r2, r1
 80009bc:	635a      	str	r2, [r3, #52]	; 0x34
 80009be:	4b27      	ldr	r3, [pc, #156]	; (8000a5c <MX_GPIO_Init+0xd8>)
 80009c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009c2:	2204      	movs	r2, #4
 80009c4:	4013      	ands	r3, r2
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80009ca:	23a0      	movs	r3, #160	; 0xa0
 80009cc:	05db      	lsls	r3, r3, #23
 80009ce:	2200      	movs	r2, #0
 80009d0:	2101      	movs	r1, #1
 80009d2:	0018      	movs	r0, r3
 80009d4:	f000 fcc0 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80009d8:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <MX_GPIO_Init+0xdc>)
 80009da:	2200      	movs	r2, #0
 80009dc:	2140      	movs	r1, #64	; 0x40
 80009de:	0018      	movs	r0, r3
 80009e0:	f000 fcba 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80009e4:	193b      	adds	r3, r7, r4
 80009e6:	2201      	movs	r2, #1
 80009e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	2201      	movs	r2, #1
 80009ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80009fc:	193a      	adds	r2, r7, r4
 80009fe:	23a0      	movs	r3, #160	; 0xa0
 8000a00:	05db      	lsls	r3, r3, #23
 8000a02:	0011      	movs	r1, r2
 8000a04:	0018      	movs	r0, r3
 8000a06:	f000 fb43 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	2240      	movs	r2, #64	; 0x40
 8000a0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	193b      	adds	r3, r7, r4
 8000a12:	2201      	movs	r2, #1
 8000a14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <MX_GPIO_Init+0xdc>)
 8000a26:	0019      	movs	r1, r3
 8000a28:	0010      	movs	r0, r2
 8000a2a:	f000 fb31 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pin : IIS2DLPC_INT1_Pin */
  GPIO_InitStruct.Pin = IIS2DLPC_INT1_Pin;
 8000a2e:	0021      	movs	r1, r4
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	0112      	lsls	r2, r2, #4
 8000a36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2288      	movs	r2, #136	; 0x88
 8000a3c:	0352      	lsls	r2, r2, #13
 8000a3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IIS2DLPC_INT1_GPIO_Port, &GPIO_InitStruct);
 8000a46:	187a      	adds	r2, r7, r1
 8000a48:	23a0      	movs	r3, #160	; 0xa0
 8000a4a:	05db      	lsls	r3, r3, #23
 8000a4c:	0011      	movs	r1, r2
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f000 fb1e 	bl	8001090 <HAL_GPIO_Init>

}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b009      	add	sp, #36	; 0x24
 8000a5a:	bd90      	pop	{r4, r7, pc}
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	50000800 	.word	0x50000800

08000a64 <platform_write>:

/* USER CODE BEGIN 4 */
static int32_t platform_write ( void *handle , uint8_t reg , const uint8_t *bufp , uint16_t len )
{
 8000a64:	b5b0      	push	{r4, r5, r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	0008      	movs	r0, r1
 8000a6e:	607a      	str	r2, [r7, #4]
 8000a70:	0019      	movs	r1, r3
 8000a72:	240b      	movs	r4, #11
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	1c02      	adds	r2, r0, #0
 8000a78:	701a      	strb	r2, [r3, #0]
 8000a7a:	2508      	movs	r5, #8
 8000a7c:	197b      	adds	r3, r7, r5
 8000a7e:	1c0a      	adds	r2, r1, #0
 8000a80:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( SPI1_CS_GPIO_Port , SPI1_CS_Pin , GPIO_PIN_RESET);
 8000a82:	23a0      	movs	r3, #160	; 0xa0
 8000a84:	05db      	lsls	r3, r3, #23
 8000a86:	2200      	movs	r2, #0
 8000a88:	2101      	movs	r1, #1
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f000 fc64 	bl	8001358 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 );
 8000a90:	23fa      	movs	r3, #250	; 0xfa
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	1939      	adds	r1, r7, r4
 8000a96:	68f8      	ldr	r0, [r7, #12]
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f001 fbc3 	bl	8002224 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 );
 8000a9e:	23fa      	movs	r3, #250	; 0xfa
 8000aa0:	009c      	lsls	r4, r3, #2
 8000aa2:	197b      	adds	r3, r7, r5
 8000aa4:	881a      	ldrh	r2, [r3, #0]
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	68f8      	ldr	r0, [r7, #12]
 8000aaa:	0023      	movs	r3, r4
 8000aac:	f001 fbba 	bl	8002224 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( SPI1_CS_GPIO_Port , SPI1_CS_Pin , GPIO_PIN_SET);
 8000ab0:	23a0      	movs	r3, #160	; 0xa0
 8000ab2:	05db      	lsls	r3, r3, #23
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f000 fc4d 	bl	8001358 <HAL_GPIO_WritePin>
	return 0;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b004      	add	sp, #16
 8000ac6:	bdb0      	pop	{r4, r5, r7, pc}

08000ac8 <platform_read>:
static int32_t platform_read ( void *handle , uint8_t reg , uint8_t *bufp , uint16_t len )
{
 8000ac8:	b5b0      	push	{r4, r5, r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	0008      	movs	r0, r1
 8000ad2:	607a      	str	r2, [r7, #4]
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	240b      	movs	r4, #11
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	1c02      	adds	r2, r0, #0
 8000adc:	701a      	strb	r2, [r3, #0]
 8000ade:	2508      	movs	r5, #8
 8000ae0:	197b      	adds	r3, r7, r5
 8000ae2:	1c0a      	adds	r2, r1, #0
 8000ae4:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2280      	movs	r2, #128	; 0x80
 8000aec:	4252      	negs	r2, r2
 8000aee:	4313      	orrs	r3, r2
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin	( SPI1_CS_GPIO_Port , SPI1_CS_Pin , GPIO_PIN_RESET );
 8000af6:	23a0      	movs	r3, #160	; 0xa0
 8000af8:	05db      	lsls	r3, r3, #23
 8000afa:	2200      	movs	r2, #0
 8000afc:	2101      	movs	r1, #1
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 fc2a 	bl	8001358 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 );
 8000b04:	23fa      	movs	r3, #250	; 0xfa
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	1939      	adds	r1, r7, r4
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f001 fb89 	bl	8002224 <HAL_SPI_Transmit>
	HAL_SPI_Receive		( handle , bufp , len, 1000 );
 8000b12:	23fa      	movs	r3, #250	; 0xfa
 8000b14:	009c      	lsls	r4, r3, #2
 8000b16:	197b      	adds	r3, r7, r5
 8000b18:	881a      	ldrh	r2, [r3, #0]
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	68f8      	ldr	r0, [r7, #12]
 8000b1e:	0023      	movs	r3, r4
 8000b20:	f001 fcd8 	bl	80024d4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin	( SPI1_CS_GPIO_Port , SPI1_CS_Pin , GPIO_PIN_SET );
 8000b24:	23a0      	movs	r3, #160	; 0xa0
 8000b26:	05db      	lsls	r3, r3, #23
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f000 fc13 	bl	8001358 <HAL_GPIO_WritePin>
	return 0;
 8000b32:	2300      	movs	r3, #0
}
 8000b34:	0018      	movs	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b004      	add	sp, #16
 8000b3a:	bdb0      	pop	{r4, r5, r7, pc}

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <Error_Handler+0x8>
	...

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_MspInit+0x44>)
 8000b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_MspInit+0x44>)
 8000b54:	2101      	movs	r1, #1
 8000b56:	430a      	orrs	r2, r1
 8000b58:	641a      	str	r2, [r3, #64]	; 0x40
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_MspInit+0x44>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4013      	ands	r3, r2
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_MspInit+0x44>)
 8000b68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_MspInit+0x44>)
 8000b6c:	2180      	movs	r1, #128	; 0x80
 8000b6e:	0549      	lsls	r1, r1, #21
 8000b70:	430a      	orrs	r2, r1
 8000b72:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_MspInit+0x44>)
 8000b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	055b      	lsls	r3, r3, #21
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b002      	add	sp, #8
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	40021000 	.word	0x40021000

08000b90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b08b      	sub	sp, #44	; 0x2c
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	2414      	movs	r4, #20
 8000b9a:	193b      	adds	r3, r7, r4
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	2314      	movs	r3, #20
 8000ba0:	001a      	movs	r2, r3
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	f003 f910 	bl	8003dc8 <memset>
  if(hspi->Instance==SPI1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a1b      	ldr	r2, [pc, #108]	; (8000c1c <HAL_SPI_MspInit+0x8c>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d130      	bne.n	8000c14 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bb2:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <HAL_SPI_MspInit+0x90>)
 8000bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <HAL_SPI_MspInit+0x90>)
 8000bb8:	2180      	movs	r1, #128	; 0x80
 8000bba:	0149      	lsls	r1, r1, #5
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	641a      	str	r2, [r3, #64]	; 0x40
 8000bc0:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <HAL_SPI_MspInit+0x90>)
 8000bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	015b      	lsls	r3, r3, #5
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <HAL_SPI_MspInit+0x90>)
 8000bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bd2:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <HAL_SPI_MspInit+0x90>)
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	635a      	str	r2, [r3, #52]	; 0x34
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <HAL_SPI_MspInit+0x90>)
 8000bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bde:	2201      	movs	r2, #1
 8000be0:	4013      	ands	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000be6:	0021      	movs	r1, r4
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	22c2      	movs	r2, #194	; 0xc2
 8000bec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	187a      	adds	r2, r7, r1
 8000c08:	23a0      	movs	r3, #160	; 0xa0
 8000c0a:	05db      	lsls	r3, r3, #23
 8000c0c:	0011      	movs	r1, r2
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 fa3e 	bl	8001090 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c14:	46c0      	nop			; (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b00b      	add	sp, #44	; 0x2c
 8000c1a:	bd90      	pop	{r4, r7, pc}
 8000c1c:	40013000 	.word	0x40013000
 8000c20:	40021000 	.word	0x40021000

08000c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b08d      	sub	sp, #52	; 0x34
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	241c      	movs	r4, #28
 8000c2e:	193b      	adds	r3, r7, r4
 8000c30:	0018      	movs	r0, r3
 8000c32:	2314      	movs	r3, #20
 8000c34:	001a      	movs	r2, r3
 8000c36:	2100      	movs	r1, #0
 8000c38:	f003 f8c6 	bl	8003dc8 <memset>
  if(huart->Instance==USART1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a37      	ldr	r2, [pc, #220]	; (8000d20 <HAL_UART_MspInit+0xfc>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d132      	bne.n	8000cac <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c46:	4b37      	ldr	r3, [pc, #220]	; (8000d24 <HAL_UART_MspInit+0x100>)
 8000c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c4a:	4b36      	ldr	r3, [pc, #216]	; (8000d24 <HAL_UART_MspInit+0x100>)
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	01c9      	lsls	r1, r1, #7
 8000c50:	430a      	orrs	r2, r1
 8000c52:	641a      	str	r2, [r3, #64]	; 0x40
 8000c54:	4b33      	ldr	r3, [pc, #204]	; (8000d24 <HAL_UART_MspInit+0x100>)
 8000c56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	01db      	lsls	r3, r3, #7
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
 8000c60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	4b30      	ldr	r3, [pc, #192]	; (8000d24 <HAL_UART_MspInit+0x100>)
 8000c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c66:	4b2f      	ldr	r3, [pc, #188]	; (8000d24 <HAL_UART_MspInit+0x100>)
 8000c68:	2101      	movs	r1, #1
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c6e:	4b2d      	ldr	r3, [pc, #180]	; (8000d24 <HAL_UART_MspInit+0x100>)
 8000c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c72:	2201      	movs	r2, #1
 8000c74:	4013      	ands	r3, r2
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c7a:	193b      	adds	r3, r7, r4
 8000c7c:	22c0      	movs	r2, #192	; 0xc0
 8000c7e:	00d2      	lsls	r2, r2, #3
 8000c80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	0021      	movs	r1, r4
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	2202      	movs	r2, #2
 8000c88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	2201      	movs	r2, #1
 8000c9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	187a      	adds	r2, r7, r1
 8000c9e:	23a0      	movs	r3, #160	; 0xa0
 8000ca0:	05db      	lsls	r3, r3, #23
 8000ca2:	0011      	movs	r1, r2
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f000 f9f3 	bl	8001090 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000caa:	e035      	b.n	8000d18 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a1d      	ldr	r2, [pc, #116]	; (8000d28 <HAL_UART_MspInit+0x104>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d130      	bne.n	8000d18 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb6:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <HAL_UART_MspInit+0x100>)
 8000cb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <HAL_UART_MspInit+0x100>)
 8000cbc:	2180      	movs	r1, #128	; 0x80
 8000cbe:	0289      	lsls	r1, r1, #10
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cc4:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <HAL_UART_MspInit+0x100>)
 8000cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	029b      	lsls	r3, r3, #10
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <HAL_UART_MspInit+0x100>)
 8000cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <HAL_UART_MspInit+0x100>)
 8000cd8:	2101      	movs	r1, #1
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	635a      	str	r2, [r3, #52]	; 0x34
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_UART_MspInit+0x100>)
 8000ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cea:	211c      	movs	r1, #28
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	220c      	movs	r2, #12
 8000cf0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2200      	movs	r2, #0
 8000d02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2201      	movs	r2, #1
 8000d08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	187a      	adds	r2, r7, r1
 8000d0c:	23a0      	movs	r3, #160	; 0xa0
 8000d0e:	05db      	lsls	r3, r3, #23
 8000d10:	0011      	movs	r1, r2
 8000d12:	0018      	movs	r0, r3
 8000d14:	f000 f9bc 	bl	8001090 <HAL_GPIO_Init>
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b00d      	add	sp, #52	; 0x34
 8000d1e:	bd90      	pop	{r4, r7, pc}
 8000d20:	40013800 	.word	0x40013800
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40004400 	.word	0x40004400

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <NMI_Handler+0x4>

08000d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <HardFault_Handler+0x4>

08000d38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d50:	f000 f8ce 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d64:	480d      	ldr	r0, [pc, #52]	; (8000d9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d68:	f7ff fff7 	bl	8000d5a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d6c:	480c      	ldr	r0, [pc, #48]	; (8000da0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d6e:	490d      	ldr	r1, [pc, #52]	; (8000da4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d70:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <LoopForever+0xe>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d84:	4c0a      	ldr	r4, [pc, #40]	; (8000db0 <LoopForever+0x16>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d92:	f002 fff5 	bl	8003d80 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d96:	f7ff fc49 	bl	800062c <main>

08000d9a <LoopForever>:

LoopForever:
  b LoopForever
 8000d9a:	e7fe      	b.n	8000d9a <LoopForever>
  ldr   r0, =_estack
 8000d9c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000da8:	08003eac 	.word	0x08003eac
  ldr r2, =_sbss
 8000dac:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000db0:	200001c8 	.word	0x200001c8

08000db4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC1_IRQHandler>

08000db6 <iis2dlpc_read_reg>:
  *
  */
int32_t iis2dlpc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8000db6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000db8:	b087      	sub	sp, #28
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	60f8      	str	r0, [r7, #12]
 8000dbe:	0008      	movs	r0, r1
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	0019      	movs	r1, r3
 8000dc4:	260b      	movs	r6, #11
 8000dc6:	19bb      	adds	r3, r7, r6
 8000dc8:	1c02      	adds	r2, r0, #0
 8000dca:	701a      	strb	r2, [r3, #0]
 8000dcc:	2508      	movs	r5, #8
 8000dce:	197b      	adds	r3, r7, r5
 8000dd0:	1c0a      	adds	r2, r1, #0
 8000dd2:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	685c      	ldr	r4, [r3, #4]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	6898      	ldr	r0, [r3, #8]
 8000ddc:	197b      	adds	r3, r7, r5
 8000dde:	881d      	ldrh	r5, [r3, #0]
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	19bb      	adds	r3, r7, r6
 8000de4:	7819      	ldrb	r1, [r3, #0]
 8000de6:	002b      	movs	r3, r5
 8000de8:	47a0      	blx	r4
 8000dea:	0003      	movs	r3, r0
 8000dec:	617b      	str	r3, [r7, #20]

  return ret;
 8000dee:	697b      	ldr	r3, [r7, #20]
}
 8000df0:	0018      	movs	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b007      	add	sp, #28
 8000df6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000df8 <iis2dlpc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_WHO_AM_I, buff, 1);
 8000e02:	683a      	ldr	r2, [r7, #0]
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	2301      	movs	r3, #1
 8000e08:	210f      	movs	r1, #15
 8000e0a:	f7ff ffd4 	bl	8000db6 <iis2dlpc_read_reg>
 8000e0e:	0003      	movs	r3, r0
 8000e10:	60fb      	str	r3, [r7, #12]

  return ret;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	0018      	movs	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b004      	add	sp, #16
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <HAL_Init+0x3c>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_Init+0x3c>)
 8000e2e:	2180      	movs	r1, #128	; 0x80
 8000e30:	0049      	lsls	r1, r1, #1
 8000e32:	430a      	orrs	r2, r1
 8000e34:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e36:	2003      	movs	r0, #3
 8000e38:	f000 f810 	bl	8000e5c <HAL_InitTick>
 8000e3c:	1e03      	subs	r3, r0, #0
 8000e3e:	d003      	beq.n	8000e48 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e40:	1dfb      	adds	r3, r7, #7
 8000e42:	2201      	movs	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
 8000e46:	e001      	b.n	8000e4c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e48:	f7ff fe7e 	bl	8000b48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e4c:	1dfb      	adds	r3, r7, #7
 8000e4e:	781b      	ldrb	r3, [r3, #0]
}
 8000e50:	0018      	movs	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b002      	add	sp, #8
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40022000 	.word	0x40022000

08000e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e64:	230f      	movs	r3, #15
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <HAL_InitTick+0x88>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d02b      	beq.n	8000ecc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000e74:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <HAL_InitTick+0x8c>)
 8000e76:	681c      	ldr	r4, [r3, #0]
 8000e78:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <HAL_InitTick+0x88>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	0019      	movs	r1, r3
 8000e7e:	23fa      	movs	r3, #250	; 0xfa
 8000e80:	0098      	lsls	r0, r3, #2
 8000e82:	f7ff f947 	bl	8000114 <__udivsi3>
 8000e86:	0003      	movs	r3, r0
 8000e88:	0019      	movs	r1, r3
 8000e8a:	0020      	movs	r0, r4
 8000e8c:	f7ff f942 	bl	8000114 <__udivsi3>
 8000e90:	0003      	movs	r3, r0
 8000e92:	0018      	movs	r0, r3
 8000e94:	f000 f8ef 	bl	8001076 <HAL_SYSTICK_Config>
 8000e98:	1e03      	subs	r3, r0, #0
 8000e9a:	d112      	bne.n	8000ec2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b03      	cmp	r3, #3
 8000ea0:	d80a      	bhi.n	8000eb8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	425b      	negs	r3, r3
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f000 f8ce 	bl	800104c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_InitTick+0x90>)
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	e00d      	b.n	8000ed4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000eb8:	230f      	movs	r3, #15
 8000eba:	18fb      	adds	r3, r7, r3
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	701a      	strb	r2, [r3, #0]
 8000ec0:	e008      	b.n	8000ed4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ec2:	230f      	movs	r3, #15
 8000ec4:	18fb      	adds	r3, r7, r3
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	701a      	strb	r2, [r3, #0]
 8000eca:	e003      	b.n	8000ed4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ecc:	230f      	movs	r3, #15
 8000ece:	18fb      	adds	r3, r7, r3
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	781b      	ldrb	r3, [r3, #0]
}
 8000eda:	0018      	movs	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b005      	add	sp, #20
 8000ee0:	bd90      	pop	{r4, r7, pc}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	20000018 	.word	0x20000018
 8000ee8:	20000010 	.word	0x20000010
 8000eec:	20000014 	.word	0x20000014

08000ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HAL_IncTick+0x1c>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	001a      	movs	r2, r3
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_IncTick+0x20>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	18d2      	adds	r2, r2, r3
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <HAL_IncTick+0x20>)
 8000f02:	601a      	str	r2, [r3, #0]
}
 8000f04:	46c0      	nop			; (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	20000018 	.word	0x20000018
 8000f10:	200001c4 	.word	0x200001c4

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b02      	ldr	r3, [pc, #8]	; (8000f24 <HAL_GetTick+0x10>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	200001c4 	.word	0x200001c4

08000f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	0002      	movs	r2, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f3c:	d828      	bhi.n	8000f90 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f3e:	4a2f      	ldr	r2, [pc, #188]	; (8000ffc <__NVIC_SetPriority+0xd4>)
 8000f40:	1dfb      	adds	r3, r7, #7
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	33c0      	adds	r3, #192	; 0xc0
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	589b      	ldr	r3, [r3, r2]
 8000f4e:	1dfa      	adds	r2, r7, #7
 8000f50:	7812      	ldrb	r2, [r2, #0]
 8000f52:	0011      	movs	r1, r2
 8000f54:	2203      	movs	r2, #3
 8000f56:	400a      	ands	r2, r1
 8000f58:	00d2      	lsls	r2, r2, #3
 8000f5a:	21ff      	movs	r1, #255	; 0xff
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	000a      	movs	r2, r1
 8000f60:	43d2      	mvns	r2, r2
 8000f62:	401a      	ands	r2, r3
 8000f64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	019b      	lsls	r3, r3, #6
 8000f6a:	22ff      	movs	r2, #255	; 0xff
 8000f6c:	401a      	ands	r2, r3
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	0018      	movs	r0, r3
 8000f74:	2303      	movs	r3, #3
 8000f76:	4003      	ands	r3, r0
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f7c:	481f      	ldr	r0, [pc, #124]	; (8000ffc <__NVIC_SetPriority+0xd4>)
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	089b      	lsrs	r3, r3, #2
 8000f86:	430a      	orrs	r2, r1
 8000f88:	33c0      	adds	r3, #192	; 0xc0
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f8e:	e031      	b.n	8000ff4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f90:	4a1b      	ldr	r2, [pc, #108]	; (8001000 <__NVIC_SetPriority+0xd8>)
 8000f92:	1dfb      	adds	r3, r7, #7
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	0019      	movs	r1, r3
 8000f98:	230f      	movs	r3, #15
 8000f9a:	400b      	ands	r3, r1
 8000f9c:	3b08      	subs	r3, #8
 8000f9e:	089b      	lsrs	r3, r3, #2
 8000fa0:	3306      	adds	r3, #6
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	18d3      	adds	r3, r2, r3
 8000fa6:	3304      	adds	r3, #4
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	1dfa      	adds	r2, r7, #7
 8000fac:	7812      	ldrb	r2, [r2, #0]
 8000fae:	0011      	movs	r1, r2
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	400a      	ands	r2, r1
 8000fb4:	00d2      	lsls	r2, r2, #3
 8000fb6:	21ff      	movs	r1, #255	; 0xff
 8000fb8:	4091      	lsls	r1, r2
 8000fba:	000a      	movs	r2, r1
 8000fbc:	43d2      	mvns	r2, r2
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	019b      	lsls	r3, r3, #6
 8000fc6:	22ff      	movs	r2, #255	; 0xff
 8000fc8:	401a      	ands	r2, r3
 8000fca:	1dfb      	adds	r3, r7, #7
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	0018      	movs	r0, r3
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	4003      	ands	r3, r0
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fd8:	4809      	ldr	r0, [pc, #36]	; (8001000 <__NVIC_SetPriority+0xd8>)
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	001c      	movs	r4, r3
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	4023      	ands	r3, r4
 8000fe4:	3b08      	subs	r3, #8
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	3306      	adds	r3, #6
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	18c3      	adds	r3, r0, r3
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	601a      	str	r2, [r3, #0]
}
 8000ff4:	46c0      	nop			; (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b003      	add	sp, #12
 8000ffa:	bd90      	pop	{r4, r7, pc}
 8000ffc:	e000e100 	.word	0xe000e100
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	1e5a      	subs	r2, r3, #1
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	045b      	lsls	r3, r3, #17
 8001014:	429a      	cmp	r2, r3
 8001016:	d301      	bcc.n	800101c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001018:	2301      	movs	r3, #1
 800101a:	e010      	b.n	800103e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <SysTick_Config+0x44>)
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	3a01      	subs	r2, #1
 8001022:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001024:	2301      	movs	r3, #1
 8001026:	425b      	negs	r3, r3
 8001028:	2103      	movs	r1, #3
 800102a:	0018      	movs	r0, r3
 800102c:	f7ff ff7c 	bl	8000f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <SysTick_Config+0x44>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001036:	4b04      	ldr	r3, [pc, #16]	; (8001048 <SysTick_Config+0x44>)
 8001038:	2207      	movs	r2, #7
 800103a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800103c:	2300      	movs	r3, #0
}
 800103e:	0018      	movs	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	b002      	add	sp, #8
 8001044:	bd80      	pop	{r7, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	e000e010 	.word	0xe000e010

0800104c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	210f      	movs	r1, #15
 8001058:	187b      	adds	r3, r7, r1
 800105a:	1c02      	adds	r2, r0, #0
 800105c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	187b      	adds	r3, r7, r1
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b25b      	sxtb	r3, r3
 8001066:	0011      	movs	r1, r2
 8001068:	0018      	movs	r0, r3
 800106a:	f7ff ff5d 	bl	8000f28 <__NVIC_SetPriority>
}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b004      	add	sp, #16
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	0018      	movs	r0, r3
 8001082:	f7ff ffbf 	bl	8001004 <SysTick_Config>
 8001086:	0003      	movs	r3, r0
}
 8001088:	0018      	movs	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	b002      	add	sp, #8
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109e:	e147      	b.n	8001330 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2101      	movs	r1, #1
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	4091      	lsls	r1, r2
 80010aa:	000a      	movs	r2, r1
 80010ac:	4013      	ands	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d100      	bne.n	80010b8 <HAL_GPIO_Init+0x28>
 80010b6:	e138      	b.n	800132a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2203      	movs	r2, #3
 80010be:	4013      	ands	r3, r2
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d005      	beq.n	80010d0 <HAL_GPIO_Init+0x40>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2203      	movs	r2, #3
 80010ca:	4013      	ands	r3, r2
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d130      	bne.n	8001132 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	409a      	lsls	r2, r3
 80010de:	0013      	movs	r3, r2
 80010e0:	43da      	mvns	r2, r3
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	409a      	lsls	r2, r3
 80010f2:	0013      	movs	r3, r2
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001106:	2201      	movs	r2, #1
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
 800110c:	0013      	movs	r3, r2
 800110e:	43da      	mvns	r2, r3
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	091b      	lsrs	r3, r3, #4
 800111c:	2201      	movs	r2, #1
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
 8001124:	0013      	movs	r3, r2
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2203      	movs	r2, #3
 8001138:	4013      	ands	r3, r2
 800113a:	2b03      	cmp	r3, #3
 800113c:	d017      	beq.n	800116e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	43da      	mvns	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	409a      	lsls	r2, r3
 8001160:	0013      	movs	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2203      	movs	r2, #3
 8001174:	4013      	ands	r3, r2
 8001176:	2b02      	cmp	r3, #2
 8001178:	d123      	bne.n	80011c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	08da      	lsrs	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3208      	adds	r2, #8
 8001182:	0092      	lsls	r2, r2, #2
 8001184:	58d3      	ldr	r3, [r2, r3]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	2207      	movs	r2, #7
 800118c:	4013      	ands	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	220f      	movs	r2, #15
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	43da      	mvns	r2, r3
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	691a      	ldr	r2, [r3, #16]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	2107      	movs	r1, #7
 80011a6:	400b      	ands	r3, r1
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	409a      	lsls	r2, r3
 80011ac:	0013      	movs	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	08da      	lsrs	r2, r3, #3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3208      	adds	r2, #8
 80011bc:	0092      	lsls	r2, r2, #2
 80011be:	6939      	ldr	r1, [r7, #16]
 80011c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	409a      	lsls	r2, r3
 80011d0:	0013      	movs	r3, r2
 80011d2:	43da      	mvns	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2203      	movs	r2, #3
 80011e0:	401a      	ands	r2, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	409a      	lsls	r2, r3
 80011e8:	0013      	movs	r3, r2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	23c0      	movs	r3, #192	; 0xc0
 80011fc:	029b      	lsls	r3, r3, #10
 80011fe:	4013      	ands	r3, r2
 8001200:	d100      	bne.n	8001204 <HAL_GPIO_Init+0x174>
 8001202:	e092      	b.n	800132a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001204:	4a50      	ldr	r2, [pc, #320]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3318      	adds	r3, #24
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	589b      	ldr	r3, [r3, r2]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	2203      	movs	r2, #3
 8001216:	4013      	ands	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	220f      	movs	r2, #15
 800121c:	409a      	lsls	r2, r3
 800121e:	0013      	movs	r3, r2
 8001220:	43da      	mvns	r2, r3
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	23a0      	movs	r3, #160	; 0xa0
 800122c:	05db      	lsls	r3, r3, #23
 800122e:	429a      	cmp	r2, r3
 8001230:	d013      	beq.n	800125a <HAL_GPIO_Init+0x1ca>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a45      	ldr	r2, [pc, #276]	; (800134c <HAL_GPIO_Init+0x2bc>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d00d      	beq.n	8001256 <HAL_GPIO_Init+0x1c6>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a44      	ldr	r2, [pc, #272]	; (8001350 <HAL_GPIO_Init+0x2c0>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d007      	beq.n	8001252 <HAL_GPIO_Init+0x1c2>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a43      	ldr	r2, [pc, #268]	; (8001354 <HAL_GPIO_Init+0x2c4>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d101      	bne.n	800124e <HAL_GPIO_Init+0x1be>
 800124a:	2303      	movs	r3, #3
 800124c:	e006      	b.n	800125c <HAL_GPIO_Init+0x1cc>
 800124e:	2305      	movs	r3, #5
 8001250:	e004      	b.n	800125c <HAL_GPIO_Init+0x1cc>
 8001252:	2302      	movs	r3, #2
 8001254:	e002      	b.n	800125c <HAL_GPIO_Init+0x1cc>
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <HAL_GPIO_Init+0x1cc>
 800125a:	2300      	movs	r3, #0
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	2103      	movs	r1, #3
 8001260:	400a      	ands	r2, r1
 8001262:	00d2      	lsls	r2, r2, #3
 8001264:	4093      	lsls	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800126c:	4936      	ldr	r1, [pc, #216]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3318      	adds	r3, #24
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800127a:	4a33      	ldr	r2, [pc, #204]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	58d3      	ldr	r3, [r2, r3]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	43da      	mvns	r2, r3
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	025b      	lsls	r3, r3, #9
 8001294:	4013      	ands	r3, r2
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012a0:	4929      	ldr	r1, [pc, #164]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 80012a2:	2280      	movs	r2, #128	; 0x80
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80012a8:	4a27      	ldr	r2, [pc, #156]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 80012aa:	2384      	movs	r3, #132	; 0x84
 80012ac:	58d3      	ldr	r3, [r2, r3]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43da      	mvns	r2, r3
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	029b      	lsls	r3, r3, #10
 80012c2:	4013      	ands	r3, r2
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012ce:	491e      	ldr	r1, [pc, #120]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 80012d0:	2284      	movs	r2, #132	; 0x84
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43da      	mvns	r2, r3
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	035b      	lsls	r3, r3, #13
 80012ee:	4013      	ands	r3, r2
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	43da      	mvns	r2, r3
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	039b      	lsls	r3, r3, #14
 8001318:	4013      	ands	r3, r2
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	40da      	lsrs	r2, r3
 8001338:	1e13      	subs	r3, r2, #0
 800133a:	d000      	beq.n	800133e <HAL_GPIO_Init+0x2ae>
 800133c:	e6b0      	b.n	80010a0 <HAL_GPIO_Init+0x10>
  }
}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	46c0      	nop			; (mov r8, r8)
 8001342:	46bd      	mov	sp, r7
 8001344:	b006      	add	sp, #24
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40021800 	.word	0x40021800
 800134c:	50000400 	.word	0x50000400
 8001350:	50000800 	.word	0x50000800
 8001354:	50000c00 	.word	0x50000c00

08001358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	0008      	movs	r0, r1
 8001362:	0011      	movs	r1, r2
 8001364:	1cbb      	adds	r3, r7, #2
 8001366:	1c02      	adds	r2, r0, #0
 8001368:	801a      	strh	r2, [r3, #0]
 800136a:	1c7b      	adds	r3, r7, #1
 800136c:	1c0a      	adds	r2, r1, #0
 800136e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001370:	1c7b      	adds	r3, r7, #1
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d004      	beq.n	8001382 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001378:	1cbb      	adds	r3, r7, #2
 800137a:	881a      	ldrh	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001380:	e003      	b.n	800138a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001382:	1cbb      	adds	r3, r7, #2
 8001384:	881a      	ldrh	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	629a      	str	r2, [r3, #40]	; 0x28
}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	b002      	add	sp, #8
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800139c:	4b19      	ldr	r3, [pc, #100]	; (8001404 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a19      	ldr	r2, [pc, #100]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80013a2:	4013      	ands	r3, r2
 80013a4:	0019      	movs	r1, r3
 80013a6:	4b17      	ldr	r3, [pc, #92]	; (8001404 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d11f      	bne.n	80013f8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	0013      	movs	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	189b      	adds	r3, r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4912      	ldr	r1, [pc, #72]	; (8001410 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80013c6:	0018      	movs	r0, r3
 80013c8:	f7fe fea4 	bl	8000114 <__udivsi3>
 80013cc:	0003      	movs	r3, r0
 80013ce:	3301      	adds	r3, #1
 80013d0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013d2:	e008      	b.n	80013e6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	3b01      	subs	r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	e001      	b.n	80013e6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e009      	b.n	80013fa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013e8:	695a      	ldr	r2, [r3, #20]
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	401a      	ands	r2, r3
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d0ed      	beq.n	80013d4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	0018      	movs	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b004      	add	sp, #16
 8001400:	bd80      	pop	{r7, pc}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	40007000 	.word	0x40007000
 8001408:	fffff9ff 	.word	0xfffff9ff
 800140c:	20000010 	.word	0x20000010
 8001410:	000f4240 	.word	0x000f4240

08001414 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <LL_RCC_GetAPB1Prescaler+0x14>)
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	23e0      	movs	r3, #224	; 0xe0
 800141e:	01db      	lsls	r3, r3, #7
 8001420:	4013      	ands	r3, r2
}
 8001422:	0018      	movs	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40021000 	.word	0x40021000

0800142c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e304      	b.n	8001a48 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2201      	movs	r2, #1
 8001444:	4013      	ands	r3, r2
 8001446:	d100      	bne.n	800144a <HAL_RCC_OscConfig+0x1e>
 8001448:	e07c      	b.n	8001544 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800144a:	4bc3      	ldr	r3, [pc, #780]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2238      	movs	r2, #56	; 0x38
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001454:	4bc0      	ldr	r3, [pc, #768]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	2203      	movs	r2, #3
 800145a:	4013      	ands	r3, r2
 800145c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	2b10      	cmp	r3, #16
 8001462:	d102      	bne.n	800146a <HAL_RCC_OscConfig+0x3e>
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	2b03      	cmp	r3, #3
 8001468:	d002      	beq.n	8001470 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	2b08      	cmp	r3, #8
 800146e:	d10b      	bne.n	8001488 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001470:	4bb9      	ldr	r3, [pc, #740]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	029b      	lsls	r3, r3, #10
 8001478:	4013      	ands	r3, r2
 800147a:	d062      	beq.n	8001542 <HAL_RCC_OscConfig+0x116>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d15e      	bne.n	8001542 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e2df      	b.n	8001a48 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	025b      	lsls	r3, r3, #9
 8001490:	429a      	cmp	r2, r3
 8001492:	d107      	bne.n	80014a4 <HAL_RCC_OscConfig+0x78>
 8001494:	4bb0      	ldr	r3, [pc, #704]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4baf      	ldr	r3, [pc, #700]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 800149a:	2180      	movs	r1, #128	; 0x80
 800149c:	0249      	lsls	r1, r1, #9
 800149e:	430a      	orrs	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	e020      	b.n	80014e6 <HAL_RCC_OscConfig+0xba>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	23a0      	movs	r3, #160	; 0xa0
 80014aa:	02db      	lsls	r3, r3, #11
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d10e      	bne.n	80014ce <HAL_RCC_OscConfig+0xa2>
 80014b0:	4ba9      	ldr	r3, [pc, #676]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4ba8      	ldr	r3, [pc, #672]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 80014b6:	2180      	movs	r1, #128	; 0x80
 80014b8:	02c9      	lsls	r1, r1, #11
 80014ba:	430a      	orrs	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	4ba6      	ldr	r3, [pc, #664]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4ba5      	ldr	r3, [pc, #660]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 80014c4:	2180      	movs	r1, #128	; 0x80
 80014c6:	0249      	lsls	r1, r1, #9
 80014c8:	430a      	orrs	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	e00b      	b.n	80014e6 <HAL_RCC_OscConfig+0xba>
 80014ce:	4ba2      	ldr	r3, [pc, #648]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4ba1      	ldr	r3, [pc, #644]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 80014d4:	49a1      	ldr	r1, [pc, #644]	; (800175c <HAL_RCC_OscConfig+0x330>)
 80014d6:	400a      	ands	r2, r1
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	4b9f      	ldr	r3, [pc, #636]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4b9e      	ldr	r3, [pc, #632]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 80014e0:	499f      	ldr	r1, [pc, #636]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 80014e2:	400a      	ands	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d014      	beq.n	8001518 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ee:	f7ff fd11 	bl	8000f14 <HAL_GetTick>
 80014f2:	0003      	movs	r3, r0
 80014f4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f8:	f7ff fd0c 	bl	8000f14 <HAL_GetTick>
 80014fc:	0002      	movs	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	; 0x64
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e29e      	b.n	8001a48 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800150a:	4b93      	ldr	r3, [pc, #588]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	029b      	lsls	r3, r3, #10
 8001512:	4013      	ands	r3, r2
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0xcc>
 8001516:	e015      	b.n	8001544 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001518:	f7ff fcfc 	bl	8000f14 <HAL_GetTick>
 800151c:	0003      	movs	r3, r0
 800151e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001522:	f7ff fcf7 	bl	8000f14 <HAL_GetTick>
 8001526:	0002      	movs	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b64      	cmp	r3, #100	; 0x64
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e289      	b.n	8001a48 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001534:	4b88      	ldr	r3, [pc, #544]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	029b      	lsls	r3, r3, #10
 800153c:	4013      	ands	r3, r2
 800153e:	d1f0      	bne.n	8001522 <HAL_RCC_OscConfig+0xf6>
 8001540:	e000      	b.n	8001544 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001542:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2202      	movs	r2, #2
 800154a:	4013      	ands	r3, r2
 800154c:	d100      	bne.n	8001550 <HAL_RCC_OscConfig+0x124>
 800154e:	e099      	b.n	8001684 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001550:	4b81      	ldr	r3, [pc, #516]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2238      	movs	r2, #56	; 0x38
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800155a:	4b7f      	ldr	r3, [pc, #508]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	2203      	movs	r2, #3
 8001560:	4013      	ands	r3, r2
 8001562:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2b10      	cmp	r3, #16
 8001568:	d102      	bne.n	8001570 <HAL_RCC_OscConfig+0x144>
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d002      	beq.n	8001576 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d135      	bne.n	80015e2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001576:	4b78      	ldr	r3, [pc, #480]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	4013      	ands	r3, r2
 8001580:	d005      	beq.n	800158e <HAL_RCC_OscConfig+0x162>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e25c      	b.n	8001a48 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158e:	4b72      	ldr	r3, [pc, #456]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	4a74      	ldr	r2, [pc, #464]	; (8001764 <HAL_RCC_OscConfig+0x338>)
 8001594:	4013      	ands	r3, r2
 8001596:	0019      	movs	r1, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	021a      	lsls	r2, r3, #8
 800159e:	4b6e      	ldr	r3, [pc, #440]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 80015a0:	430a      	orrs	r2, r1
 80015a2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d112      	bne.n	80015d0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015aa:	4b6b      	ldr	r3, [pc, #428]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a6e      	ldr	r2, [pc, #440]	; (8001768 <HAL_RCC_OscConfig+0x33c>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	0019      	movs	r1, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691a      	ldr	r2, [r3, #16]
 80015b8:	4b67      	ldr	r3, [pc, #412]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 80015ba:	430a      	orrs	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80015be:	4b66      	ldr	r3, [pc, #408]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	0adb      	lsrs	r3, r3, #11
 80015c4:	2207      	movs	r2, #7
 80015c6:	4013      	ands	r3, r2
 80015c8:	4a68      	ldr	r2, [pc, #416]	; (800176c <HAL_RCC_OscConfig+0x340>)
 80015ca:	40da      	lsrs	r2, r3
 80015cc:	4b68      	ldr	r3, [pc, #416]	; (8001770 <HAL_RCC_OscConfig+0x344>)
 80015ce:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015d0:	4b68      	ldr	r3, [pc, #416]	; (8001774 <HAL_RCC_OscConfig+0x348>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	0018      	movs	r0, r3
 80015d6:	f7ff fc41 	bl	8000e5c <HAL_InitTick>
 80015da:	1e03      	subs	r3, r0, #0
 80015dc:	d051      	beq.n	8001682 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e232      	b.n	8001a48 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d030      	beq.n	800164c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015ea:	4b5b      	ldr	r3, [pc, #364]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a5e      	ldr	r2, [pc, #376]	; (8001768 <HAL_RCC_OscConfig+0x33c>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	0019      	movs	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	4b57      	ldr	r3, [pc, #348]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 80015fa:	430a      	orrs	r2, r1
 80015fc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80015fe:	4b56      	ldr	r3, [pc, #344]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4b55      	ldr	r3, [pc, #340]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 8001604:	2180      	movs	r1, #128	; 0x80
 8001606:	0049      	lsls	r1, r1, #1
 8001608:	430a      	orrs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fc82 	bl	8000f14 <HAL_GetTick>
 8001610:	0003      	movs	r3, r0
 8001612:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001616:	f7ff fc7d 	bl	8000f14 <HAL_GetTick>
 800161a:	0002      	movs	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e20f      	b.n	8001a48 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001628:	4b4b      	ldr	r3, [pc, #300]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	4013      	ands	r3, r2
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001634:	4b48      	ldr	r3, [pc, #288]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	4a4a      	ldr	r2, [pc, #296]	; (8001764 <HAL_RCC_OscConfig+0x338>)
 800163a:	4013      	ands	r3, r2
 800163c:	0019      	movs	r1, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	021a      	lsls	r2, r3, #8
 8001644:	4b44      	ldr	r3, [pc, #272]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 8001646:	430a      	orrs	r2, r1
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	e01b      	b.n	8001684 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800164c:	4b42      	ldr	r3, [pc, #264]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b41      	ldr	r3, [pc, #260]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 8001652:	4949      	ldr	r1, [pc, #292]	; (8001778 <HAL_RCC_OscConfig+0x34c>)
 8001654:	400a      	ands	r2, r1
 8001656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fc5c 	bl	8000f14 <HAL_GetTick>
 800165c:	0003      	movs	r3, r0
 800165e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001662:	f7ff fc57 	bl	8000f14 <HAL_GetTick>
 8001666:	0002      	movs	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e1e9      	b.n	8001a48 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001674:	4b38      	ldr	r3, [pc, #224]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	4013      	ands	r3, r2
 800167e:	d1f0      	bne.n	8001662 <HAL_RCC_OscConfig+0x236>
 8001680:	e000      	b.n	8001684 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001682:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2208      	movs	r2, #8
 800168a:	4013      	ands	r3, r2
 800168c:	d047      	beq.n	800171e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800168e:	4b32      	ldr	r3, [pc, #200]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2238      	movs	r2, #56	; 0x38
 8001694:	4013      	ands	r3, r2
 8001696:	2b18      	cmp	r3, #24
 8001698:	d10a      	bne.n	80016b0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800169a:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 800169c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169e:	2202      	movs	r2, #2
 80016a0:	4013      	ands	r3, r2
 80016a2:	d03c      	beq.n	800171e <HAL_RCC_OscConfig+0x2f2>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d138      	bne.n	800171e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e1cb      	b.n	8001a48 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d019      	beq.n	80016ec <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80016b8:	4b27      	ldr	r3, [pc, #156]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 80016ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016bc:	4b26      	ldr	r3, [pc, #152]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 80016be:	2101      	movs	r1, #1
 80016c0:	430a      	orrs	r2, r1
 80016c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c4:	f7ff fc26 	bl	8000f14 <HAL_GetTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ce:	f7ff fc21 	bl	8000f14 <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e1b3      	b.n	8001a48 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 80016e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e4:	2202      	movs	r2, #2
 80016e6:	4013      	ands	r3, r2
 80016e8:	d0f1      	beq.n	80016ce <HAL_RCC_OscConfig+0x2a2>
 80016ea:	e018      	b.n	800171e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 80016ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 80016f2:	2101      	movs	r1, #1
 80016f4:	438a      	bics	r2, r1
 80016f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f8:	f7ff fc0c 	bl	8000f14 <HAL_GetTick>
 80016fc:	0003      	movs	r3, r0
 80016fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001702:	f7ff fc07 	bl	8000f14 <HAL_GetTick>
 8001706:	0002      	movs	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e199      	b.n	8001a48 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001714:	4b10      	ldr	r3, [pc, #64]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 8001716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001718:	2202      	movs	r2, #2
 800171a:	4013      	ands	r3, r2
 800171c:	d1f1      	bne.n	8001702 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2204      	movs	r2, #4
 8001724:	4013      	ands	r3, r2
 8001726:	d100      	bne.n	800172a <HAL_RCC_OscConfig+0x2fe>
 8001728:	e0c6      	b.n	80018b8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800172a:	231f      	movs	r3, #31
 800172c:	18fb      	adds	r3, r7, r3
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2238      	movs	r2, #56	; 0x38
 8001738:	4013      	ands	r3, r2
 800173a:	2b20      	cmp	r3, #32
 800173c:	d11e      	bne.n	800177c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_RCC_OscConfig+0x32c>)
 8001740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001742:	2202      	movs	r2, #2
 8001744:	4013      	ands	r3, r2
 8001746:	d100      	bne.n	800174a <HAL_RCC_OscConfig+0x31e>
 8001748:	e0b6      	b.n	80018b8 <HAL_RCC_OscConfig+0x48c>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d000      	beq.n	8001754 <HAL_RCC_OscConfig+0x328>
 8001752:	e0b1      	b.n	80018b8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e177      	b.n	8001a48 <HAL_RCC_OscConfig+0x61c>
 8001758:	40021000 	.word	0x40021000
 800175c:	fffeffff 	.word	0xfffeffff
 8001760:	fffbffff 	.word	0xfffbffff
 8001764:	ffff80ff 	.word	0xffff80ff
 8001768:	ffffc7ff 	.word	0xffffc7ff
 800176c:	00f42400 	.word	0x00f42400
 8001770:	20000010 	.word	0x20000010
 8001774:	20000014 	.word	0x20000014
 8001778:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800177c:	4bb4      	ldr	r3, [pc, #720]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 800177e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	055b      	lsls	r3, r3, #21
 8001784:	4013      	ands	r3, r2
 8001786:	d101      	bne.n	800178c <HAL_RCC_OscConfig+0x360>
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x362>
 800178c:	2300      	movs	r3, #0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d011      	beq.n	80017b6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	4baf      	ldr	r3, [pc, #700]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 8001794:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001796:	4bae      	ldr	r3, [pc, #696]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	0549      	lsls	r1, r1, #21
 800179c:	430a      	orrs	r2, r1
 800179e:	63da      	str	r2, [r3, #60]	; 0x3c
 80017a0:	4bab      	ldr	r3, [pc, #684]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 80017a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	055b      	lsls	r3, r3, #21
 80017a8:	4013      	ands	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80017ae:	231f      	movs	r3, #31
 80017b0:	18fb      	adds	r3, r7, r3
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017b6:	4ba7      	ldr	r3, [pc, #668]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4013      	ands	r3, r2
 80017c0:	d11a      	bne.n	80017f8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017c2:	4ba4      	ldr	r3, [pc, #656]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4ba3      	ldr	r3, [pc, #652]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 80017c8:	2180      	movs	r1, #128	; 0x80
 80017ca:	0049      	lsls	r1, r1, #1
 80017cc:	430a      	orrs	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80017d0:	f7ff fba0 	bl	8000f14 <HAL_GetTick>
 80017d4:	0003      	movs	r3, r0
 80017d6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017da:	f7ff fb9b 	bl	8000f14 <HAL_GetTick>
 80017de:	0002      	movs	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e12d      	b.n	8001a48 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ec:	4b99      	ldr	r3, [pc, #612]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4013      	ands	r3, r2
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d106      	bne.n	800180e <HAL_RCC_OscConfig+0x3e2>
 8001800:	4b93      	ldr	r3, [pc, #588]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 8001802:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001804:	4b92      	ldr	r3, [pc, #584]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 8001806:	2101      	movs	r1, #1
 8001808:	430a      	orrs	r2, r1
 800180a:	65da      	str	r2, [r3, #92]	; 0x5c
 800180c:	e01c      	b.n	8001848 <HAL_RCC_OscConfig+0x41c>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2b05      	cmp	r3, #5
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0x404>
 8001816:	4b8e      	ldr	r3, [pc, #568]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 8001818:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800181a:	4b8d      	ldr	r3, [pc, #564]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 800181c:	2104      	movs	r1, #4
 800181e:	430a      	orrs	r2, r1
 8001820:	65da      	str	r2, [r3, #92]	; 0x5c
 8001822:	4b8b      	ldr	r3, [pc, #556]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 8001824:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001826:	4b8a      	ldr	r3, [pc, #552]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 8001828:	2101      	movs	r1, #1
 800182a:	430a      	orrs	r2, r1
 800182c:	65da      	str	r2, [r3, #92]	; 0x5c
 800182e:	e00b      	b.n	8001848 <HAL_RCC_OscConfig+0x41c>
 8001830:	4b87      	ldr	r3, [pc, #540]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 8001832:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001834:	4b86      	ldr	r3, [pc, #536]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 8001836:	2101      	movs	r1, #1
 8001838:	438a      	bics	r2, r1
 800183a:	65da      	str	r2, [r3, #92]	; 0x5c
 800183c:	4b84      	ldr	r3, [pc, #528]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 800183e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001840:	4b83      	ldr	r3, [pc, #524]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 8001842:	2104      	movs	r1, #4
 8001844:	438a      	bics	r2, r1
 8001846:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d014      	beq.n	800187a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff fb60 	bl	8000f14 <HAL_GetTick>
 8001854:	0003      	movs	r3, r0
 8001856:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001858:	e009      	b.n	800186e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185a:	f7ff fb5b 	bl	8000f14 <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	4a7c      	ldr	r2, [pc, #496]	; (8001a58 <HAL_RCC_OscConfig+0x62c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e0ec      	b.n	8001a48 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800186e:	4b78      	ldr	r3, [pc, #480]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 8001870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001872:	2202      	movs	r2, #2
 8001874:	4013      	ands	r3, r2
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x42e>
 8001878:	e013      	b.n	80018a2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fb4b 	bl	8000f14 <HAL_GetTick>
 800187e:	0003      	movs	r3, r0
 8001880:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001882:	e009      	b.n	8001898 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001884:	f7ff fb46 	bl	8000f14 <HAL_GetTick>
 8001888:	0002      	movs	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	4a72      	ldr	r2, [pc, #456]	; (8001a58 <HAL_RCC_OscConfig+0x62c>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e0d7      	b.n	8001a48 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001898:	4b6d      	ldr	r3, [pc, #436]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 800189a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189c:	2202      	movs	r2, #2
 800189e:	4013      	ands	r3, r2
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80018a2:	231f      	movs	r3, #31
 80018a4:	18fb      	adds	r3, r7, r3
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d105      	bne.n	80018b8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80018ac:	4b68      	ldr	r3, [pc, #416]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 80018ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018b0:	4b67      	ldr	r3, [pc, #412]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 80018b2:	496a      	ldr	r1, [pc, #424]	; (8001a5c <HAL_RCC_OscConfig+0x630>)
 80018b4:	400a      	ands	r2, r1
 80018b6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d100      	bne.n	80018c2 <HAL_RCC_OscConfig+0x496>
 80018c0:	e0c1      	b.n	8001a46 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018c2:	4b63      	ldr	r3, [pc, #396]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2238      	movs	r2, #56	; 0x38
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b10      	cmp	r3, #16
 80018cc:	d100      	bne.n	80018d0 <HAL_RCC_OscConfig+0x4a4>
 80018ce:	e081      	b.n	80019d4 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d156      	bne.n	8001986 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d8:	4b5d      	ldr	r3, [pc, #372]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b5c      	ldr	r3, [pc, #368]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 80018de:	4960      	ldr	r1, [pc, #384]	; (8001a60 <HAL_RCC_OscConfig+0x634>)
 80018e0:	400a      	ands	r2, r1
 80018e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e4:	f7ff fb16 	bl	8000f14 <HAL_GetTick>
 80018e8:	0003      	movs	r3, r0
 80018ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ee:	f7ff fb11 	bl	8000f14 <HAL_GetTick>
 80018f2:	0002      	movs	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e0a3      	b.n	8001a48 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001900:	4b53      	ldr	r3, [pc, #332]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	049b      	lsls	r3, r3, #18
 8001908:	4013      	ands	r3, r2
 800190a:	d1f0      	bne.n	80018ee <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800190c:	4b50      	ldr	r3, [pc, #320]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4a54      	ldr	r2, [pc, #336]	; (8001a64 <HAL_RCC_OscConfig+0x638>)
 8001912:	4013      	ands	r3, r2
 8001914:	0019      	movs	r1, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1a      	ldr	r2, [r3, #32]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	431a      	orrs	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001938:	431a      	orrs	r2, r3
 800193a:	4b45      	ldr	r3, [pc, #276]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 800193c:	430a      	orrs	r2, r1
 800193e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001940:	4b43      	ldr	r3, [pc, #268]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b42      	ldr	r3, [pc, #264]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 8001946:	2180      	movs	r1, #128	; 0x80
 8001948:	0449      	lsls	r1, r1, #17
 800194a:	430a      	orrs	r2, r1
 800194c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800194e:	4b40      	ldr	r3, [pc, #256]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	4b3f      	ldr	r3, [pc, #252]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 8001954:	2180      	movs	r1, #128	; 0x80
 8001956:	0549      	lsls	r1, r1, #21
 8001958:	430a      	orrs	r2, r1
 800195a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195c:	f7ff fada 	bl	8000f14 <HAL_GetTick>
 8001960:	0003      	movs	r3, r0
 8001962:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001966:	f7ff fad5 	bl	8000f14 <HAL_GetTick>
 800196a:	0002      	movs	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e067      	b.n	8001a48 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001978:	4b35      	ldr	r3, [pc, #212]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	049b      	lsls	r3, r3, #18
 8001980:	4013      	ands	r3, r2
 8001982:	d0f0      	beq.n	8001966 <HAL_RCC_OscConfig+0x53a>
 8001984:	e05f      	b.n	8001a46 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001986:	4b32      	ldr	r3, [pc, #200]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4b31      	ldr	r3, [pc, #196]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 800198c:	4934      	ldr	r1, [pc, #208]	; (8001a60 <HAL_RCC_OscConfig+0x634>)
 800198e:	400a      	ands	r2, r1
 8001990:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001992:	4b2f      	ldr	r3, [pc, #188]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 8001998:	2103      	movs	r1, #3
 800199a:	438a      	bics	r2, r1
 800199c:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800199e:	4b2c      	ldr	r3, [pc, #176]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 80019a4:	4930      	ldr	r1, [pc, #192]	; (8001a68 <HAL_RCC_OscConfig+0x63c>)
 80019a6:	400a      	ands	r2, r1
 80019a8:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019aa:	f7ff fab3 	bl	8000f14 <HAL_GetTick>
 80019ae:	0003      	movs	r3, r0
 80019b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff faae 	bl	8000f14 <HAL_GetTick>
 80019b8:	0002      	movs	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e040      	b.n	8001a48 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c6:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	049b      	lsls	r3, r3, #18
 80019ce:	4013      	ands	r3, r2
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x588>
 80019d2:	e038      	b.n	8001a46 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e033      	b.n	8001a48 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80019e0:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <HAL_RCC_OscConfig+0x624>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	2203      	movs	r2, #3
 80019ea:	401a      	ands	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d126      	bne.n	8001a42 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	2270      	movs	r2, #112	; 0x70
 80019f8:	401a      	ands	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d11f      	bne.n	8001a42 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	23fe      	movs	r3, #254	; 0xfe
 8001a06:	01db      	lsls	r3, r3, #7
 8001a08:	401a      	ands	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d116      	bne.n	8001a42 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	23f8      	movs	r3, #248	; 0xf8
 8001a18:	039b      	lsls	r3, r3, #14
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d10e      	bne.n	8001a42 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	23e0      	movs	r3, #224	; 0xe0
 8001a28:	051b      	lsls	r3, r3, #20
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d106      	bne.n	8001a42 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	0f5b      	lsrs	r3, r3, #29
 8001a38:	075a      	lsls	r2, r3, #29
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d001      	beq.n	8001a46 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	0018      	movs	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b008      	add	sp, #32
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40007000 	.word	0x40007000
 8001a58:	00001388 	.word	0x00001388
 8001a5c:	efffffff 	.word	0xefffffff
 8001a60:	feffffff 	.word	0xfeffffff
 8001a64:	11c1808c 	.word	0x11c1808c
 8001a68:	eefeffff 	.word	0xeefeffff

08001a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0e9      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a80:	4b76      	ldr	r3, [pc, #472]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2207      	movs	r2, #7
 8001a86:	4013      	ands	r3, r2
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d91e      	bls.n	8001acc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b73      	ldr	r3, [pc, #460]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2207      	movs	r2, #7
 8001a94:	4393      	bics	r3, r2
 8001a96:	0019      	movs	r1, r3
 8001a98:	4b70      	ldr	r3, [pc, #448]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001aa0:	f7ff fa38 	bl	8000f14 <HAL_GetTick>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001aa8:	e009      	b.n	8001abe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aaa:	f7ff fa33 	bl	8000f14 <HAL_GetTick>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	4a6a      	ldr	r2, [pc, #424]	; (8001c60 <HAL_RCC_ClockConfig+0x1f4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e0ca      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001abe:	4b67      	ldr	r3, [pc, #412]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2207      	movs	r2, #7
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d1ee      	bne.n	8001aaa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d015      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2204      	movs	r2, #4
 8001adc:	4013      	ands	r3, r2
 8001ade:	d006      	beq.n	8001aee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ae0:	4b60      	ldr	r3, [pc, #384]	; (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	4b5f      	ldr	r3, [pc, #380]	; (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001ae6:	21e0      	movs	r1, #224	; 0xe0
 8001ae8:	01c9      	lsls	r1, r1, #7
 8001aea:	430a      	orrs	r2, r1
 8001aec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aee:	4b5d      	ldr	r3, [pc, #372]	; (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	4a5d      	ldr	r2, [pc, #372]	; (8001c68 <HAL_RCC_ClockConfig+0x1fc>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	0019      	movs	r1, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	4b59      	ldr	r3, [pc, #356]	; (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001afe:	430a      	orrs	r2, r1
 8001b00:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2201      	movs	r2, #1
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d057      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d107      	bne.n	8001b24 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b14:	4b53      	ldr	r3, [pc, #332]	; (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	029b      	lsls	r3, r3, #10
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d12b      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e097      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d107      	bne.n	8001b3c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2c:	4b4d      	ldr	r3, [pc, #308]	; (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	049b      	lsls	r3, r3, #18
 8001b34:	4013      	ands	r3, r2
 8001b36:	d11f      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e08b      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d107      	bne.n	8001b54 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b44:	4b47      	ldr	r3, [pc, #284]	; (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d113      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e07f      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d106      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b5c:	4b41      	ldr	r3, [pc, #260]	; (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b60:	2202      	movs	r2, #2
 8001b62:	4013      	ands	r3, r2
 8001b64:	d108      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e074      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b6a:	4b3e      	ldr	r3, [pc, #248]	; (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6e:	2202      	movs	r2, #2
 8001b70:	4013      	ands	r3, r2
 8001b72:	d101      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e06d      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b78:	4b3a      	ldr	r3, [pc, #232]	; (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	4393      	bics	r3, r2
 8001b80:	0019      	movs	r1, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	4b37      	ldr	r3, [pc, #220]	; (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b8c:	f7ff f9c2 	bl	8000f14 <HAL_GetTick>
 8001b90:	0003      	movs	r3, r0
 8001b92:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b94:	e009      	b.n	8001baa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b96:	f7ff f9bd 	bl	8000f14 <HAL_GetTick>
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	4a2f      	ldr	r2, [pc, #188]	; (8001c60 <HAL_RCC_ClockConfig+0x1f4>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e054      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001baa:	4b2e      	ldr	r3, [pc, #184]	; (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2238      	movs	r2, #56	; 0x38
 8001bb0:	401a      	ands	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d1ec      	bne.n	8001b96 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2207      	movs	r2, #7
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d21e      	bcs.n	8001c08 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2207      	movs	r2, #7
 8001bd0:	4393      	bics	r3, r2
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	4b21      	ldr	r3, [pc, #132]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bdc:	f7ff f99a 	bl	8000f14 <HAL_GetTick>
 8001be0:	0003      	movs	r3, r0
 8001be2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001be4:	e009      	b.n	8001bfa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be6:	f7ff f995 	bl	8000f14 <HAL_GetTick>
 8001bea:	0002      	movs	r2, r0
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	4a1b      	ldr	r2, [pc, #108]	; (8001c60 <HAL_RCC_ClockConfig+0x1f4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e02c      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bfa:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2207      	movs	r2, #7
 8001c00:	4013      	ands	r3, r2
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d1ee      	bne.n	8001be6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d009      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c12:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	4a15      	ldr	r2, [pc, #84]	; (8001c6c <HAL_RCC_ClockConfig+0x200>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	0019      	movs	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001c22:	430a      	orrs	r2, r1
 8001c24:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c26:	f000 f829 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8001c2a:	0001      	movs	r1, r0
 8001c2c:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	0a1b      	lsrs	r3, r3, #8
 8001c32:	220f      	movs	r2, #15
 8001c34:	401a      	ands	r2, r3
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <HAL_RCC_ClockConfig+0x204>)
 8001c38:	0092      	lsls	r2, r2, #2
 8001c3a:	58d3      	ldr	r3, [r2, r3]
 8001c3c:	221f      	movs	r2, #31
 8001c3e:	4013      	ands	r3, r2
 8001c40:	000a      	movs	r2, r1
 8001c42:	40da      	lsrs	r2, r3
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_RCC_ClockConfig+0x208>)
 8001c46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_RCC_ClockConfig+0x20c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f7ff f905 	bl	8000e5c <HAL_InitTick>
 8001c52:	0003      	movs	r3, r0
}
 8001c54:	0018      	movs	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b004      	add	sp, #16
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40022000 	.word	0x40022000
 8001c60:	00001388 	.word	0x00001388
 8001c64:	40021000 	.word	0x40021000
 8001c68:	fffff0ff 	.word	0xfffff0ff
 8001c6c:	ffff8fff 	.word	0xffff8fff
 8001c70:	08003e14 	.word	0x08003e14
 8001c74:	20000010 	.word	0x20000010
 8001c78:	20000014 	.word	0x20000014

08001c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c82:	4b3c      	ldr	r3, [pc, #240]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2238      	movs	r2, #56	; 0x38
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d10f      	bne.n	8001cac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c8c:	4b39      	ldr	r3, [pc, #228]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	0adb      	lsrs	r3, r3, #11
 8001c92:	2207      	movs	r2, #7
 8001c94:	4013      	ands	r3, r2
 8001c96:	2201      	movs	r2, #1
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	0013      	movs	r3, r2
 8001c9c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c9e:	6839      	ldr	r1, [r7, #0]
 8001ca0:	4835      	ldr	r0, [pc, #212]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ca2:	f7fe fa37 	bl	8000114 <__udivsi3>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	e05d      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cac:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2238      	movs	r2, #56	; 0x38
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d102      	bne.n	8001cbe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cb8:	4b30      	ldr	r3, [pc, #192]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x100>)
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	e054      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cbe:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2238      	movs	r2, #56	; 0x38
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b10      	cmp	r3, #16
 8001cc8:	d138      	bne.n	8001d3c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001cca:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2203      	movs	r2, #3
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cd4:	4b27      	ldr	r3, [pc, #156]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	2207      	movs	r2, #7
 8001cdc:	4013      	ands	r3, r2
 8001cde:	3301      	adds	r3, #1
 8001ce0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d10d      	bne.n	8001d04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	4824      	ldr	r0, [pc, #144]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x100>)
 8001cec:	f7fe fa12 	bl	8000114 <__udivsi3>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	0019      	movs	r1, r3
 8001cf4:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	227f      	movs	r2, #127	; 0x7f
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	434b      	muls	r3, r1
 8001d00:	617b      	str	r3, [r7, #20]
        break;
 8001d02:	e00d      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001d04:	68b9      	ldr	r1, [r7, #8]
 8001d06:	481c      	ldr	r0, [pc, #112]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d08:	f7fe fa04 	bl	8000114 <__udivsi3>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	0019      	movs	r1, r3
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	0a1b      	lsrs	r3, r3, #8
 8001d16:	227f      	movs	r2, #127	; 0x7f
 8001d18:	4013      	ands	r3, r2
 8001d1a:	434b      	muls	r3, r1
 8001d1c:	617b      	str	r3, [r7, #20]
        break;
 8001d1e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001d20:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	0f5b      	lsrs	r3, r3, #29
 8001d26:	2207      	movs	r2, #7
 8001d28:	4013      	ands	r3, r2
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	6978      	ldr	r0, [r7, #20]
 8001d32:	f7fe f9ef 	bl	8000114 <__udivsi3>
 8001d36:	0003      	movs	r3, r0
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	e015      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d3c:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2238      	movs	r2, #56	; 0x38
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b20      	cmp	r3, #32
 8001d46:	d103      	bne.n	8001d50 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	021b      	lsls	r3, r3, #8
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2238      	movs	r2, #56	; 0x38
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b18      	cmp	r3, #24
 8001d5a:	d103      	bne.n	8001d64 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001d5c:	23fa      	movs	r3, #250	; 0xfa
 8001d5e:	01db      	lsls	r3, r3, #7
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	e001      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d68:	693b      	ldr	r3, [r7, #16]
}
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	b006      	add	sp, #24
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	40021000 	.word	0x40021000
 8001d78:	00f42400 	.word	0x00f42400
 8001d7c:	007a1200 	.word	0x007a1200

08001d80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d84:	4b02      	ldr	r3, [pc, #8]	; (8001d90 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	0018      	movs	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	20000010 	.word	0x20000010

08001d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d94:	b5b0      	push	{r4, r5, r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001d98:	f7ff fff2 	bl	8001d80 <HAL_RCC_GetHCLKFreq>
 8001d9c:	0004      	movs	r4, r0
 8001d9e:	f7ff fb39 	bl	8001414 <LL_RCC_GetAPB1Prescaler>
 8001da2:	0003      	movs	r3, r0
 8001da4:	0b1a      	lsrs	r2, r3, #12
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001da8:	0092      	lsls	r2, r2, #2
 8001daa:	58d3      	ldr	r3, [r2, r3]
 8001dac:	221f      	movs	r2, #31
 8001dae:	4013      	ands	r3, r2
 8001db0:	40dc      	lsrs	r4, r3
 8001db2:	0023      	movs	r3, r4
}
 8001db4:	0018      	movs	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	08003e54 	.word	0x08003e54

08001dc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001dc8:	2313      	movs	r3, #19
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dd0:	2312      	movs	r3, #18
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	029b      	lsls	r3, r3, #10
 8001de0:	4013      	ands	r3, r2
 8001de2:	d100      	bne.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001de4:	e0a3      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de6:	2011      	movs	r0, #17
 8001de8:	183b      	adds	r3, r7, r0
 8001dea:	2200      	movs	r2, #0
 8001dec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dee:	4ba5      	ldr	r3, [pc, #660]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001df0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	055b      	lsls	r3, r3, #21
 8001df6:	4013      	ands	r3, r2
 8001df8:	d110      	bne.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	4ba2      	ldr	r3, [pc, #648]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001dfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dfe:	4ba1      	ldr	r3, [pc, #644]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e00:	2180      	movs	r1, #128	; 0x80
 8001e02:	0549      	lsls	r1, r1, #21
 8001e04:	430a      	orrs	r2, r1
 8001e06:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e08:	4b9e      	ldr	r3, [pc, #632]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	055b      	lsls	r3, r3, #21
 8001e10:	4013      	ands	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e16:	183b      	adds	r3, r7, r0
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e1c:	4b9a      	ldr	r3, [pc, #616]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b99      	ldr	r3, [pc, #612]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001e22:	2180      	movs	r1, #128	; 0x80
 8001e24:	0049      	lsls	r1, r1, #1
 8001e26:	430a      	orrs	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e2a:	f7ff f873 	bl	8000f14 <HAL_GetTick>
 8001e2e:	0003      	movs	r3, r0
 8001e30:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e32:	e00b      	b.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e34:	f7ff f86e 	bl	8000f14 <HAL_GetTick>
 8001e38:	0002      	movs	r2, r0
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d904      	bls.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001e42:	2313      	movs	r3, #19
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	2203      	movs	r2, #3
 8001e48:	701a      	strb	r2, [r3, #0]
        break;
 8001e4a:	e005      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e4c:	4b8e      	ldr	r3, [pc, #568]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4013      	ands	r3, r2
 8001e56:	d0ed      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001e58:	2313      	movs	r3, #19
 8001e5a:	18fb      	adds	r3, r7, r3
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d154      	bne.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e62:	4b88      	ldr	r3, [pc, #544]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e66:	23c0      	movs	r3, #192	; 0xc0
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d019      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d014      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e7e:	4b81      	ldr	r3, [pc, #516]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e82:	4a82      	ldr	r2, [pc, #520]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e88:	4b7e      	ldr	r3, [pc, #504]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e8c:	4b7d      	ldr	r3, [pc, #500]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e8e:	2180      	movs	r1, #128	; 0x80
 8001e90:	0249      	lsls	r1, r1, #9
 8001e92:	430a      	orrs	r2, r1
 8001e94:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e96:	4b7b      	ldr	r3, [pc, #492]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e9a:	4b7a      	ldr	r3, [pc, #488]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e9c:	497c      	ldr	r1, [pc, #496]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001e9e:	400a      	ands	r2, r1
 8001ea0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ea2:	4b78      	ldr	r3, [pc, #480]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	4013      	ands	r3, r2
 8001eae:	d016      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7ff f830 	bl	8000f14 <HAL_GetTick>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eb8:	e00c      	b.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f7ff f82b 	bl	8000f14 <HAL_GetTick>
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	4a73      	ldr	r2, [pc, #460]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d904      	bls.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001eca:	2313      	movs	r3, #19
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	2203      	movs	r2, #3
 8001ed0:	701a      	strb	r2, [r3, #0]
            break;
 8001ed2:	e004      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ed4:	4b6b      	ldr	r3, [pc, #428]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed8:	2202      	movs	r2, #2
 8001eda:	4013      	ands	r3, r2
 8001edc:	d0ed      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001ede:	2313      	movs	r3, #19
 8001ee0:	18fb      	adds	r3, r7, r3
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10a      	bne.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ee8:	4b66      	ldr	r3, [pc, #408]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eec:	4a67      	ldr	r2, [pc, #412]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ef6:	4b63      	ldr	r3, [pc, #396]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	65da      	str	r2, [r3, #92]	; 0x5c
 8001efc:	e00c      	b.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001efe:	2312      	movs	r3, #18
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	2213      	movs	r2, #19
 8001f04:	18ba      	adds	r2, r7, r2
 8001f06:	7812      	ldrb	r2, [r2, #0]
 8001f08:	701a      	strb	r2, [r3, #0]
 8001f0a:	e005      	b.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f0c:	2312      	movs	r3, #18
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	2213      	movs	r2, #19
 8001f12:	18ba      	adds	r2, r7, r2
 8001f14:	7812      	ldrb	r2, [r2, #0]
 8001f16:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f18:	2311      	movs	r3, #17
 8001f1a:	18fb      	adds	r3, r7, r3
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d105      	bne.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f22:	4b58      	ldr	r3, [pc, #352]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f26:	4b57      	ldr	r3, [pc, #348]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f28:	495b      	ldr	r1, [pc, #364]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001f2a:	400a      	ands	r2, r1
 8001f2c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2201      	movs	r2, #1
 8001f34:	4013      	ands	r3, r2
 8001f36:	d009      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f38:	4b52      	ldr	r3, [pc, #328]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	4393      	bics	r3, r2
 8001f40:	0019      	movs	r1, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	4b4f      	ldr	r3, [pc, #316]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2210      	movs	r2, #16
 8001f52:	4013      	ands	r3, r2
 8001f54:	d009      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f56:	4b4b      	ldr	r3, [pc, #300]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5a:	4a50      	ldr	r2, [pc, #320]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	0019      	movs	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	4b47      	ldr	r3, [pc, #284]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f66:	430a      	orrs	r2, r1
 8001f68:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4013      	ands	r3, r2
 8001f74:	d009      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f76:	4b43      	ldr	r3, [pc, #268]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7a:	4a49      	ldr	r2, [pc, #292]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	0019      	movs	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	695a      	ldr	r2, [r3, #20]
 8001f84:	4b3f      	ldr	r3, [pc, #252]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f86:	430a      	orrs	r2, r1
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4013      	ands	r3, r2
 8001f94:	d009      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f96:	4b3b      	ldr	r3, [pc, #236]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9a:	4a42      	ldr	r2, [pc, #264]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	699a      	ldr	r2, [r3, #24]
 8001fa4:	4b37      	ldr	r3, [pc, #220]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d009      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fb4:	4b33      	ldr	r3, [pc, #204]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb8:	4a3b      	ldr	r2, [pc, #236]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	4b30      	ldr	r3, [pc, #192]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	01db      	lsls	r3, r3, #7
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d015      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fd4:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	0899      	lsrs	r1, r3, #2
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69da      	ldr	r2, [r3, #28]
 8001fe0:	4b28      	ldr	r3, [pc, #160]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69da      	ldr	r2, [r3, #28]
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	05db      	lsls	r3, r3, #23
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d106      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ff2:	4b24      	ldr	r3, [pc, #144]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	4b23      	ldr	r3, [pc, #140]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ff8:	2180      	movs	r1, #128	; 0x80
 8001ffa:	0249      	lsls	r1, r1, #9
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	039b      	lsls	r3, r3, #14
 8002008:	4013      	ands	r3, r2
 800200a:	d016      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800200c:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	4a26      	ldr	r2, [pc, #152]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002012:	4013      	ands	r3, r2
 8002014:	0019      	movs	r1, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a1a      	ldr	r2, [r3, #32]
 800201a:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800201c:	430a      	orrs	r2, r1
 800201e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a1a      	ldr	r2, [r3, #32]
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	03db      	lsls	r3, r3, #15
 8002028:	429a      	cmp	r2, r3
 800202a:	d106      	bne.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800202c:	4b15      	ldr	r3, [pc, #84]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	4b14      	ldr	r3, [pc, #80]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002032:	2180      	movs	r1, #128	; 0x80
 8002034:	0449      	lsls	r1, r1, #17
 8002036:	430a      	orrs	r2, r1
 8002038:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	4013      	ands	r3, r2
 8002044:	d016      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002046:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204a:	4a19      	ldr	r2, [pc, #100]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800204c:	4013      	ands	r3, r2
 800204e:	0019      	movs	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002056:	430a      	orrs	r2, r1
 8002058:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	01db      	lsls	r3, r3, #7
 8002062:	429a      	cmp	r2, r3
 8002064:	d106      	bne.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002066:	4b07      	ldr	r3, [pc, #28]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800206c:	2180      	movs	r1, #128	; 0x80
 800206e:	0249      	lsls	r1, r1, #9
 8002070:	430a      	orrs	r2, r1
 8002072:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002074:	2312      	movs	r3, #18
 8002076:	18fb      	adds	r3, r7, r3
 8002078:	781b      	ldrb	r3, [r3, #0]
}
 800207a:	0018      	movs	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	b006      	add	sp, #24
 8002080:	bd80      	pop	{r7, pc}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	40021000 	.word	0x40021000
 8002088:	40007000 	.word	0x40007000
 800208c:	fffffcff 	.word	0xfffffcff
 8002090:	fffeffff 	.word	0xfffeffff
 8002094:	00001388 	.word	0x00001388
 8002098:	efffffff 	.word	0xefffffff
 800209c:	fffff3ff 	.word	0xfffff3ff
 80020a0:	fff3ffff 	.word	0xfff3ffff
 80020a4:	ffcfffff 	.word	0xffcfffff
 80020a8:	ffffcfff 	.word	0xffffcfff
 80020ac:	ffbfffff 	.word	0xffbfffff
 80020b0:	ffff3fff 	.word	0xffff3fff

080020b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e0a8      	b.n	8002218 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	2382      	movs	r3, #130	; 0x82
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d009      	beq.n	80020ee <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	61da      	str	r2, [r3, #28]
 80020e0:	e005      	b.n	80020ee <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	225d      	movs	r2, #93	; 0x5d
 80020f8:	5c9b      	ldrb	r3, [r3, r2]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d107      	bne.n	8002110 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	225c      	movs	r2, #92	; 0x5c
 8002104:	2100      	movs	r1, #0
 8002106:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	0018      	movs	r0, r3
 800210c:	f7fe fd40 	bl	8000b90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	225d      	movs	r2, #93	; 0x5d
 8002114:	2102      	movs	r1, #2
 8002116:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2140      	movs	r1, #64	; 0x40
 8002124:	438a      	bics	r2, r1
 8002126:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	23e0      	movs	r3, #224	; 0xe0
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	429a      	cmp	r2, r3
 8002132:	d902      	bls.n	800213a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	e002      	b.n	8002140 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	015b      	lsls	r3, r3, #5
 800213e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	23f0      	movs	r3, #240	; 0xf0
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	429a      	cmp	r2, r3
 800214a:	d008      	beq.n	800215e <HAL_SPI_Init+0xaa>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	23e0      	movs	r3, #224	; 0xe0
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	429a      	cmp	r2, r3
 8002156:	d002      	beq.n	800215e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	2382      	movs	r3, #130	; 0x82
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	401a      	ands	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6899      	ldr	r1, [r3, #8]
 800216c:	2384      	movs	r3, #132	; 0x84
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	400b      	ands	r3, r1
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	2102      	movs	r1, #2
 800217a:	400b      	ands	r3, r1
 800217c:	431a      	orrs	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	2101      	movs	r1, #1
 8002184:	400b      	ands	r3, r1
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6999      	ldr	r1, [r3, #24]
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	400b      	ands	r3, r1
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69db      	ldr	r3, [r3, #28]
 8002198:	2138      	movs	r1, #56	; 0x38
 800219a:	400b      	ands	r3, r1
 800219c:	431a      	orrs	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	2180      	movs	r1, #128	; 0x80
 80021a4:	400b      	ands	r3, r1
 80021a6:	431a      	orrs	r2, r3
 80021a8:	0011      	movs	r1, r2
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	019b      	lsls	r3, r3, #6
 80021b2:	401a      	ands	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	0c1b      	lsrs	r3, r3, #16
 80021c2:	2204      	movs	r2, #4
 80021c4:	401a      	ands	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	2110      	movs	r1, #16
 80021cc:	400b      	ands	r3, r1
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d4:	2108      	movs	r1, #8
 80021d6:	400b      	ands	r3, r1
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68d9      	ldr	r1, [r3, #12]
 80021de:	23f0      	movs	r3, #240	; 0xf0
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	400b      	ands	r3, r1
 80021e4:	431a      	orrs	r2, r3
 80021e6:	0011      	movs	r1, r2
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	015b      	lsls	r3, r3, #5
 80021ee:	401a      	ands	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	69da      	ldr	r2, [r3, #28]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4907      	ldr	r1, [pc, #28]	; (8002220 <HAL_SPI_Init+0x16c>)
 8002204:	400a      	ands	r2, r1
 8002206:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	225d      	movs	r2, #93	; 0x5d
 8002212:	2101      	movs	r1, #1
 8002214:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	0018      	movs	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	b004      	add	sp, #16
 800221e:	bd80      	pop	{r7, pc}
 8002220:	fffff7ff 	.word	0xfffff7ff

08002224 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	603b      	str	r3, [r7, #0]
 8002230:	1dbb      	adds	r3, r7, #6
 8002232:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002234:	231f      	movs	r3, #31
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	225c      	movs	r2, #92	; 0x5c
 8002240:	5c9b      	ldrb	r3, [r3, r2]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_SPI_Transmit+0x26>
 8002246:	2302      	movs	r3, #2
 8002248:	e140      	b.n	80024cc <HAL_SPI_Transmit+0x2a8>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	225c      	movs	r2, #92	; 0x5c
 800224e:	2101      	movs	r1, #1
 8002250:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002252:	f7fe fe5f 	bl	8000f14 <HAL_GetTick>
 8002256:	0003      	movs	r3, r0
 8002258:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800225a:	2316      	movs	r3, #22
 800225c:	18fb      	adds	r3, r7, r3
 800225e:	1dba      	adds	r2, r7, #6
 8002260:	8812      	ldrh	r2, [r2, #0]
 8002262:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	225d      	movs	r2, #93	; 0x5d
 8002268:	5c9b      	ldrb	r3, [r3, r2]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b01      	cmp	r3, #1
 800226e:	d004      	beq.n	800227a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002270:	231f      	movs	r3, #31
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	2202      	movs	r2, #2
 8002276:	701a      	strb	r2, [r3, #0]
    goto error;
 8002278:	e11d      	b.n	80024b6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_SPI_Transmit+0x64>
 8002280:	1dbb      	adds	r3, r7, #6
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d104      	bne.n	8002292 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002288:	231f      	movs	r3, #31
 800228a:	18fb      	adds	r3, r7, r3
 800228c:	2201      	movs	r2, #1
 800228e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002290:	e111      	b.n	80024b6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	225d      	movs	r2, #93	; 0x5d
 8002296:	2103      	movs	r1, #3
 8002298:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1dba      	adds	r2, r7, #6
 80022aa:	8812      	ldrh	r2, [r2, #0]
 80022ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	1dba      	adds	r2, r7, #6
 80022b2:	8812      	ldrh	r2, [r2, #0]
 80022b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2244      	movs	r2, #68	; 0x44
 80022c0:	2100      	movs	r1, #0
 80022c2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2246      	movs	r2, #70	; 0x46
 80022c8:	2100      	movs	r1, #0
 80022ca:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	021b      	lsls	r3, r3, #8
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d110      	bne.n	8002306 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2140      	movs	r1, #64	; 0x40
 80022f0:	438a      	bics	r2, r1
 80022f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2180      	movs	r1, #128	; 0x80
 8002300:	01c9      	lsls	r1, r1, #7
 8002302:	430a      	orrs	r2, r1
 8002304:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2240      	movs	r2, #64	; 0x40
 800230e:	4013      	ands	r3, r2
 8002310:	2b40      	cmp	r3, #64	; 0x40
 8002312:	d007      	beq.n	8002324 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2140      	movs	r1, #64	; 0x40
 8002320:	430a      	orrs	r2, r1
 8002322:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	23e0      	movs	r3, #224	; 0xe0
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	429a      	cmp	r2, r3
 800232e:	d94e      	bls.n	80023ce <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d004      	beq.n	8002342 <HAL_SPI_Transmit+0x11e>
 8002338:	2316      	movs	r3, #22
 800233a:	18fb      	adds	r3, r7, r3
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d13f      	bne.n	80023c2 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002346:	881a      	ldrh	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002352:	1c9a      	adds	r2, r3, #2
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800235c:	b29b      	uxth	r3, r3
 800235e:	3b01      	subs	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002366:	e02c      	b.n	80023c2 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2202      	movs	r2, #2
 8002370:	4013      	ands	r3, r2
 8002372:	2b02      	cmp	r3, #2
 8002374:	d112      	bne.n	800239c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237a:	881a      	ldrh	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002386:	1c9a      	adds	r2, r3, #2
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002390:	b29b      	uxth	r3, r3
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	87da      	strh	r2, [r3, #62]	; 0x3e
 800239a:	e012      	b.n	80023c2 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800239c:	f7fe fdba 	bl	8000f14 <HAL_GetTick>
 80023a0:	0002      	movs	r2, r0
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d802      	bhi.n	80023b2 <HAL_SPI_Transmit+0x18e>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	3301      	adds	r3, #1
 80023b0:	d102      	bne.n	80023b8 <HAL_SPI_Transmit+0x194>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d104      	bne.n	80023c2 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80023b8:	231f      	movs	r3, #31
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	2203      	movs	r2, #3
 80023be:	701a      	strb	r2, [r3, #0]
          goto error;
 80023c0:	e079      	b.n	80024b6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1cd      	bne.n	8002368 <HAL_SPI_Transmit+0x144>
 80023cc:	e04f      	b.n	800246e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d004      	beq.n	80023e0 <HAL_SPI_Transmit+0x1bc>
 80023d6:	2316      	movs	r3, #22
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d141      	bne.n	8002464 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	330c      	adds	r3, #12
 80023ea:	7812      	ldrb	r2, [r2, #0]
 80023ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002406:	e02d      	b.n	8002464 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2202      	movs	r2, #2
 8002410:	4013      	ands	r3, r2
 8002412:	2b02      	cmp	r3, #2
 8002414:	d113      	bne.n	800243e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	330c      	adds	r3, #12
 8002420:	7812      	ldrb	r2, [r2, #0]
 8002422:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002432:	b29b      	uxth	r3, r3
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800243c:	e012      	b.n	8002464 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800243e:	f7fe fd69 	bl	8000f14 <HAL_GetTick>
 8002442:	0002      	movs	r2, r0
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d802      	bhi.n	8002454 <HAL_SPI_Transmit+0x230>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	3301      	adds	r3, #1
 8002452:	d102      	bne.n	800245a <HAL_SPI_Transmit+0x236>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d104      	bne.n	8002464 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800245a:	231f      	movs	r3, #31
 800245c:	18fb      	adds	r3, r7, r3
 800245e:	2203      	movs	r2, #3
 8002460:	701a      	strb	r2, [r3, #0]
          goto error;
 8002462:	e028      	b.n	80024b6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002468:	b29b      	uxth	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1cc      	bne.n	8002408 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	6839      	ldr	r1, [r7, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	0018      	movs	r0, r3
 8002476:	f000 fcd9 	bl	8002e2c <SPI_EndRxTxTransaction>
 800247a:	1e03      	subs	r3, r0, #0
 800247c:	d002      	beq.n	8002484 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2220      	movs	r2, #32
 8002482:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10a      	bne.n	80024a2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800248c:	2300      	movs	r3, #0
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d004      	beq.n	80024b4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80024aa:	231f      	movs	r3, #31
 80024ac:	18fb      	adds	r3, r7, r3
 80024ae:	2201      	movs	r2, #1
 80024b0:	701a      	strb	r2, [r3, #0]
 80024b2:	e000      	b.n	80024b6 <HAL_SPI_Transmit+0x292>
  }

error:
 80024b4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	225d      	movs	r2, #93	; 0x5d
 80024ba:	2101      	movs	r1, #1
 80024bc:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	225c      	movs	r2, #92	; 0x5c
 80024c2:	2100      	movs	r1, #0
 80024c4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80024c6:	231f      	movs	r3, #31
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	781b      	ldrb	r3, [r3, #0]
}
 80024cc:	0018      	movs	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b008      	add	sp, #32
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024d4:	b590      	push	{r4, r7, lr}
 80024d6:	b089      	sub	sp, #36	; 0x24
 80024d8:	af02      	add	r7, sp, #8
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	1dbb      	adds	r3, r7, #6
 80024e2:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024e4:	2317      	movs	r3, #23
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	2382      	movs	r3, #130	; 0x82
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d113      	bne.n	8002520 <HAL_SPI_Receive+0x4c>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10f      	bne.n	8002520 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	225d      	movs	r2, #93	; 0x5d
 8002504:	2104      	movs	r1, #4
 8002506:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002508:	1dbb      	adds	r3, r7, #6
 800250a:	881c      	ldrh	r4, [r3, #0]
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	68b9      	ldr	r1, [r7, #8]
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	0023      	movs	r3, r4
 8002518:	f000 f928 	bl	800276c <HAL_SPI_TransmitReceive>
 800251c:	0003      	movs	r3, r0
 800251e:	e11c      	b.n	800275a <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	225c      	movs	r2, #92	; 0x5c
 8002524:	5c9b      	ldrb	r3, [r3, r2]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_SPI_Receive+0x5a>
 800252a:	2302      	movs	r3, #2
 800252c:	e115      	b.n	800275a <HAL_SPI_Receive+0x286>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	225c      	movs	r2, #92	; 0x5c
 8002532:	2101      	movs	r1, #1
 8002534:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002536:	f7fe fced 	bl	8000f14 <HAL_GetTick>
 800253a:	0003      	movs	r3, r0
 800253c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	225d      	movs	r2, #93	; 0x5d
 8002542:	5c9b      	ldrb	r3, [r3, r2]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b01      	cmp	r3, #1
 8002548:	d004      	beq.n	8002554 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800254a:	2317      	movs	r3, #23
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	2202      	movs	r2, #2
 8002550:	701a      	strb	r2, [r3, #0]
    goto error;
 8002552:	e0f7      	b.n	8002744 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_SPI_Receive+0x8e>
 800255a:	1dbb      	adds	r3, r7, #6
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d104      	bne.n	800256c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8002562:	2317      	movs	r3, #23
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
    goto error;
 800256a:	e0eb      	b.n	8002744 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	225d      	movs	r2, #93	; 0x5d
 8002570:	2104      	movs	r1, #4
 8002572:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1dba      	adds	r2, r7, #6
 8002584:	2144      	movs	r1, #68	; 0x44
 8002586:	8812      	ldrh	r2, [r2, #0]
 8002588:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1dba      	adds	r2, r7, #6
 800258e:	2146      	movs	r1, #70	; 0x46
 8002590:	8812      	ldrh	r2, [r2, #0]
 8002592:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	23e0      	movs	r3, #224	; 0xe0
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d908      	bls.n	80025d0 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4966      	ldr	r1, [pc, #408]	; (8002764 <HAL_SPI_Receive+0x290>)
 80025ca:	400a      	ands	r2, r1
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	e008      	b.n	80025e2 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2180      	movs	r1, #128	; 0x80
 80025dc:	0149      	lsls	r1, r1, #5
 80025de:	430a      	orrs	r2, r1
 80025e0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	2380      	movs	r3, #128	; 0x80
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d10f      	bne.n	800260e <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2140      	movs	r1, #64	; 0x40
 80025fa:	438a      	bics	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4957      	ldr	r1, [pc, #348]	; (8002768 <HAL_SPI_Receive+0x294>)
 800260a:	400a      	ands	r2, r1
 800260c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2240      	movs	r2, #64	; 0x40
 8002616:	4013      	ands	r3, r2
 8002618:	2b40      	cmp	r3, #64	; 0x40
 800261a:	d007      	beq.n	800262c <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2140      	movs	r1, #64	; 0x40
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	23e0      	movs	r3, #224	; 0xe0
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	429a      	cmp	r2, r3
 8002636:	d900      	bls.n	800263a <HAL_SPI_Receive+0x166>
 8002638:	e069      	b.n	800270e <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800263a:	e031      	b.n	80026a0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2201      	movs	r2, #1
 8002644:	4013      	ands	r3, r2
 8002646:	2b01      	cmp	r3, #1
 8002648:	d117      	bne.n	800267a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	330c      	adds	r3, #12
 8002650:	001a      	movs	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	7812      	ldrb	r2, [r2, #0]
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2246      	movs	r2, #70	; 0x46
 800266a:	5a9b      	ldrh	r3, [r3, r2]
 800266c:	b29b      	uxth	r3, r3
 800266e:	3b01      	subs	r3, #1
 8002670:	b299      	uxth	r1, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2246      	movs	r2, #70	; 0x46
 8002676:	5299      	strh	r1, [r3, r2]
 8002678:	e012      	b.n	80026a0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800267a:	f7fe fc4b 	bl	8000f14 <HAL_GetTick>
 800267e:	0002      	movs	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d802      	bhi.n	8002690 <HAL_SPI_Receive+0x1bc>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	3301      	adds	r3, #1
 800268e:	d102      	bne.n	8002696 <HAL_SPI_Receive+0x1c2>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d104      	bne.n	80026a0 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8002696:	2317      	movs	r3, #23
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	2203      	movs	r2, #3
 800269c:	701a      	strb	r2, [r3, #0]
          goto error;
 800269e:	e051      	b.n	8002744 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2246      	movs	r2, #70	; 0x46
 80026a4:	5a9b      	ldrh	r3, [r3, r2]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1c7      	bne.n	800263c <HAL_SPI_Receive+0x168>
 80026ac:	e035      	b.n	800271a <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2201      	movs	r2, #1
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d115      	bne.n	80026e8 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	b292      	uxth	r2, r2
 80026c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	1c9a      	adds	r2, r3, #2
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2246      	movs	r2, #70	; 0x46
 80026d8:	5a9b      	ldrh	r3, [r3, r2]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b299      	uxth	r1, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2246      	movs	r2, #70	; 0x46
 80026e4:	5299      	strh	r1, [r3, r2]
 80026e6:	e012      	b.n	800270e <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026e8:	f7fe fc14 	bl	8000f14 <HAL_GetTick>
 80026ec:	0002      	movs	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d802      	bhi.n	80026fe <HAL_SPI_Receive+0x22a>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	3301      	adds	r3, #1
 80026fc:	d102      	bne.n	8002704 <HAL_SPI_Receive+0x230>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d104      	bne.n	800270e <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8002704:	2317      	movs	r3, #23
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	2203      	movs	r2, #3
 800270a:	701a      	strb	r2, [r3, #0]
          goto error;
 800270c:	e01a      	b.n	8002744 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2246      	movs	r2, #70	; 0x46
 8002712:	5a9b      	ldrh	r3, [r3, r2]
 8002714:	b29b      	uxth	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1c9      	bne.n	80026ae <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	6839      	ldr	r1, [r7, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	0018      	movs	r0, r3
 8002722:	f000 fb25 	bl	8002d70 <SPI_EndRxTransaction>
 8002726:	1e03      	subs	r3, r0, #0
 8002728:	d002      	beq.n	8002730 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2220      	movs	r2, #32
 800272e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002734:	2b00      	cmp	r3, #0
 8002736:	d004      	beq.n	8002742 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8002738:	2317      	movs	r3, #23
 800273a:	18fb      	adds	r3, r7, r3
 800273c:	2201      	movs	r2, #1
 800273e:	701a      	strb	r2, [r3, #0]
 8002740:	e000      	b.n	8002744 <HAL_SPI_Receive+0x270>
  }

error :
 8002742:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	225d      	movs	r2, #93	; 0x5d
 8002748:	2101      	movs	r1, #1
 800274a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	225c      	movs	r2, #92	; 0x5c
 8002750:	2100      	movs	r1, #0
 8002752:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002754:	2317      	movs	r3, #23
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	781b      	ldrb	r3, [r3, #0]
}
 800275a:	0018      	movs	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	b007      	add	sp, #28
 8002760:	bd90      	pop	{r4, r7, pc}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	ffffefff 	.word	0xffffefff
 8002768:	ffffbfff 	.word	0xffffbfff

0800276c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	001a      	movs	r2, r3
 800277a:	1cbb      	adds	r3, r7, #2
 800277c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800277e:	2301      	movs	r3, #1
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002782:	2323      	movs	r3, #35	; 0x23
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	225c      	movs	r2, #92	; 0x5c
 800278e:	5c9b      	ldrb	r3, [r3, r2]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_SPI_TransmitReceive+0x2c>
 8002794:	2302      	movs	r3, #2
 8002796:	e1b5      	b.n	8002b04 <HAL_SPI_TransmitReceive+0x398>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	225c      	movs	r2, #92	; 0x5c
 800279c:	2101      	movs	r1, #1
 800279e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027a0:	f7fe fbb8 	bl	8000f14 <HAL_GetTick>
 80027a4:	0003      	movs	r3, r0
 80027a6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027a8:	201b      	movs	r0, #27
 80027aa:	183b      	adds	r3, r7, r0
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	215d      	movs	r1, #93	; 0x5d
 80027b0:	5c52      	ldrb	r2, [r2, r1]
 80027b2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80027ba:	2312      	movs	r3, #18
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	1cba      	adds	r2, r7, #2
 80027c0:	8812      	ldrh	r2, [r2, #0]
 80027c2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027c4:	183b      	adds	r3, r7, r0
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d011      	beq.n	80027f0 <HAL_SPI_TransmitReceive+0x84>
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	2382      	movs	r3, #130	; 0x82
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d107      	bne.n	80027e6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d103      	bne.n	80027e6 <HAL_SPI_TransmitReceive+0x7a>
 80027de:	183b      	adds	r3, r7, r0
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d004      	beq.n	80027f0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80027e6:	2323      	movs	r3, #35	; 0x23
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	2202      	movs	r2, #2
 80027ec:	701a      	strb	r2, [r3, #0]
    goto error;
 80027ee:	e17e      	b.n	8002aee <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d006      	beq.n	8002804 <HAL_SPI_TransmitReceive+0x98>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_SPI_TransmitReceive+0x98>
 80027fc:	1cbb      	adds	r3, r7, #2
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d104      	bne.n	800280e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002804:	2323      	movs	r3, #35	; 0x23
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
    goto error;
 800280c:	e16f      	b.n	8002aee <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	225d      	movs	r2, #93	; 0x5d
 8002812:	5c9b      	ldrb	r3, [r3, r2]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b04      	cmp	r3, #4
 8002818:	d003      	beq.n	8002822 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	225d      	movs	r2, #93	; 0x5d
 800281e:	2105      	movs	r1, #5
 8002820:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1cba      	adds	r2, r7, #2
 8002832:	2146      	movs	r1, #70	; 0x46
 8002834:	8812      	ldrh	r2, [r2, #0]
 8002836:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	1cba      	adds	r2, r7, #2
 800283c:	2144      	movs	r1, #68	; 0x44
 800283e:	8812      	ldrh	r2, [r2, #0]
 8002840:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1cba      	adds	r2, r7, #2
 800284c:	8812      	ldrh	r2, [r2, #0]
 800284e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	1cba      	adds	r2, r7, #2
 8002854:	8812      	ldrh	r2, [r2, #0]
 8002856:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	23e0      	movs	r3, #224	; 0xe0
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	429a      	cmp	r2, r3
 800286e:	d908      	bls.n	8002882 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	49a4      	ldr	r1, [pc, #656]	; (8002b0c <HAL_SPI_TransmitReceive+0x3a0>)
 800287c:	400a      	ands	r2, r1
 800287e:	605a      	str	r2, [r3, #4]
 8002880:	e008      	b.n	8002894 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2180      	movs	r1, #128	; 0x80
 800288e:	0149      	lsls	r1, r1, #5
 8002890:	430a      	orrs	r2, r1
 8002892:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2240      	movs	r2, #64	; 0x40
 800289c:	4013      	ands	r3, r2
 800289e:	2b40      	cmp	r3, #64	; 0x40
 80028a0:	d007      	beq.n	80028b2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2140      	movs	r1, #64	; 0x40
 80028ae:	430a      	orrs	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	23e0      	movs	r3, #224	; 0xe0
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d800      	bhi.n	80028c0 <HAL_SPI_TransmitReceive+0x154>
 80028be:	e07f      	b.n	80029c0 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_SPI_TransmitReceive+0x168>
 80028c8:	2312      	movs	r3, #18
 80028ca:	18fb      	adds	r3, r7, r3
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d000      	beq.n	80028d4 <HAL_SPI_TransmitReceive+0x168>
 80028d2:	e069      	b.n	80029a8 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d8:	881a      	ldrh	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	1c9a      	adds	r2, r3, #2
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028f8:	e056      	b.n	80029a8 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2202      	movs	r2, #2
 8002902:	4013      	ands	r3, r2
 8002904:	2b02      	cmp	r3, #2
 8002906:	d11b      	bne.n	8002940 <HAL_SPI_TransmitReceive+0x1d4>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d016      	beq.n	8002940 <HAL_SPI_TransmitReceive+0x1d4>
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	2b01      	cmp	r3, #1
 8002916:	d113      	bne.n	8002940 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291c:	881a      	ldrh	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	1c9a      	adds	r2, r3, #2
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002932:	b29b      	uxth	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2201      	movs	r2, #1
 8002948:	4013      	ands	r3, r2
 800294a:	2b01      	cmp	r3, #1
 800294c:	d11c      	bne.n	8002988 <HAL_SPI_TransmitReceive+0x21c>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2246      	movs	r2, #70	; 0x46
 8002952:	5a9b      	ldrh	r3, [r3, r2]
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d016      	beq.n	8002988 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	b292      	uxth	r2, r2
 8002966:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	1c9a      	adds	r2, r3, #2
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2246      	movs	r2, #70	; 0x46
 8002976:	5a9b      	ldrh	r3, [r3, r2]
 8002978:	b29b      	uxth	r3, r3
 800297a:	3b01      	subs	r3, #1
 800297c:	b299      	uxth	r1, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2246      	movs	r2, #70	; 0x46
 8002982:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002984:	2301      	movs	r3, #1
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002988:	f7fe fac4 	bl	8000f14 <HAL_GetTick>
 800298c:	0002      	movs	r2, r0
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002994:	429a      	cmp	r2, r3
 8002996:	d807      	bhi.n	80029a8 <HAL_SPI_TransmitReceive+0x23c>
 8002998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299a:	3301      	adds	r3, #1
 800299c:	d004      	beq.n	80029a8 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800299e:	2323      	movs	r3, #35	; 0x23
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	2203      	movs	r2, #3
 80029a4:	701a      	strb	r2, [r3, #0]
        goto error;
 80029a6:	e0a2      	b.n	8002aee <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1a3      	bne.n	80028fa <HAL_SPI_TransmitReceive+0x18e>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2246      	movs	r2, #70	; 0x46
 80029b6:	5a9b      	ldrh	r3, [r3, r2]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d19d      	bne.n	80028fa <HAL_SPI_TransmitReceive+0x18e>
 80029be:	e085      	b.n	8002acc <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_SPI_TransmitReceive+0x268>
 80029c8:	2312      	movs	r3, #18
 80029ca:	18fb      	adds	r3, r7, r3
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d000      	beq.n	80029d4 <HAL_SPI_TransmitReceive+0x268>
 80029d2:	e070      	b.n	8002ab6 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	330c      	adds	r3, #12
 80029de:	7812      	ldrb	r2, [r2, #0]
 80029e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029fa:	e05c      	b.n	8002ab6 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2202      	movs	r2, #2
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d11c      	bne.n	8002a44 <HAL_SPI_TransmitReceive+0x2d8>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d017      	beq.n	8002a44 <HAL_SPI_TransmitReceive+0x2d8>
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d114      	bne.n	8002a44 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	330c      	adds	r3, #12
 8002a24:	7812      	ldrb	r2, [r2, #0]
 8002a26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d11e      	bne.n	8002a90 <HAL_SPI_TransmitReceive+0x324>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2246      	movs	r2, #70	; 0x46
 8002a56:	5a9b      	ldrh	r3, [r3, r2]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d018      	beq.n	8002a90 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	330c      	adds	r3, #12
 8002a64:	001a      	movs	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	7812      	ldrb	r2, [r2, #0]
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2246      	movs	r2, #70	; 0x46
 8002a7e:	5a9b      	ldrh	r3, [r3, r2]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b299      	uxth	r1, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2246      	movs	r2, #70	; 0x46
 8002a8a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a90:	f7fe fa40 	bl	8000f14 <HAL_GetTick>
 8002a94:	0002      	movs	r2, r0
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d802      	bhi.n	8002aa6 <HAL_SPI_TransmitReceive+0x33a>
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	d102      	bne.n	8002aac <HAL_SPI_TransmitReceive+0x340>
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d104      	bne.n	8002ab6 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8002aac:	2323      	movs	r3, #35	; 0x23
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	701a      	strb	r2, [r3, #0]
        goto error;
 8002ab4:	e01b      	b.n	8002aee <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d19d      	bne.n	80029fc <HAL_SPI_TransmitReceive+0x290>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2246      	movs	r2, #70	; 0x46
 8002ac4:	5a9b      	ldrh	r3, [r3, r2]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d197      	bne.n	80029fc <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002acc:	69fa      	ldr	r2, [r7, #28]
 8002ace:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f000 f9aa 	bl	8002e2c <SPI_EndRxTxTransaction>
 8002ad8:	1e03      	subs	r3, r0, #0
 8002ada:	d007      	beq.n	8002aec <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8002adc:	2323      	movs	r3, #35	; 0x23
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	661a      	str	r2, [r3, #96]	; 0x60
 8002aea:	e000      	b.n	8002aee <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8002aec:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	225d      	movs	r2, #93	; 0x5d
 8002af2:	2101      	movs	r1, #1
 8002af4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	225c      	movs	r2, #92	; 0x5c
 8002afa:	2100      	movs	r1, #0
 8002afc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002afe:	2323      	movs	r3, #35	; 0x23
 8002b00:	18fb      	adds	r3, r7, r3
 8002b02:	781b      	ldrb	r3, [r3, #0]
}
 8002b04:	0018      	movs	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b00a      	add	sp, #40	; 0x28
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	ffffefff 	.word	0xffffefff

08002b10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	603b      	str	r3, [r7, #0]
 8002b1c:	1dfb      	adds	r3, r7, #7
 8002b1e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b20:	f7fe f9f8 	bl	8000f14 <HAL_GetTick>
 8002b24:	0002      	movs	r2, r0
 8002b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	18d3      	adds	r3, r2, r3
 8002b2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b30:	f7fe f9f0 	bl	8000f14 <HAL_GetTick>
 8002b34:	0003      	movs	r3, r0
 8002b36:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b38:	4b3a      	ldr	r3, [pc, #232]	; (8002c24 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	015b      	lsls	r3, r3, #5
 8002b3e:	0d1b      	lsrs	r3, r3, #20
 8002b40:	69fa      	ldr	r2, [r7, #28]
 8002b42:	4353      	muls	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b46:	e058      	b.n	8002bfa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	d055      	beq.n	8002bfa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b4e:	f7fe f9e1 	bl	8000f14 <HAL_GetTick>
 8002b52:	0002      	movs	r2, r0
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	69fa      	ldr	r2, [r7, #28]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d902      	bls.n	8002b64 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d142      	bne.n	8002bea <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	21e0      	movs	r1, #224	; 0xe0
 8002b70:	438a      	bics	r2, r1
 8002b72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	2382      	movs	r3, #130	; 0x82
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d113      	bne.n	8002ba8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d005      	beq.n	8002b98 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d107      	bne.n	8002ba8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2140      	movs	r1, #64	; 0x40
 8002ba4:	438a      	bics	r2, r1
 8002ba6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	019b      	lsls	r3, r3, #6
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d110      	bne.n	8002bd6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	491a      	ldr	r1, [pc, #104]	; (8002c28 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002bc0:	400a      	ands	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2180      	movs	r1, #128	; 0x80
 8002bd0:	0189      	lsls	r1, r1, #6
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	225d      	movs	r2, #93	; 0x5d
 8002bda:	2101      	movs	r1, #1
 8002bdc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	225c      	movs	r2, #92	; 0x5c
 8002be2:	2100      	movs	r1, #0
 8002be4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e017      	b.n	8002c1a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	4013      	ands	r3, r2
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	425a      	negs	r2, r3
 8002c0a:	4153      	adcs	r3, r2
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	001a      	movs	r2, r3
 8002c10:	1dfb      	adds	r3, r7, #7
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d197      	bne.n	8002b48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	b008      	add	sp, #32
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	20000010 	.word	0x20000010
 8002c28:	ffffdfff 	.word	0xffffdfff

08002c2c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08a      	sub	sp, #40	; 0x28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002c3a:	2317      	movs	r3, #23
 8002c3c:	18fb      	adds	r3, r7, r3
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002c42:	f7fe f967 	bl	8000f14 <HAL_GetTick>
 8002c46:	0002      	movs	r2, r0
 8002c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	18d3      	adds	r3, r2, r3
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002c52:	f7fe f95f 	bl	8000f14 <HAL_GetTick>
 8002c56:	0003      	movs	r3, r0
 8002c58:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	330c      	adds	r3, #12
 8002c60:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002c62:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	0013      	movs	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	189b      	adds	r3, r3, r2
 8002c6c:	00da      	lsls	r2, r3, #3
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	0d1b      	lsrs	r3, r3, #20
 8002c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c74:	4353      	muls	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002c78:	e068      	b.n	8002d4c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	23c0      	movs	r3, #192	; 0xc0
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d10a      	bne.n	8002c9a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d107      	bne.n	8002c9a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	2117      	movs	r1, #23
 8002c92:	187b      	adds	r3, r7, r1
 8002c94:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002c96:	187b      	adds	r3, r7, r1
 8002c98:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	d055      	beq.n	8002d4c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ca0:	f7fe f938 	bl	8000f14 <HAL_GetTick>
 8002ca4:	0002      	movs	r2, r0
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d902      	bls.n	8002cb6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d142      	bne.n	8002d3c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	21e0      	movs	r1, #224	; 0xe0
 8002cc2:	438a      	bics	r2, r1
 8002cc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	2382      	movs	r3, #130	; 0x82
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d113      	bne.n	8002cfa <SPI_WaitFifoStateUntilTimeout+0xce>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	2380      	movs	r3, #128	; 0x80
 8002cd8:	021b      	lsls	r3, r3, #8
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d005      	beq.n	8002cea <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d107      	bne.n	8002cfa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2140      	movs	r1, #64	; 0x40
 8002cf6:	438a      	bics	r2, r1
 8002cf8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	019b      	lsls	r3, r3, #6
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d110      	bne.n	8002d28 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4916      	ldr	r1, [pc, #88]	; (8002d6c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002d12:	400a      	ands	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2180      	movs	r1, #128	; 0x80
 8002d22:	0189      	lsls	r1, r1, #6
 8002d24:	430a      	orrs	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	225d      	movs	r2, #93	; 0x5d
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	225c      	movs	r2, #92	; 0x5c
 8002d34:	2100      	movs	r1, #0
 8002d36:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e010      	b.n	8002d5e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	4013      	ands	r3, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d18e      	bne.n	8002c7a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	0018      	movs	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b00a      	add	sp, #40	; 0x28
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	20000010 	.word	0x20000010
 8002d6c:	ffffdfff 	.word	0xffffdfff

08002d70 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	2382      	movs	r3, #130	; 0x82
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d113      	bne.n	8002db0 <SPI_EndRxTransaction+0x40>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	2380      	movs	r3, #128	; 0x80
 8002d8e:	021b      	lsls	r3, r3, #8
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d005      	beq.n	8002da0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d107      	bne.n	8002db0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2140      	movs	r1, #64	; 0x40
 8002dac:	438a      	bics	r2, r1
 8002dae:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	0013      	movs	r3, r2
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2180      	movs	r1, #128	; 0x80
 8002dbe:	f7ff fea7 	bl	8002b10 <SPI_WaitFlagStateUntilTimeout>
 8002dc2:	1e03      	subs	r3, r0, #0
 8002dc4:	d007      	beq.n	8002dd6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dca:	2220      	movs	r2, #32
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e026      	b.n	8002e24 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	2382      	movs	r3, #130	; 0x82
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d11f      	bne.n	8002e22 <SPI_EndRxTransaction+0xb2>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	2380      	movs	r3, #128	; 0x80
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d005      	beq.n	8002dfa <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d113      	bne.n	8002e22 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	23c0      	movs	r3, #192	; 0xc0
 8002dfe:	00d9      	lsls	r1, r3, #3
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	0013      	movs	r3, r2
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f7ff ff0f 	bl	8002c2c <SPI_WaitFifoStateUntilTimeout>
 8002e0e:	1e03      	subs	r3, r0, #0
 8002e10:	d007      	beq.n	8002e22 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e16:	2220      	movs	r2, #32
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e000      	b.n	8002e24 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	0018      	movs	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b004      	add	sp, #16
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	23c0      	movs	r3, #192	; 0xc0
 8002e3c:	0159      	lsls	r1, r3, #5
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	0013      	movs	r3, r2
 8002e46:	2200      	movs	r2, #0
 8002e48:	f7ff fef0 	bl	8002c2c <SPI_WaitFifoStateUntilTimeout>
 8002e4c:	1e03      	subs	r3, r0, #0
 8002e4e:	d007      	beq.n	8002e60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e54:	2220      	movs	r2, #32
 8002e56:	431a      	orrs	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e027      	b.n	8002eb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	0013      	movs	r3, r2
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2180      	movs	r1, #128	; 0x80
 8002e6e:	f7ff fe4f 	bl	8002b10 <SPI_WaitFlagStateUntilTimeout>
 8002e72:	1e03      	subs	r3, r0, #0
 8002e74:	d007      	beq.n	8002e86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e014      	b.n	8002eb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	23c0      	movs	r3, #192	; 0xc0
 8002e8a:	00d9      	lsls	r1, r3, #3
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	0013      	movs	r3, r2
 8002e94:	2200      	movs	r2, #0
 8002e96:	f7ff fec9 	bl	8002c2c <SPI_WaitFifoStateUntilTimeout>
 8002e9a:	1e03      	subs	r3, r0, #0
 8002e9c:	d007      	beq.n	8002eae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e000      	b.n	8002eb0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b004      	add	sp, #16
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e046      	b.n	8002f58 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2284      	movs	r2, #132	; 0x84
 8002ece:	589b      	ldr	r3, [r3, r2]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d107      	bne.n	8002ee4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2280      	movs	r2, #128	; 0x80
 8002ed8:	2100      	movs	r1, #0
 8002eda:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f7fd fea0 	bl	8000c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2284      	movs	r2, #132	; 0x84
 8002ee8:	2124      	movs	r1, #36	; 0x24
 8002eea:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	438a      	bics	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	0018      	movs	r0, r3
 8002f00:	f000 f9ce 	bl	80032a0 <UART_SetConfig>
 8002f04:	0003      	movs	r3, r0
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e024      	b.n	8002f58 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f000 fc51 	bl	80037c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	490d      	ldr	r1, [pc, #52]	; (8002f60 <HAL_UART_Init+0xa8>)
 8002f2a:	400a      	ands	r2, r1
 8002f2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	212a      	movs	r1, #42	; 0x2a
 8002f3a:	438a      	bics	r2, r1
 8002f3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2101      	movs	r1, #1
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	0018      	movs	r0, r3
 8002f52:	f000 fce9 	bl	8003928 <UART_CheckIdleState>
 8002f56:	0003      	movs	r3, r0
}
 8002f58:	0018      	movs	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b002      	add	sp, #8
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	ffffb7ff 	.word	0xffffb7ff

08002f64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08a      	sub	sp, #40	; 0x28
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	1dbb      	adds	r3, r7, #6
 8002f72:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2284      	movs	r2, #132	; 0x84
 8002f78:	589b      	ldr	r3, [r3, r2]
 8002f7a:	2b20      	cmp	r3, #32
 8002f7c:	d000      	beq.n	8002f80 <HAL_UART_Transmit+0x1c>
 8002f7e:	e097      	b.n	80030b0 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_UART_Transmit+0x2a>
 8002f86:	1dbb      	adds	r3, r7, #6
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e08f      	b.n	80030b2 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	2380      	movs	r3, #128	; 0x80
 8002f98:	015b      	lsls	r3, r3, #5
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d109      	bne.n	8002fb2 <HAL_UART_Transmit+0x4e>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d105      	bne.n	8002fb2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	4013      	ands	r3, r2
 8002fac:	d001      	beq.n	8002fb2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e07f      	b.n	80030b2 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2280      	movs	r2, #128	; 0x80
 8002fb6:	5c9b      	ldrb	r3, [r3, r2]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_UART_Transmit+0x5c>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e078      	b.n	80030b2 <HAL_UART_Transmit+0x14e>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2280      	movs	r2, #128	; 0x80
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	228c      	movs	r2, #140	; 0x8c
 8002fcc:	2100      	movs	r1, #0
 8002fce:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2284      	movs	r2, #132	; 0x84
 8002fd4:	2121      	movs	r1, #33	; 0x21
 8002fd6:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fd8:	f7fd ff9c 	bl	8000f14 <HAL_GetTick>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	1dba      	adds	r2, r7, #6
 8002fe4:	2154      	movs	r1, #84	; 0x54
 8002fe6:	8812      	ldrh	r2, [r2, #0]
 8002fe8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1dba      	adds	r2, r7, #6
 8002fee:	2156      	movs	r1, #86	; 0x56
 8002ff0:	8812      	ldrh	r2, [r2, #0]
 8002ff2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	015b      	lsls	r3, r3, #5
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d108      	bne.n	8003012 <HAL_UART_Transmit+0xae>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d104      	bne.n	8003012 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8003008:	2300      	movs	r3, #0
 800300a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	61bb      	str	r3, [r7, #24]
 8003010:	e003      	b.n	800301a <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003016:	2300      	movs	r3, #0
 8003018:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2280      	movs	r2, #128	; 0x80
 800301e:	2100      	movs	r1, #0
 8003020:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003022:	e02c      	b.n	800307e <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	0013      	movs	r3, r2
 800302e:	2200      	movs	r2, #0
 8003030:	2180      	movs	r1, #128	; 0x80
 8003032:	f000 fcc3 	bl	80039bc <UART_WaitOnFlagUntilTimeout>
 8003036:	1e03      	subs	r3, r0, #0
 8003038:	d001      	beq.n	800303e <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e039      	b.n	80030b2 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10b      	bne.n	800305c <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	001a      	movs	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	05d2      	lsls	r2, r2, #23
 8003050:	0dd2      	lsrs	r2, r2, #23
 8003052:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	3302      	adds	r3, #2
 8003058:	61bb      	str	r3, [r7, #24]
 800305a:	e007      	b.n	800306c <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	781a      	ldrb	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	3301      	adds	r3, #1
 800306a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2256      	movs	r2, #86	; 0x56
 8003070:	5a9b      	ldrh	r3, [r3, r2]
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b299      	uxth	r1, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2256      	movs	r2, #86	; 0x56
 800307c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2256      	movs	r2, #86	; 0x56
 8003082:	5a9b      	ldrh	r3, [r3, r2]
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1cc      	bne.n	8003024 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	0013      	movs	r3, r2
 8003094:	2200      	movs	r2, #0
 8003096:	2140      	movs	r1, #64	; 0x40
 8003098:	f000 fc90 	bl	80039bc <UART_WaitOnFlagUntilTimeout>
 800309c:	1e03      	subs	r3, r0, #0
 800309e:	d001      	beq.n	80030a4 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e006      	b.n	80030b2 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2284      	movs	r2, #132	; 0x84
 80030a8:	2120      	movs	r1, #32
 80030aa:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	e000      	b.n	80030b2 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80030b0:	2302      	movs	r3, #2
  }
}
 80030b2:	0018      	movs	r0, r3
 80030b4:	46bd      	mov	sp, r7
 80030b6:	b008      	add	sp, #32
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	; 0x28
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	1dbb      	adds	r3, r7, #6
 80030ca:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2288      	movs	r2, #136	; 0x88
 80030d0:	589b      	ldr	r3, [r3, r2]
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	d000      	beq.n	80030d8 <HAL_UART_Receive+0x1c>
 80030d6:	e0db      	b.n	8003290 <HAL_UART_Receive+0x1d4>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_UART_Receive+0x2a>
 80030de:	1dbb      	adds	r3, r7, #6
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e0d3      	b.n	8003292 <HAL_UART_Receive+0x1d6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	2380      	movs	r3, #128	; 0x80
 80030f0:	015b      	lsls	r3, r3, #5
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d109      	bne.n	800310a <HAL_UART_Receive+0x4e>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d105      	bne.n	800310a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2201      	movs	r2, #1
 8003102:	4013      	ands	r3, r2
 8003104:	d001      	beq.n	800310a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e0c3      	b.n	8003292 <HAL_UART_Receive+0x1d6>
      }
    }

    __HAL_LOCK(huart);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2280      	movs	r2, #128	; 0x80
 800310e:	5c9b      	ldrb	r3, [r3, r2]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <HAL_UART_Receive+0x5c>
 8003114:	2302      	movs	r3, #2
 8003116:	e0bc      	b.n	8003292 <HAL_UART_Receive+0x1d6>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2280      	movs	r2, #128	; 0x80
 800311c:	2101      	movs	r1, #1
 800311e:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	228c      	movs	r2, #140	; 0x8c
 8003124:	2100      	movs	r1, #0
 8003126:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2288      	movs	r2, #136	; 0x88
 800312c:	2122      	movs	r1, #34	; 0x22
 800312e:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003136:	f7fd feed 	bl	8000f14 <HAL_GetTick>
 800313a:	0003      	movs	r3, r0
 800313c:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1dba      	adds	r2, r7, #6
 8003142:	215c      	movs	r1, #92	; 0x5c
 8003144:	8812      	ldrh	r2, [r2, #0]
 8003146:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1dba      	adds	r2, r7, #6
 800314c:	215e      	movs	r1, #94	; 0x5e
 800314e:	8812      	ldrh	r2, [r2, #0]
 8003150:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	2380      	movs	r3, #128	; 0x80
 8003158:	015b      	lsls	r3, r3, #5
 800315a:	429a      	cmp	r2, r3
 800315c:	d10d      	bne.n	800317a <HAL_UART_Receive+0xbe>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d104      	bne.n	8003170 <HAL_UART_Receive+0xb4>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2260      	movs	r2, #96	; 0x60
 800316a:	494c      	ldr	r1, [pc, #304]	; (800329c <HAL_UART_Receive+0x1e0>)
 800316c:	5299      	strh	r1, [r3, r2]
 800316e:	e02e      	b.n	80031ce <HAL_UART_Receive+0x112>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2260      	movs	r2, #96	; 0x60
 8003174:	21ff      	movs	r1, #255	; 0xff
 8003176:	5299      	strh	r1, [r3, r2]
 8003178:	e029      	b.n	80031ce <HAL_UART_Receive+0x112>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10d      	bne.n	800319e <HAL_UART_Receive+0xe2>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d104      	bne.n	8003194 <HAL_UART_Receive+0xd8>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2260      	movs	r2, #96	; 0x60
 800318e:	21ff      	movs	r1, #255	; 0xff
 8003190:	5299      	strh	r1, [r3, r2]
 8003192:	e01c      	b.n	80031ce <HAL_UART_Receive+0x112>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2260      	movs	r2, #96	; 0x60
 8003198:	217f      	movs	r1, #127	; 0x7f
 800319a:	5299      	strh	r1, [r3, r2]
 800319c:	e017      	b.n	80031ce <HAL_UART_Receive+0x112>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	2380      	movs	r3, #128	; 0x80
 80031a4:	055b      	lsls	r3, r3, #21
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d10d      	bne.n	80031c6 <HAL_UART_Receive+0x10a>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d104      	bne.n	80031bc <HAL_UART_Receive+0x100>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2260      	movs	r2, #96	; 0x60
 80031b6:	217f      	movs	r1, #127	; 0x7f
 80031b8:	5299      	strh	r1, [r3, r2]
 80031ba:	e008      	b.n	80031ce <HAL_UART_Receive+0x112>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2260      	movs	r2, #96	; 0x60
 80031c0:	213f      	movs	r1, #63	; 0x3f
 80031c2:	5299      	strh	r1, [r3, r2]
 80031c4:	e003      	b.n	80031ce <HAL_UART_Receive+0x112>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2260      	movs	r2, #96	; 0x60
 80031ca:	2100      	movs	r1, #0
 80031cc:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80031ce:	2312      	movs	r3, #18
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	2160      	movs	r1, #96	; 0x60
 80031d6:	5a52      	ldrh	r2, [r2, r1]
 80031d8:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	015b      	lsls	r3, r3, #5
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d108      	bne.n	80031f8 <HAL_UART_Receive+0x13c>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d104      	bne.n	80031f8 <HAL_UART_Receive+0x13c>
    {
      pdata8bits  = NULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	e003      	b.n	8003200 <HAL_UART_Receive+0x144>
    }
    else
    {
      pdata8bits  = pData;
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2280      	movs	r2, #128	; 0x80
 8003204:	2100      	movs	r1, #0
 8003206:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003208:	e036      	b.n	8003278 <HAL_UART_Receive+0x1bc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	0013      	movs	r3, r2
 8003214:	2200      	movs	r2, #0
 8003216:	2120      	movs	r1, #32
 8003218:	f000 fbd0 	bl	80039bc <UART_WaitOnFlagUntilTimeout>
 800321c:	1e03      	subs	r3, r0, #0
 800321e:	d001      	beq.n	8003224 <HAL_UART_Receive+0x168>
      {
        return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e036      	b.n	8003292 <HAL_UART_Receive+0x1d6>
      }
      if (pdata8bits == NULL)
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10e      	bne.n	8003248 <HAL_UART_Receive+0x18c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	b29b      	uxth	r3, r3
 8003232:	2212      	movs	r2, #18
 8003234:	18ba      	adds	r2, r7, r2
 8003236:	8812      	ldrh	r2, [r2, #0]
 8003238:	4013      	ands	r3, r2
 800323a:	b29a      	uxth	r2, r3
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	3302      	adds	r3, #2
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	e00e      	b.n	8003266 <HAL_UART_Receive+0x1aa>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2212      	movs	r2, #18
 8003252:	18ba      	adds	r2, r7, r2
 8003254:	8812      	ldrh	r2, [r2, #0]
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	4013      	ands	r3, r2
 800325a:	b2da      	uxtb	r2, r3
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	3301      	adds	r3, #1
 8003264:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	225e      	movs	r2, #94	; 0x5e
 800326a:	5a9b      	ldrh	r3, [r3, r2]
 800326c:	b29b      	uxth	r3, r3
 800326e:	3b01      	subs	r3, #1
 8003270:	b299      	uxth	r1, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	225e      	movs	r2, #94	; 0x5e
 8003276:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	225e      	movs	r2, #94	; 0x5e
 800327c:	5a9b      	ldrh	r3, [r3, r2]
 800327e:	b29b      	uxth	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1c2      	bne.n	800320a <HAL_UART_Receive+0x14e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2288      	movs	r2, #136	; 0x88
 8003288:	2120      	movs	r1, #32
 800328a:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	e000      	b.n	8003292 <HAL_UART_Receive+0x1d6>
  }
  else
  {
    return HAL_BUSY;
 8003290:	2302      	movs	r3, #2
  }
}
 8003292:	0018      	movs	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	b008      	add	sp, #32
 8003298:	bd80      	pop	{r7, pc}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	000001ff 	.word	0x000001ff

080032a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032a0:	b5b0      	push	{r4, r5, r7, lr}
 80032a2:	b090      	sub	sp, #64	; 0x40
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032a8:	231a      	movs	r3, #26
 80032aa:	2220      	movs	r2, #32
 80032ac:	4694      	mov	ip, r2
 80032ae:	44bc      	add	ip, r7
 80032b0:	4463      	add	r3, ip
 80032b2:	2200      	movs	r2, #0
 80032b4:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	431a      	orrs	r2, r3
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	431a      	orrs	r2, r3
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4ac7      	ldr	r2, [pc, #796]	; (80035f4 <UART_SetConfig+0x354>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	0019      	movs	r1, r3
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032e0:	430b      	orrs	r3, r1
 80032e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	4ac3      	ldr	r2, [pc, #780]	; (80035f8 <UART_SetConfig+0x358>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	0018      	movs	r0, r3
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	68d9      	ldr	r1, [r3, #12]
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	0003      	movs	r3, r0
 80032fa:	430b      	orrs	r3, r1
 80032fc:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4abc      	ldr	r2, [pc, #752]	; (80035fc <UART_SetConfig+0x35c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d004      	beq.n	8003318 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003314:	4313      	orrs	r3, r2
 8003316:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	4ab8      	ldr	r2, [pc, #736]	; (8003600 <UART_SetConfig+0x360>)
 8003320:	4013      	ands	r3, r2
 8003322:	0019      	movs	r1, r3
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800332a:	430b      	orrs	r3, r1
 800332c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	220f      	movs	r2, #15
 8003336:	4393      	bics	r3, r2
 8003338:	0018      	movs	r0, r3
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	0003      	movs	r3, r0
 8003344:	430b      	orrs	r3, r1
 8003346:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4aad      	ldr	r2, [pc, #692]	; (8003604 <UART_SetConfig+0x364>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d136      	bne.n	80033c0 <UART_SetConfig+0x120>
 8003352:	4bad      	ldr	r3, [pc, #692]	; (8003608 <UART_SetConfig+0x368>)
 8003354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003356:	2203      	movs	r2, #3
 8003358:	4013      	ands	r3, r2
 800335a:	2b03      	cmp	r3, #3
 800335c:	d020      	beq.n	80033a0 <UART_SetConfig+0x100>
 800335e:	d827      	bhi.n	80033b0 <UART_SetConfig+0x110>
 8003360:	2b02      	cmp	r3, #2
 8003362:	d00d      	beq.n	8003380 <UART_SetConfig+0xe0>
 8003364:	d824      	bhi.n	80033b0 <UART_SetConfig+0x110>
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <UART_SetConfig+0xd0>
 800336a:	2b01      	cmp	r3, #1
 800336c:	d010      	beq.n	8003390 <UART_SetConfig+0xf0>
 800336e:	e01f      	b.n	80033b0 <UART_SetConfig+0x110>
 8003370:	231b      	movs	r3, #27
 8003372:	2220      	movs	r2, #32
 8003374:	4694      	mov	ip, r2
 8003376:	44bc      	add	ip, r7
 8003378:	4463      	add	r3, ip
 800337a:	2200      	movs	r2, #0
 800337c:	701a      	strb	r2, [r3, #0]
 800337e:	e07c      	b.n	800347a <UART_SetConfig+0x1da>
 8003380:	231b      	movs	r3, #27
 8003382:	2220      	movs	r2, #32
 8003384:	4694      	mov	ip, r2
 8003386:	44bc      	add	ip, r7
 8003388:	4463      	add	r3, ip
 800338a:	2202      	movs	r2, #2
 800338c:	701a      	strb	r2, [r3, #0]
 800338e:	e074      	b.n	800347a <UART_SetConfig+0x1da>
 8003390:	231b      	movs	r3, #27
 8003392:	2220      	movs	r2, #32
 8003394:	4694      	mov	ip, r2
 8003396:	44bc      	add	ip, r7
 8003398:	4463      	add	r3, ip
 800339a:	2204      	movs	r2, #4
 800339c:	701a      	strb	r2, [r3, #0]
 800339e:	e06c      	b.n	800347a <UART_SetConfig+0x1da>
 80033a0:	231b      	movs	r3, #27
 80033a2:	2220      	movs	r2, #32
 80033a4:	4694      	mov	ip, r2
 80033a6:	44bc      	add	ip, r7
 80033a8:	4463      	add	r3, ip
 80033aa:	2208      	movs	r2, #8
 80033ac:	701a      	strb	r2, [r3, #0]
 80033ae:	e064      	b.n	800347a <UART_SetConfig+0x1da>
 80033b0:	231b      	movs	r3, #27
 80033b2:	2220      	movs	r2, #32
 80033b4:	4694      	mov	ip, r2
 80033b6:	44bc      	add	ip, r7
 80033b8:	4463      	add	r3, ip
 80033ba:	2210      	movs	r2, #16
 80033bc:	701a      	strb	r2, [r3, #0]
 80033be:	e05c      	b.n	800347a <UART_SetConfig+0x1da>
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a91      	ldr	r2, [pc, #580]	; (800360c <UART_SetConfig+0x36c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d107      	bne.n	80033da <UART_SetConfig+0x13a>
 80033ca:	231b      	movs	r3, #27
 80033cc:	2220      	movs	r2, #32
 80033ce:	4694      	mov	ip, r2
 80033d0:	44bc      	add	ip, r7
 80033d2:	4463      	add	r3, ip
 80033d4:	2200      	movs	r2, #0
 80033d6:	701a      	strb	r2, [r3, #0]
 80033d8:	e04f      	b.n	800347a <UART_SetConfig+0x1da>
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a87      	ldr	r2, [pc, #540]	; (80035fc <UART_SetConfig+0x35c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d143      	bne.n	800346c <UART_SetConfig+0x1cc>
 80033e4:	4b88      	ldr	r3, [pc, #544]	; (8003608 <UART_SetConfig+0x368>)
 80033e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033e8:	23c0      	movs	r3, #192	; 0xc0
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	4013      	ands	r3, r2
 80033ee:	22c0      	movs	r2, #192	; 0xc0
 80033f0:	0112      	lsls	r2, r2, #4
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d02a      	beq.n	800344c <UART_SetConfig+0x1ac>
 80033f6:	22c0      	movs	r2, #192	; 0xc0
 80033f8:	0112      	lsls	r2, r2, #4
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d82e      	bhi.n	800345c <UART_SetConfig+0x1bc>
 80033fe:	2280      	movs	r2, #128	; 0x80
 8003400:	0112      	lsls	r2, r2, #4
 8003402:	4293      	cmp	r3, r2
 8003404:	d012      	beq.n	800342c <UART_SetConfig+0x18c>
 8003406:	2280      	movs	r2, #128	; 0x80
 8003408:	0112      	lsls	r2, r2, #4
 800340a:	4293      	cmp	r3, r2
 800340c:	d826      	bhi.n	800345c <UART_SetConfig+0x1bc>
 800340e:	2b00      	cmp	r3, #0
 8003410:	d004      	beq.n	800341c <UART_SetConfig+0x17c>
 8003412:	2280      	movs	r2, #128	; 0x80
 8003414:	00d2      	lsls	r2, r2, #3
 8003416:	4293      	cmp	r3, r2
 8003418:	d010      	beq.n	800343c <UART_SetConfig+0x19c>
 800341a:	e01f      	b.n	800345c <UART_SetConfig+0x1bc>
 800341c:	231b      	movs	r3, #27
 800341e:	2220      	movs	r2, #32
 8003420:	4694      	mov	ip, r2
 8003422:	44bc      	add	ip, r7
 8003424:	4463      	add	r3, ip
 8003426:	2200      	movs	r2, #0
 8003428:	701a      	strb	r2, [r3, #0]
 800342a:	e026      	b.n	800347a <UART_SetConfig+0x1da>
 800342c:	231b      	movs	r3, #27
 800342e:	2220      	movs	r2, #32
 8003430:	4694      	mov	ip, r2
 8003432:	44bc      	add	ip, r7
 8003434:	4463      	add	r3, ip
 8003436:	2202      	movs	r2, #2
 8003438:	701a      	strb	r2, [r3, #0]
 800343a:	e01e      	b.n	800347a <UART_SetConfig+0x1da>
 800343c:	231b      	movs	r3, #27
 800343e:	2220      	movs	r2, #32
 8003440:	4694      	mov	ip, r2
 8003442:	44bc      	add	ip, r7
 8003444:	4463      	add	r3, ip
 8003446:	2204      	movs	r2, #4
 8003448:	701a      	strb	r2, [r3, #0]
 800344a:	e016      	b.n	800347a <UART_SetConfig+0x1da>
 800344c:	231b      	movs	r3, #27
 800344e:	2220      	movs	r2, #32
 8003450:	4694      	mov	ip, r2
 8003452:	44bc      	add	ip, r7
 8003454:	4463      	add	r3, ip
 8003456:	2208      	movs	r2, #8
 8003458:	701a      	strb	r2, [r3, #0]
 800345a:	e00e      	b.n	800347a <UART_SetConfig+0x1da>
 800345c:	231b      	movs	r3, #27
 800345e:	2220      	movs	r2, #32
 8003460:	4694      	mov	ip, r2
 8003462:	44bc      	add	ip, r7
 8003464:	4463      	add	r3, ip
 8003466:	2210      	movs	r2, #16
 8003468:	701a      	strb	r2, [r3, #0]
 800346a:	e006      	b.n	800347a <UART_SetConfig+0x1da>
 800346c:	231b      	movs	r3, #27
 800346e:	2220      	movs	r2, #32
 8003470:	4694      	mov	ip, r2
 8003472:	44bc      	add	ip, r7
 8003474:	4463      	add	r3, ip
 8003476:	2210      	movs	r2, #16
 8003478:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a5f      	ldr	r2, [pc, #380]	; (80035fc <UART_SetConfig+0x35c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d000      	beq.n	8003486 <UART_SetConfig+0x1e6>
 8003484:	e096      	b.n	80035b4 <UART_SetConfig+0x314>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003486:	231b      	movs	r3, #27
 8003488:	2220      	movs	r2, #32
 800348a:	4694      	mov	ip, r2
 800348c:	44bc      	add	ip, r7
 800348e:	4463      	add	r3, ip
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b08      	cmp	r3, #8
 8003494:	d015      	beq.n	80034c2 <UART_SetConfig+0x222>
 8003496:	dc18      	bgt.n	80034ca <UART_SetConfig+0x22a>
 8003498:	2b04      	cmp	r3, #4
 800349a:	d00d      	beq.n	80034b8 <UART_SetConfig+0x218>
 800349c:	dc15      	bgt.n	80034ca <UART_SetConfig+0x22a>
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <UART_SetConfig+0x208>
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d005      	beq.n	80034b2 <UART_SetConfig+0x212>
 80034a6:	e010      	b.n	80034ca <UART_SetConfig+0x22a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034a8:	f7fe fc74 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 80034ac:	0003      	movs	r3, r0
 80034ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034b0:	e015      	b.n	80034de <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034b2:	4b57      	ldr	r3, [pc, #348]	; (8003610 <UART_SetConfig+0x370>)
 80034b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034b6:	e012      	b.n	80034de <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034b8:	f7fe fbe0 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 80034bc:	0003      	movs	r3, r0
 80034be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034c0:	e00d      	b.n	80034de <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034c2:	2380      	movs	r3, #128	; 0x80
 80034c4:	021b      	lsls	r3, r3, #8
 80034c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034c8:	e009      	b.n	80034de <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80034ce:	231a      	movs	r3, #26
 80034d0:	2220      	movs	r2, #32
 80034d2:	4694      	mov	ip, r2
 80034d4:	44bc      	add	ip, r7
 80034d6:	4463      	add	r3, ip
 80034d8:	2201      	movs	r2, #1
 80034da:	701a      	strb	r2, [r3, #0]
        break;
 80034dc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d100      	bne.n	80034e6 <UART_SetConfig+0x246>
 80034e4:	e14f      	b.n	8003786 <UART_SetConfig+0x4e6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034ea:	4b4a      	ldr	r3, [pc, #296]	; (8003614 <UART_SetConfig+0x374>)
 80034ec:	0052      	lsls	r2, r2, #1
 80034ee:	5ad3      	ldrh	r3, [r2, r3]
 80034f0:	0019      	movs	r1, r3
 80034f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80034f4:	f7fc fe0e 	bl	8000114 <__udivsi3>
 80034f8:	0003      	movs	r3, r0
 80034fa:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	0013      	movs	r3, r2
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	189b      	adds	r3, r3, r2
 8003506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003508:	429a      	cmp	r2, r3
 800350a:	d305      	bcc.n	8003518 <UART_SetConfig+0x278>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003514:	429a      	cmp	r2, r3
 8003516:	d907      	bls.n	8003528 <UART_SetConfig+0x288>
      {
        ret = HAL_ERROR;
 8003518:	231a      	movs	r3, #26
 800351a:	2220      	movs	r2, #32
 800351c:	4694      	mov	ip, r2
 800351e:	44bc      	add	ip, r7
 8003520:	4463      	add	r3, ip
 8003522:	2201      	movs	r2, #1
 8003524:	701a      	strb	r2, [r3, #0]
 8003526:	e12e      	b.n	8003786 <UART_SetConfig+0x4e6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800352a:	61bb      	str	r3, [r7, #24]
 800352c:	2300      	movs	r3, #0
 800352e:	61fb      	str	r3, [r7, #28]
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003534:	4b37      	ldr	r3, [pc, #220]	; (8003614 <UART_SetConfig+0x374>)
 8003536:	0052      	lsls	r2, r2, #1
 8003538:	5ad3      	ldrh	r3, [r2, r3]
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	69b8      	ldr	r0, [r7, #24]
 8003546:	69f9      	ldr	r1, [r7, #28]
 8003548:	f7fc ff5a 	bl	8000400 <__aeabi_uldivmod>
 800354c:	0002      	movs	r2, r0
 800354e:	000b      	movs	r3, r1
 8003550:	0e11      	lsrs	r1, r2, #24
 8003552:	021d      	lsls	r5, r3, #8
 8003554:	430d      	orrs	r5, r1
 8003556:	0214      	lsls	r4, r2, #8
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	085b      	lsrs	r3, r3, #1
 800355e:	60bb      	str	r3, [r7, #8]
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	68b8      	ldr	r0, [r7, #8]
 8003566:	68f9      	ldr	r1, [r7, #12]
 8003568:	1900      	adds	r0, r0, r4
 800356a:	4169      	adcs	r1, r5
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	603b      	str	r3, [r7, #0]
 8003572:	2300      	movs	r3, #0
 8003574:	607b      	str	r3, [r7, #4]
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f7fc ff41 	bl	8000400 <__aeabi_uldivmod>
 800357e:	0002      	movs	r2, r0
 8003580:	000b      	movs	r3, r1
 8003582:	0013      	movs	r3, r2
 8003584:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003588:	23c0      	movs	r3, #192	; 0xc0
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	429a      	cmp	r2, r3
 800358e:	d309      	bcc.n	80035a4 <UART_SetConfig+0x304>
 8003590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003592:	2380      	movs	r3, #128	; 0x80
 8003594:	035b      	lsls	r3, r3, #13
 8003596:	429a      	cmp	r2, r3
 8003598:	d204      	bcs.n	80035a4 <UART_SetConfig+0x304>
        {
          huart->Instance->BRR = usartdiv;
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035a0:	60da      	str	r2, [r3, #12]
 80035a2:	e0f0      	b.n	8003786 <UART_SetConfig+0x4e6>
        }
        else
        {
          ret = HAL_ERROR;
 80035a4:	231a      	movs	r3, #26
 80035a6:	2220      	movs	r2, #32
 80035a8:	4694      	mov	ip, r2
 80035aa:	44bc      	add	ip, r7
 80035ac:	4463      	add	r3, ip
 80035ae:	2201      	movs	r2, #1
 80035b0:	701a      	strb	r2, [r3, #0]
 80035b2:	e0e8      	b.n	8003786 <UART_SetConfig+0x4e6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	2380      	movs	r3, #128	; 0x80
 80035ba:	021b      	lsls	r3, r3, #8
 80035bc:	429a      	cmp	r2, r3
 80035be:	d000      	beq.n	80035c2 <UART_SetConfig+0x322>
 80035c0:	e086      	b.n	80036d0 <UART_SetConfig+0x430>
  {
    switch (clocksource)
 80035c2:	231b      	movs	r3, #27
 80035c4:	2220      	movs	r2, #32
 80035c6:	4694      	mov	ip, r2
 80035c8:	44bc      	add	ip, r7
 80035ca:	4463      	add	r3, ip
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d027      	beq.n	8003622 <UART_SetConfig+0x382>
 80035d2:	dc2a      	bgt.n	800362a <UART_SetConfig+0x38a>
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d01f      	beq.n	8003618 <UART_SetConfig+0x378>
 80035d8:	dc27      	bgt.n	800362a <UART_SetConfig+0x38a>
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <UART_SetConfig+0x344>
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d005      	beq.n	80035ee <UART_SetConfig+0x34e>
 80035e2:	e022      	b.n	800362a <UART_SetConfig+0x38a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035e4:	f7fe fbd6 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 80035e8:	0003      	movs	r3, r0
 80035ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035ec:	e027      	b.n	800363e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035ee:	4b08      	ldr	r3, [pc, #32]	; (8003610 <UART_SetConfig+0x370>)
 80035f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035f2:	e024      	b.n	800363e <UART_SetConfig+0x39e>
 80035f4:	cfff69f3 	.word	0xcfff69f3
 80035f8:	ffffcfff 	.word	0xffffcfff
 80035fc:	40008000 	.word	0x40008000
 8003600:	11fff4ff 	.word	0x11fff4ff
 8003604:	40013800 	.word	0x40013800
 8003608:	40021000 	.word	0x40021000
 800360c:	40004400 	.word	0x40004400
 8003610:	00f42400 	.word	0x00f42400
 8003614:	08003e74 	.word	0x08003e74
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003618:	f7fe fb30 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 800361c:	0003      	movs	r3, r0
 800361e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003620:	e00d      	b.n	800363e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003622:	2380      	movs	r3, #128	; 0x80
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003628:	e009      	b.n	800363e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800362e:	231a      	movs	r3, #26
 8003630:	2220      	movs	r2, #32
 8003632:	4694      	mov	ip, r2
 8003634:	44bc      	add	ip, r7
 8003636:	4463      	add	r3, ip
 8003638:	2201      	movs	r2, #1
 800363a:	701a      	strb	r2, [r3, #0]
        break;
 800363c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800363e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003640:	2b00      	cmp	r3, #0
 8003642:	d100      	bne.n	8003646 <UART_SetConfig+0x3a6>
 8003644:	e09f      	b.n	8003786 <UART_SetConfig+0x4e6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800364a:	4b5b      	ldr	r3, [pc, #364]	; (80037b8 <UART_SetConfig+0x518>)
 800364c:	0052      	lsls	r2, r2, #1
 800364e:	5ad3      	ldrh	r3, [r2, r3]
 8003650:	0019      	movs	r1, r3
 8003652:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003654:	f7fc fd5e 	bl	8000114 <__udivsi3>
 8003658:	0003      	movs	r3, r0
 800365a:	005a      	lsls	r2, r3, #1
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	085b      	lsrs	r3, r3, #1
 8003662:	18d2      	adds	r2, r2, r3
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	0019      	movs	r1, r3
 800366a:	0010      	movs	r0, r2
 800366c:	f7fc fd52 	bl	8000114 <__udivsi3>
 8003670:	0003      	movs	r3, r0
 8003672:	b29b      	uxth	r3, r3
 8003674:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003678:	2b0f      	cmp	r3, #15
 800367a:	d921      	bls.n	80036c0 <UART_SetConfig+0x420>
 800367c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	025b      	lsls	r3, r3, #9
 8003682:	429a      	cmp	r2, r3
 8003684:	d21c      	bcs.n	80036c0 <UART_SetConfig+0x420>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	b29a      	uxth	r2, r3
 800368a:	200e      	movs	r0, #14
 800368c:	2420      	movs	r4, #32
 800368e:	193b      	adds	r3, r7, r4
 8003690:	181b      	adds	r3, r3, r0
 8003692:	210f      	movs	r1, #15
 8003694:	438a      	bics	r2, r1
 8003696:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	085b      	lsrs	r3, r3, #1
 800369c:	b29b      	uxth	r3, r3
 800369e:	2207      	movs	r2, #7
 80036a0:	4013      	ands	r3, r2
 80036a2:	b299      	uxth	r1, r3
 80036a4:	193b      	adds	r3, r7, r4
 80036a6:	181b      	adds	r3, r3, r0
 80036a8:	193a      	adds	r2, r7, r4
 80036aa:	1812      	adds	r2, r2, r0
 80036ac:	8812      	ldrh	r2, [r2, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	193a      	adds	r2, r7, r4
 80036b8:	1812      	adds	r2, r2, r0
 80036ba:	8812      	ldrh	r2, [r2, #0]
 80036bc:	60da      	str	r2, [r3, #12]
 80036be:	e062      	b.n	8003786 <UART_SetConfig+0x4e6>
      }
      else
      {
        ret = HAL_ERROR;
 80036c0:	231a      	movs	r3, #26
 80036c2:	2220      	movs	r2, #32
 80036c4:	4694      	mov	ip, r2
 80036c6:	44bc      	add	ip, r7
 80036c8:	4463      	add	r3, ip
 80036ca:	2201      	movs	r2, #1
 80036cc:	701a      	strb	r2, [r3, #0]
 80036ce:	e05a      	b.n	8003786 <UART_SetConfig+0x4e6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036d0:	231b      	movs	r3, #27
 80036d2:	2220      	movs	r2, #32
 80036d4:	4694      	mov	ip, r2
 80036d6:	44bc      	add	ip, r7
 80036d8:	4463      	add	r3, ip
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d015      	beq.n	800370c <UART_SetConfig+0x46c>
 80036e0:	dc18      	bgt.n	8003714 <UART_SetConfig+0x474>
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d00d      	beq.n	8003702 <UART_SetConfig+0x462>
 80036e6:	dc15      	bgt.n	8003714 <UART_SetConfig+0x474>
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <UART_SetConfig+0x452>
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d005      	beq.n	80036fc <UART_SetConfig+0x45c>
 80036f0:	e010      	b.n	8003714 <UART_SetConfig+0x474>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036f2:	f7fe fb4f 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 80036f6:	0003      	movs	r3, r0
 80036f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036fa:	e015      	b.n	8003728 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036fc:	4b2f      	ldr	r3, [pc, #188]	; (80037bc <UART_SetConfig+0x51c>)
 80036fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003700:	e012      	b.n	8003728 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003702:	f7fe fabb 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8003706:	0003      	movs	r3, r0
 8003708:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800370a:	e00d      	b.n	8003728 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800370c:	2380      	movs	r3, #128	; 0x80
 800370e:	021b      	lsls	r3, r3, #8
 8003710:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003712:	e009      	b.n	8003728 <UART_SetConfig+0x488>
      default:
        pclk = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003718:	231a      	movs	r3, #26
 800371a:	2220      	movs	r2, #32
 800371c:	4694      	mov	ip, r2
 800371e:	44bc      	add	ip, r7
 8003720:	4463      	add	r3, ip
 8003722:	2201      	movs	r2, #1
 8003724:	701a      	strb	r2, [r3, #0]
        break;
 8003726:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372a:	2b00      	cmp	r3, #0
 800372c:	d02b      	beq.n	8003786 <UART_SetConfig+0x4e6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003732:	4b21      	ldr	r3, [pc, #132]	; (80037b8 <UART_SetConfig+0x518>)
 8003734:	0052      	lsls	r2, r2, #1
 8003736:	5ad3      	ldrh	r3, [r2, r3]
 8003738:	0019      	movs	r1, r3
 800373a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800373c:	f7fc fcea 	bl	8000114 <__udivsi3>
 8003740:	0003      	movs	r3, r0
 8003742:	001a      	movs	r2, r3
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	085b      	lsrs	r3, r3, #1
 800374a:	18d2      	adds	r2, r2, r3
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	0019      	movs	r1, r3
 8003752:	0010      	movs	r0, r2
 8003754:	f7fc fcde 	bl	8000114 <__udivsi3>
 8003758:	0003      	movs	r3, r0
 800375a:	b29b      	uxth	r3, r3
 800375c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800375e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003760:	2b0f      	cmp	r3, #15
 8003762:	d909      	bls.n	8003778 <UART_SetConfig+0x4d8>
 8003764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003766:	2380      	movs	r3, #128	; 0x80
 8003768:	025b      	lsls	r3, r3, #9
 800376a:	429a      	cmp	r2, r3
 800376c:	d204      	bcs.n	8003778 <UART_SetConfig+0x4d8>
      {
        huart->Instance->BRR = usartdiv;
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003774:	60da      	str	r2, [r3, #12]
 8003776:	e006      	b.n	8003786 <UART_SetConfig+0x4e6>
      }
      else
      {
        ret = HAL_ERROR;
 8003778:	231a      	movs	r3, #26
 800377a:	2220      	movs	r2, #32
 800377c:	4694      	mov	ip, r2
 800377e:	44bc      	add	ip, r7
 8003780:	4463      	add	r3, ip
 8003782:	2201      	movs	r2, #1
 8003784:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	226a      	movs	r2, #106	; 0x6a
 800378a:	2101      	movs	r1, #1
 800378c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	2268      	movs	r2, #104	; 0x68
 8003792:	2101      	movs	r1, #1
 8003794:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	2200      	movs	r2, #0
 800379a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	2200      	movs	r2, #0
 80037a0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80037a2:	231a      	movs	r3, #26
 80037a4:	2220      	movs	r2, #32
 80037a6:	4694      	mov	ip, r2
 80037a8:	44bc      	add	ip, r7
 80037aa:	4463      	add	r3, ip
 80037ac:	781b      	ldrb	r3, [r3, #0]
}
 80037ae:	0018      	movs	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b010      	add	sp, #64	; 0x40
 80037b4:	bdb0      	pop	{r4, r5, r7, pc}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	08003e74 	.word	0x08003e74
 80037bc:	00f42400 	.word	0x00f42400

080037c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037cc:	2201      	movs	r2, #1
 80037ce:	4013      	ands	r3, r2
 80037d0:	d00b      	beq.n	80037ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	4a4a      	ldr	r2, [pc, #296]	; (8003904 <UART_AdvFeatureConfig+0x144>)
 80037da:	4013      	ands	r3, r2
 80037dc:	0019      	movs	r1, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	2202      	movs	r2, #2
 80037f0:	4013      	ands	r3, r2
 80037f2:	d00b      	beq.n	800380c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4a43      	ldr	r2, [pc, #268]	; (8003908 <UART_AdvFeatureConfig+0x148>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	0019      	movs	r1, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	2204      	movs	r2, #4
 8003812:	4013      	ands	r3, r2
 8003814:	d00b      	beq.n	800382e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	4a3b      	ldr	r2, [pc, #236]	; (800390c <UART_AdvFeatureConfig+0x14c>)
 800381e:	4013      	ands	r3, r2
 8003820:	0019      	movs	r1, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	2208      	movs	r2, #8
 8003834:	4013      	ands	r3, r2
 8003836:	d00b      	beq.n	8003850 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	4a34      	ldr	r2, [pc, #208]	; (8003910 <UART_AdvFeatureConfig+0x150>)
 8003840:	4013      	ands	r3, r2
 8003842:	0019      	movs	r1, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003854:	2210      	movs	r2, #16
 8003856:	4013      	ands	r3, r2
 8003858:	d00b      	beq.n	8003872 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4a2c      	ldr	r2, [pc, #176]	; (8003914 <UART_AdvFeatureConfig+0x154>)
 8003862:	4013      	ands	r3, r2
 8003864:	0019      	movs	r1, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	2220      	movs	r2, #32
 8003878:	4013      	ands	r3, r2
 800387a:	d00b      	beq.n	8003894 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	4a25      	ldr	r2, [pc, #148]	; (8003918 <UART_AdvFeatureConfig+0x158>)
 8003884:	4013      	ands	r3, r2
 8003886:	0019      	movs	r1, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	2240      	movs	r2, #64	; 0x40
 800389a:	4013      	ands	r3, r2
 800389c:	d01d      	beq.n	80038da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	4a1d      	ldr	r2, [pc, #116]	; (800391c <UART_AdvFeatureConfig+0x15c>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	0019      	movs	r1, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038ba:	2380      	movs	r3, #128	; 0x80
 80038bc:	035b      	lsls	r3, r3, #13
 80038be:	429a      	cmp	r2, r3
 80038c0:	d10b      	bne.n	80038da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	4a15      	ldr	r2, [pc, #84]	; (8003920 <UART_AdvFeatureConfig+0x160>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	0019      	movs	r1, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	2280      	movs	r2, #128	; 0x80
 80038e0:	4013      	ands	r3, r2
 80038e2:	d00b      	beq.n	80038fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4a0e      	ldr	r2, [pc, #56]	; (8003924 <UART_AdvFeatureConfig+0x164>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	0019      	movs	r1, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	605a      	str	r2, [r3, #4]
  }
}
 80038fc:	46c0      	nop			; (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	b002      	add	sp, #8
 8003902:	bd80      	pop	{r7, pc}
 8003904:	fffdffff 	.word	0xfffdffff
 8003908:	fffeffff 	.word	0xfffeffff
 800390c:	fffbffff 	.word	0xfffbffff
 8003910:	ffff7fff 	.word	0xffff7fff
 8003914:	ffffefff 	.word	0xffffefff
 8003918:	ffffdfff 	.word	0xffffdfff
 800391c:	ffefffff 	.word	0xffefffff
 8003920:	ff9fffff 	.word	0xff9fffff
 8003924:	fff7ffff 	.word	0xfff7ffff

08003928 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af02      	add	r7, sp, #8
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	228c      	movs	r2, #140	; 0x8c
 8003934:	2100      	movs	r1, #0
 8003936:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003938:	f7fd faec 	bl	8000f14 <HAL_GetTick>
 800393c:	0003      	movs	r3, r0
 800393e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2208      	movs	r2, #8
 8003948:	4013      	ands	r3, r2
 800394a:	2b08      	cmp	r3, #8
 800394c:	d10c      	bne.n	8003968 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2280      	movs	r2, #128	; 0x80
 8003952:	0391      	lsls	r1, r2, #14
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	4a18      	ldr	r2, [pc, #96]	; (80039b8 <UART_CheckIdleState+0x90>)
 8003958:	9200      	str	r2, [sp, #0]
 800395a:	2200      	movs	r2, #0
 800395c:	f000 f82e 	bl	80039bc <UART_WaitOnFlagUntilTimeout>
 8003960:	1e03      	subs	r3, r0, #0
 8003962:	d001      	beq.n	8003968 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e023      	b.n	80039b0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2204      	movs	r2, #4
 8003970:	4013      	ands	r3, r2
 8003972:	2b04      	cmp	r3, #4
 8003974:	d10c      	bne.n	8003990 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2280      	movs	r2, #128	; 0x80
 800397a:	03d1      	lsls	r1, r2, #15
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	4a0e      	ldr	r2, [pc, #56]	; (80039b8 <UART_CheckIdleState+0x90>)
 8003980:	9200      	str	r2, [sp, #0]
 8003982:	2200      	movs	r2, #0
 8003984:	f000 f81a 	bl	80039bc <UART_WaitOnFlagUntilTimeout>
 8003988:	1e03      	subs	r3, r0, #0
 800398a:	d001      	beq.n	8003990 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e00f      	b.n	80039b0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2284      	movs	r2, #132	; 0x84
 8003994:	2120      	movs	r1, #32
 8003996:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2288      	movs	r2, #136	; 0x88
 800399c:	2120      	movs	r1, #32
 800399e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2280      	movs	r2, #128	; 0x80
 80039aa:	2100      	movs	r1, #0
 80039ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	0018      	movs	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	b004      	add	sp, #16
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	01ffffff 	.word	0x01ffffff

080039bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b094      	sub	sp, #80	; 0x50
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	1dfb      	adds	r3, r7, #7
 80039ca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039cc:	e0a7      	b.n	8003b1e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039d0:	3301      	adds	r3, #1
 80039d2:	d100      	bne.n	80039d6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80039d4:	e0a3      	b.n	8003b1e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d6:	f7fd fa9d 	bl	8000f14 <HAL_GetTick>
 80039da:	0002      	movs	r2, r0
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d302      	bcc.n	80039ec <UART_WaitOnFlagUntilTimeout+0x30>
 80039e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d13f      	bne.n	8003a6c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ec:	f3ef 8310 	mrs	r3, PRIMASK
 80039f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80039f4:	647b      	str	r3, [r7, #68]	; 0x44
 80039f6:	2301      	movs	r3, #1
 80039f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fc:	f383 8810 	msr	PRIMASK, r3
}
 8003a00:	46c0      	nop			; (mov r8, r8)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	494e      	ldr	r1, [pc, #312]	; (8003b48 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003a0e:	400a      	ands	r2, r1
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a14:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a18:	f383 8810 	msr	PRIMASK, r3
}
 8003a1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a22:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a26:	643b      	str	r3, [r7, #64]	; 0x40
 8003a28:	2301      	movs	r3, #1
 8003a2a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2e:	f383 8810 	msr	PRIMASK, r3
}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2101      	movs	r1, #1
 8003a40:	438a      	bics	r2, r1
 8003a42:	609a      	str	r2, [r3, #8]
 8003a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a4a:	f383 8810 	msr	PRIMASK, r3
}
 8003a4e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2284      	movs	r2, #132	; 0x84
 8003a54:	2120      	movs	r1, #32
 8003a56:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2288      	movs	r2, #136	; 0x88
 8003a5c:	2120      	movs	r1, #32
 8003a5e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2280      	movs	r2, #128	; 0x80
 8003a64:	2100      	movs	r1, #0
 8003a66:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e069      	b.n	8003b40 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2204      	movs	r2, #4
 8003a74:	4013      	ands	r3, r2
 8003a76:	d052      	beq.n	8003b1e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	69da      	ldr	r2, [r3, #28]
 8003a7e:	2380      	movs	r3, #128	; 0x80
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	401a      	ands	r2, r3
 8003a84:	2380      	movs	r3, #128	; 0x80
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d148      	bne.n	8003b1e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2280      	movs	r2, #128	; 0x80
 8003a92:	0112      	lsls	r2, r2, #4
 8003a94:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a96:	f3ef 8310 	mrs	r3, PRIMASK
 8003a9a:	613b      	str	r3, [r7, #16]
  return(result);
 8003a9c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f383 8810 	msr	PRIMASK, r3
}
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4924      	ldr	r1, [pc, #144]	; (8003b48 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003ab8:	400a      	ands	r2, r1
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003abe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	f383 8810 	msr	PRIMASK, r3
}
 8003ac6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8003acc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ace:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	f383 8810 	msr	PRIMASK, r3
}
 8003adc:	46c0      	nop			; (mov r8, r8)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2101      	movs	r1, #1
 8003aea:	438a      	bics	r2, r1
 8003aec:	609a      	str	r2, [r3, #8]
 8003aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	f383 8810 	msr	PRIMASK, r3
}
 8003af8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2284      	movs	r2, #132	; 0x84
 8003afe:	2120      	movs	r1, #32
 8003b00:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2288      	movs	r2, #136	; 0x88
 8003b06:	2120      	movs	r1, #32
 8003b08:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	228c      	movs	r2, #140	; 0x8c
 8003b0e:	2120      	movs	r1, #32
 8003b10:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2280      	movs	r2, #128	; 0x80
 8003b16:	2100      	movs	r1, #0
 8003b18:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e010      	b.n	8003b40 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	4013      	ands	r3, r2
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	425a      	negs	r2, r3
 8003b2e:	4153      	adcs	r3, r2
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	001a      	movs	r2, r3
 8003b34:	1dfb      	adds	r3, r7, #7
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d100      	bne.n	8003b3e <UART_WaitOnFlagUntilTimeout+0x182>
 8003b3c:	e747      	b.n	80039ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	0018      	movs	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b014      	add	sp, #80	; 0x50
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	fffffe5f 	.word	0xfffffe5f

08003b4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2280      	movs	r2, #128	; 0x80
 8003b58:	5c9b      	ldrb	r3, [r3, r2]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_UARTEx_DisableFifoMode+0x16>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e027      	b.n	8003bb2 <HAL_UARTEx_DisableFifoMode+0x66>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2280      	movs	r2, #128	; 0x80
 8003b66:	2101      	movs	r1, #1
 8003b68:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2284      	movs	r2, #132	; 0x84
 8003b6e:	2124      	movs	r1, #36	; 0x24
 8003b70:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2101      	movs	r1, #1
 8003b86:	438a      	bics	r2, r1
 8003b88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4a0b      	ldr	r2, [pc, #44]	; (8003bbc <HAL_UARTEx_DisableFifoMode+0x70>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2284      	movs	r2, #132	; 0x84
 8003ba4:	2120      	movs	r1, #32
 8003ba6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2280      	movs	r2, #128	; 0x80
 8003bac:	2100      	movs	r1, #0
 8003bae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	b004      	add	sp, #16
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	dfffffff 	.word	0xdfffffff

08003bc0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2280      	movs	r2, #128	; 0x80
 8003bce:	5c9b      	ldrb	r3, [r3, r2]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e02e      	b.n	8003c36 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2280      	movs	r2, #128	; 0x80
 8003bdc:	2101      	movs	r1, #1
 8003bde:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2284      	movs	r2, #132	; 0x84
 8003be4:	2124      	movs	r1, #36	; 0x24
 8003be6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	438a      	bics	r2, r1
 8003bfe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	08d9      	lsrs	r1, r3, #3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	0018      	movs	r0, r3
 8003c18:	f000 f854 	bl	8003cc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2284      	movs	r2, #132	; 0x84
 8003c28:	2120      	movs	r1, #32
 8003c2a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2280      	movs	r2, #128	; 0x80
 8003c30:	2100      	movs	r1, #0
 8003c32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	0018      	movs	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b004      	add	sp, #16
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2280      	movs	r2, #128	; 0x80
 8003c4e:	5c9b      	ldrb	r3, [r3, r2]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003c54:	2302      	movs	r3, #2
 8003c56:	e02f      	b.n	8003cb8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2280      	movs	r2, #128	; 0x80
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2284      	movs	r2, #132	; 0x84
 8003c64:	2124      	movs	r1, #36	; 0x24
 8003c66:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	438a      	bics	r2, r1
 8003c7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	4a0e      	ldr	r2, [pc, #56]	; (8003cc0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003c88:	4013      	ands	r3, r2
 8003c8a:	0019      	movs	r1, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f000 f813 	bl	8003cc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2284      	movs	r2, #132	; 0x84
 8003caa:	2120      	movs	r1, #32
 8003cac:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2280      	movs	r2, #128	; 0x80
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	0018      	movs	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b004      	add	sp, #16
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	f1ffffff 	.word	0xf1ffffff

08003cc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d108      	bne.n	8003ce6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	226a      	movs	r2, #106	; 0x6a
 8003cd8:	2101      	movs	r1, #1
 8003cda:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2268      	movs	r2, #104	; 0x68
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ce4:	e043      	b.n	8003d6e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ce6:	260f      	movs	r6, #15
 8003ce8:	19bb      	adds	r3, r7, r6
 8003cea:	2208      	movs	r2, #8
 8003cec:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003cee:	200e      	movs	r0, #14
 8003cf0:	183b      	adds	r3, r7, r0
 8003cf2:	2208      	movs	r2, #8
 8003cf4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	0e5b      	lsrs	r3, r3, #25
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	240d      	movs	r4, #13
 8003d02:	193b      	adds	r3, r7, r4
 8003d04:	2107      	movs	r1, #7
 8003d06:	400a      	ands	r2, r1
 8003d08:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	0f5b      	lsrs	r3, r3, #29
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	250c      	movs	r5, #12
 8003d16:	197b      	adds	r3, r7, r5
 8003d18:	2107      	movs	r1, #7
 8003d1a:	400a      	ands	r2, r1
 8003d1c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d1e:	183b      	adds	r3, r7, r0
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	197a      	adds	r2, r7, r5
 8003d24:	7812      	ldrb	r2, [r2, #0]
 8003d26:	4914      	ldr	r1, [pc, #80]	; (8003d78 <UARTEx_SetNbDataToProcess+0xb4>)
 8003d28:	5c8a      	ldrb	r2, [r1, r2]
 8003d2a:	435a      	muls	r2, r3
 8003d2c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d2e:	197b      	adds	r3, r7, r5
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	4a12      	ldr	r2, [pc, #72]	; (8003d7c <UARTEx_SetNbDataToProcess+0xb8>)
 8003d34:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d36:	0019      	movs	r1, r3
 8003d38:	f7fc fa76 	bl	8000228 <__divsi3>
 8003d3c:	0003      	movs	r3, r0
 8003d3e:	b299      	uxth	r1, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	226a      	movs	r2, #106	; 0x6a
 8003d44:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d46:	19bb      	adds	r3, r7, r6
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	193a      	adds	r2, r7, r4
 8003d4c:	7812      	ldrb	r2, [r2, #0]
 8003d4e:	490a      	ldr	r1, [pc, #40]	; (8003d78 <UARTEx_SetNbDataToProcess+0xb4>)
 8003d50:	5c8a      	ldrb	r2, [r1, r2]
 8003d52:	435a      	muls	r2, r3
 8003d54:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d56:	193b      	adds	r3, r7, r4
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	4a08      	ldr	r2, [pc, #32]	; (8003d7c <UARTEx_SetNbDataToProcess+0xb8>)
 8003d5c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d5e:	0019      	movs	r1, r3
 8003d60:	f7fc fa62 	bl	8000228 <__divsi3>
 8003d64:	0003      	movs	r3, r0
 8003d66:	b299      	uxth	r1, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2268      	movs	r2, #104	; 0x68
 8003d6c:	5299      	strh	r1, [r3, r2]
}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b005      	add	sp, #20
 8003d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	08003e8c 	.word	0x08003e8c
 8003d7c:	08003e94 	.word	0x08003e94

08003d80 <__libc_init_array>:
 8003d80:	b570      	push	{r4, r5, r6, lr}
 8003d82:	2600      	movs	r6, #0
 8003d84:	4d0c      	ldr	r5, [pc, #48]	; (8003db8 <__libc_init_array+0x38>)
 8003d86:	4c0d      	ldr	r4, [pc, #52]	; (8003dbc <__libc_init_array+0x3c>)
 8003d88:	1b64      	subs	r4, r4, r5
 8003d8a:	10a4      	asrs	r4, r4, #2
 8003d8c:	42a6      	cmp	r6, r4
 8003d8e:	d109      	bne.n	8003da4 <__libc_init_array+0x24>
 8003d90:	2600      	movs	r6, #0
 8003d92:	f000 f833 	bl	8003dfc <_init>
 8003d96:	4d0a      	ldr	r5, [pc, #40]	; (8003dc0 <__libc_init_array+0x40>)
 8003d98:	4c0a      	ldr	r4, [pc, #40]	; (8003dc4 <__libc_init_array+0x44>)
 8003d9a:	1b64      	subs	r4, r4, r5
 8003d9c:	10a4      	asrs	r4, r4, #2
 8003d9e:	42a6      	cmp	r6, r4
 8003da0:	d105      	bne.n	8003dae <__libc_init_array+0x2e>
 8003da2:	bd70      	pop	{r4, r5, r6, pc}
 8003da4:	00b3      	lsls	r3, r6, #2
 8003da6:	58eb      	ldr	r3, [r5, r3]
 8003da8:	4798      	blx	r3
 8003daa:	3601      	adds	r6, #1
 8003dac:	e7ee      	b.n	8003d8c <__libc_init_array+0xc>
 8003dae:	00b3      	lsls	r3, r6, #2
 8003db0:	58eb      	ldr	r3, [r5, r3]
 8003db2:	4798      	blx	r3
 8003db4:	3601      	adds	r6, #1
 8003db6:	e7f2      	b.n	8003d9e <__libc_init_array+0x1e>
 8003db8:	08003ea4 	.word	0x08003ea4
 8003dbc:	08003ea4 	.word	0x08003ea4
 8003dc0:	08003ea4 	.word	0x08003ea4
 8003dc4:	08003ea8 	.word	0x08003ea8

08003dc8 <memset>:
 8003dc8:	0003      	movs	r3, r0
 8003dca:	1882      	adds	r2, r0, r2
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d100      	bne.n	8003dd2 <memset+0xa>
 8003dd0:	4770      	bx	lr
 8003dd2:	7019      	strb	r1, [r3, #0]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	e7f9      	b.n	8003dcc <memset+0x4>

08003dd8 <strncmp>:
 8003dd8:	b530      	push	{r4, r5, lr}
 8003dda:	0005      	movs	r5, r0
 8003ddc:	1e10      	subs	r0, r2, #0
 8003dde:	d00b      	beq.n	8003df8 <strncmp+0x20>
 8003de0:	2400      	movs	r4, #0
 8003de2:	3a01      	subs	r2, #1
 8003de4:	5d2b      	ldrb	r3, [r5, r4]
 8003de6:	5d08      	ldrb	r0, [r1, r4]
 8003de8:	4283      	cmp	r3, r0
 8003dea:	d104      	bne.n	8003df6 <strncmp+0x1e>
 8003dec:	4294      	cmp	r4, r2
 8003dee:	d002      	beq.n	8003df6 <strncmp+0x1e>
 8003df0:	3401      	adds	r4, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f6      	bne.n	8003de4 <strncmp+0xc>
 8003df6:	1a18      	subs	r0, r3, r0
 8003df8:	bd30      	pop	{r4, r5, pc}
	...

08003dfc <_init>:
 8003dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e02:	bc08      	pop	{r3}
 8003e04:	469e      	mov	lr, r3
 8003e06:	4770      	bx	lr

08003e08 <_fini>:
 8003e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e0e:	bc08      	pop	{r3}
 8003e10:	469e      	mov	lr, r3
 8003e12:	4770      	bx	lr
