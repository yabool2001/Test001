
Test001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dbc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003e78  08003e78  00013e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f00  08003f00  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08003f00  08003f00  00013f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f08  08003f08  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f08  08003f08  00013f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f0c  08003f0c  00013f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000020  08003f30  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08003f30  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012508  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002000  00000000  00000000  00032550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00034550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  00035338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016077  00000000  00000000  00036068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e340  00000000  00000000  0004c0df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c7e8  00000000  00000000  0005a41f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6c07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032dc  00000000  00000000  000e6c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000020 	.word	0x20000020
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003e60 	.word	0x08003e60

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000024 	.word	0x20000024
 8000100:	08003e60 	.word	0x08003e60

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	1c08      	adds	r0, r1, #0
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8d8 	bl	8000614 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8d3 	bl	8000614 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	469b      	mov	fp, r3
 8000476:	d433      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000478:	465a      	mov	r2, fp
 800047a:	4653      	mov	r3, sl
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83a      	bhi.n	8000502 <__udivmoddi4+0xc2>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e078      	b.n	8000584 <__udivmoddi4+0x144>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e075      	b.n	800058a <__udivmoddi4+0x14a>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e028      	b.n	800050a <__udivmoddi4+0xca>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	2320      	movs	r3, #32
 80004e4:	1a9b      	subs	r3, r3, r2
 80004e6:	4652      	mov	r2, sl
 80004e8:	40da      	lsrs	r2, r3
 80004ea:	4641      	mov	r1, r8
 80004ec:	0013      	movs	r3, r2
 80004ee:	464a      	mov	r2, r9
 80004f0:	408a      	lsls	r2, r1
 80004f2:	0017      	movs	r7, r2
 80004f4:	4642      	mov	r2, r8
 80004f6:	431f      	orrs	r7, r3
 80004f8:	4653      	mov	r3, sl
 80004fa:	4093      	lsls	r3, r2
 80004fc:	001e      	movs	r6, r3
 80004fe:	42af      	cmp	r7, r5
 8000500:	d9c4      	bls.n	800048c <__udivmoddi4+0x4c>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	4643      	mov	r3, r8
 800050c:	2b00      	cmp	r3, #0
 800050e:	d0d9      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000510:	07fb      	lsls	r3, r7, #31
 8000512:	0872      	lsrs	r2, r6, #1
 8000514:	431a      	orrs	r2, r3
 8000516:	4646      	mov	r6, r8
 8000518:	087b      	lsrs	r3, r7, #1
 800051a:	e00e      	b.n	800053a <__udivmoddi4+0xfa>
 800051c:	42ab      	cmp	r3, r5
 800051e:	d101      	bne.n	8000524 <__udivmoddi4+0xe4>
 8000520:	42a2      	cmp	r2, r4
 8000522:	d80c      	bhi.n	800053e <__udivmoddi4+0xfe>
 8000524:	1aa4      	subs	r4, r4, r2
 8000526:	419d      	sbcs	r5, r3
 8000528:	2001      	movs	r0, #1
 800052a:	1924      	adds	r4, r4, r4
 800052c:	416d      	adcs	r5, r5
 800052e:	2100      	movs	r1, #0
 8000530:	3e01      	subs	r6, #1
 8000532:	1824      	adds	r4, r4, r0
 8000534:	414d      	adcs	r5, r1
 8000536:	2e00      	cmp	r6, #0
 8000538:	d006      	beq.n	8000548 <__udivmoddi4+0x108>
 800053a:	42ab      	cmp	r3, r5
 800053c:	d9ee      	bls.n	800051c <__udivmoddi4+0xdc>
 800053e:	3e01      	subs	r6, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2e00      	cmp	r6, #0
 8000546:	d1f8      	bne.n	800053a <__udivmoddi4+0xfa>
 8000548:	9800      	ldr	r0, [sp, #0]
 800054a:	9901      	ldr	r1, [sp, #4]
 800054c:	465b      	mov	r3, fp
 800054e:	1900      	adds	r0, r0, r4
 8000550:	4169      	adcs	r1, r5
 8000552:	2b00      	cmp	r3, #0
 8000554:	db24      	blt.n	80005a0 <__udivmoddi4+0x160>
 8000556:	002b      	movs	r3, r5
 8000558:	465a      	mov	r2, fp
 800055a:	4644      	mov	r4, r8
 800055c:	40d3      	lsrs	r3, r2
 800055e:	002a      	movs	r2, r5
 8000560:	40e2      	lsrs	r2, r4
 8000562:	001c      	movs	r4, r3
 8000564:	465b      	mov	r3, fp
 8000566:	0015      	movs	r5, r2
 8000568:	2b00      	cmp	r3, #0
 800056a:	db2a      	blt.n	80005c2 <__udivmoddi4+0x182>
 800056c:	0026      	movs	r6, r4
 800056e:	409e      	lsls	r6, r3
 8000570:	0033      	movs	r3, r6
 8000572:	0026      	movs	r6, r4
 8000574:	4647      	mov	r7, r8
 8000576:	40be      	lsls	r6, r7
 8000578:	0032      	movs	r2, r6
 800057a:	1a80      	subs	r0, r0, r2
 800057c:	4199      	sbcs	r1, r3
 800057e:	9000      	str	r0, [sp, #0]
 8000580:	9101      	str	r1, [sp, #4]
 8000582:	e79f      	b.n	80004c4 <__udivmoddi4+0x84>
 8000584:	42a3      	cmp	r3, r4
 8000586:	d8bc      	bhi.n	8000502 <__udivmoddi4+0xc2>
 8000588:	e783      	b.n	8000492 <__udivmoddi4+0x52>
 800058a:	4642      	mov	r2, r8
 800058c:	2320      	movs	r3, #32
 800058e:	2100      	movs	r1, #0
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	2200      	movs	r2, #0
 8000594:	9100      	str	r1, [sp, #0]
 8000596:	9201      	str	r2, [sp, #4]
 8000598:	2201      	movs	r2, #1
 800059a:	40da      	lsrs	r2, r3
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	e786      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	4646      	mov	r6, r8
 80005aa:	409a      	lsls	r2, r3
 80005ac:	0023      	movs	r3, r4
 80005ae:	40f3      	lsrs	r3, r6
 80005b0:	4644      	mov	r4, r8
 80005b2:	4313      	orrs	r3, r2
 80005b4:	002a      	movs	r2, r5
 80005b6:	40e2      	lsrs	r2, r4
 80005b8:	001c      	movs	r4, r3
 80005ba:	465b      	mov	r3, fp
 80005bc:	0015      	movs	r5, r2
 80005be:	2b00      	cmp	r3, #0
 80005c0:	dad4      	bge.n	800056c <__udivmoddi4+0x12c>
 80005c2:	4642      	mov	r2, r8
 80005c4:	002f      	movs	r7, r5
 80005c6:	2320      	movs	r3, #32
 80005c8:	0026      	movs	r6, r4
 80005ca:	4097      	lsls	r7, r2
 80005cc:	1a9b      	subs	r3, r3, r2
 80005ce:	40de      	lsrs	r6, r3
 80005d0:	003b      	movs	r3, r7
 80005d2:	4333      	orrs	r3, r6
 80005d4:	e7cd      	b.n	8000572 <__udivmoddi4+0x132>
 80005d6:	46c0      	nop			; (mov r8, r8)

080005d8 <__clzsi2>:
 80005d8:	211c      	movs	r1, #28
 80005da:	2301      	movs	r3, #1
 80005dc:	041b      	lsls	r3, r3, #16
 80005de:	4298      	cmp	r0, r3
 80005e0:	d301      	bcc.n	80005e6 <__clzsi2+0xe>
 80005e2:	0c00      	lsrs	r0, r0, #16
 80005e4:	3910      	subs	r1, #16
 80005e6:	0a1b      	lsrs	r3, r3, #8
 80005e8:	4298      	cmp	r0, r3
 80005ea:	d301      	bcc.n	80005f0 <__clzsi2+0x18>
 80005ec:	0a00      	lsrs	r0, r0, #8
 80005ee:	3908      	subs	r1, #8
 80005f0:	091b      	lsrs	r3, r3, #4
 80005f2:	4298      	cmp	r0, r3
 80005f4:	d301      	bcc.n	80005fa <__clzsi2+0x22>
 80005f6:	0900      	lsrs	r0, r0, #4
 80005f8:	3904      	subs	r1, #4
 80005fa:	a202      	add	r2, pc, #8	; (adr r2, 8000604 <__clzsi2+0x2c>)
 80005fc:	5c10      	ldrb	r0, [r2, r0]
 80005fe:	1840      	adds	r0, r0, r1
 8000600:	4770      	bx	lr
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	02020304 	.word	0x02020304
 8000608:	01010101 	.word	0x01010101
	...

08000614 <__clzdi2>:
 8000614:	b510      	push	{r4, lr}
 8000616:	2900      	cmp	r1, #0
 8000618:	d103      	bne.n	8000622 <__clzdi2+0xe>
 800061a:	f7ff ffdd 	bl	80005d8 <__clzsi2>
 800061e:	3020      	adds	r0, #32
 8000620:	e002      	b.n	8000628 <__clzdi2+0x14>
 8000622:	1c08      	adds	r0, r1, #0
 8000624:	f7ff ffd8 	bl	80005d8 <__clzsi2>
 8000628:	bd10      	pop	{r4, pc}
 800062a:	46c0      	nop			; (mov r8, r8)

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	stmdev_ctx_t dev_ctx;
	dev_ctx.write_reg = platform_write;
 8000632:	003b      	movs	r3, r7
 8000634:	4a40      	ldr	r2, [pc, #256]	; (8000738 <main+0x10c>)
 8000636:	601a      	str	r2, [r3, #0]
	dev_ctx.read_reg = platform_read;
 8000638:	003b      	movs	r3, r7
 800063a:	4a40      	ldr	r2, [pc, #256]	; (800073c <main+0x110>)
 800063c:	605a      	str	r2, [r3, #4]
	dev_ctx.handle = &iis2dlpc_comm;
 800063e:	003b      	movs	r3, r7
 8000640:	4a3f      	ldr	r2, [pc, #252]	; (8000740 <main+0x114>)
 8000642:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fbf8 	bl	8000e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f88a 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f9a8 	bl	80009a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000650:	f000 f8e6 	bl	8000820 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000654:	f000 f922 	bl	800089c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000658:	f000 f96e 	bl	8000938 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  iis2dlpc_device_id_get ( &dev_ctx , &whoami );
 800065c:	4a39      	ldr	r2, [pc, #228]	; (8000744 <main+0x118>)
 800065e:	003b      	movs	r3, r7
 8000660:	0011      	movs	r1, r2
 8000662:	0018      	movs	r0, r3
 8000664:	f000 fbd6 	bl	8000e14 <iis2dlpc_device_id_get>
	  if ( whoami != IIS2DLPC_ID)
 8000668:	4b36      	ldr	r3, [pc, #216]	; (8000744 <main+0x118>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b44      	cmp	r3, #68	; 0x44
 800066e:	d006      	beq.n	800067e <main+0x52>
		  HAL_UART_Transmit ( &huart2, &whoami , 1 , 1000 );
 8000670:	23fa      	movs	r3, #250	; 0xfa
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4933      	ldr	r1, [pc, #204]	; (8000744 <main+0x118>)
 8000676:	4834      	ldr	r0, [pc, #208]	; (8000748 <main+0x11c>)
 8000678:	2201      	movs	r2, #1
 800067a:	f002 fca5 	bl	8002fc8 <HAL_UART_Transmit>

	  r = HAL_UART_Receive (&huart2, uart_rx_buffer , sizeof ( uart_rx_buffer ) , 1000 );
 800067e:	23fa      	movs	r3, #250	; 0xfa
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	4932      	ldr	r1, [pc, #200]	; (800074c <main+0x120>)
 8000684:	4830      	ldr	r0, [pc, #192]	; (8000748 <main+0x11c>)
 8000686:	220a      	movs	r2, #10
 8000688:	f002 fd4a 	bl	8003120 <HAL_UART_Receive>
 800068c:	0003      	movs	r3, r0
 800068e:	001a      	movs	r2, r3
 8000690:	4b2f      	ldr	r3, [pc, #188]	; (8000750 <main+0x124>)
 8000692:	701a      	strb	r2, [r3, #0]
	  for ( uint8_t i = 0 ; i < sizeof ( uart_rx_buffer ) ; i++)
 8000694:	230f      	movs	r3, #15
 8000696:	18fb      	adds	r3, r7, r3
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
 800069c:	e021      	b.n	80006e2 <main+0xb6>
	  {
		  if ( strncmp ( (const char*)template , (const char*)&uart_rx_buffer[i] , 2 ) == 0 )
 800069e:	230f      	movs	r3, #15
 80006a0:	18fb      	adds	r3, r7, r3
 80006a2:	781a      	ldrb	r2, [r3, #0]
 80006a4:	4b29      	ldr	r3, [pc, #164]	; (800074c <main+0x120>)
 80006a6:	18d1      	adds	r1, r2, r3
 80006a8:	4b2a      	ldr	r3, [pc, #168]	; (8000754 <main+0x128>)
 80006aa:	2202      	movs	r2, #2
 80006ac:	0018      	movs	r0, r3
 80006ae:	f003 fbc5 	bl	8003e3c <strncmp>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d10f      	bne.n	80006d6 <main+0xaa>
			  r = HAL_UART_Transmit ( &huart2, uart_rx_buffer , (uint16_t)strlen ( (const char*)uart_rx_buffer ) , 1000 );
 80006b6:	4b25      	ldr	r3, [pc, #148]	; (800074c <main+0x120>)
 80006b8:	0018      	movs	r0, r3
 80006ba:	f7ff fd23 	bl	8000104 <strlen>
 80006be:	0003      	movs	r3, r0
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	23fa      	movs	r3, #250	; 0xfa
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	4921      	ldr	r1, [pc, #132]	; (800074c <main+0x120>)
 80006c8:	481f      	ldr	r0, [pc, #124]	; (8000748 <main+0x11c>)
 80006ca:	f002 fc7d 	bl	8002fc8 <HAL_UART_Transmit>
 80006ce:	0003      	movs	r3, r0
 80006d0:	001a      	movs	r2, r3
 80006d2:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <main+0x124>)
 80006d4:	701a      	strb	r2, [r3, #0]
	  for ( uint8_t i = 0 ; i < sizeof ( uart_rx_buffer ) ; i++)
 80006d6:	210f      	movs	r1, #15
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	781a      	ldrb	r2, [r3, #0]
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	3201      	adds	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
 80006e2:	230f      	movs	r3, #15
 80006e4:	18fb      	adds	r3, r7, r3
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d9d8      	bls.n	800069e <main+0x72>
	  }

	  HAL_GPIO_WritePin	( SPI1_CS_GPIO_Port , SPI1_CS_Pin , GPIO_PIN_RESET );
 80006ec:	23a0      	movs	r3, #160	; 0xa0
 80006ee:	05db      	lsls	r3, r3, #23
 80006f0:	2200      	movs	r2, #0
 80006f2:	2101      	movs	r1, #1
 80006f4:	0018      	movs	r0, r3
 80006f6:	f000 fe61 	bl	80013bc <HAL_GPIO_WritePin>
	  HAL_Delay ( 50 );
 80006fa:	2032      	movs	r0, #50	; 0x32
 80006fc:	f000 fc22 	bl	8000f44 <HAL_Delay>
	  if ( HAL_SPI_TransmitReceive ( &iis2dlpc_comm , whoami_reg , whoami_data , 1 , 1000 ) != HAL_OK )
 8000700:	4a15      	ldr	r2, [pc, #84]	; (8000758 <main+0x12c>)
 8000702:	4916      	ldr	r1, [pc, #88]	; (800075c <main+0x130>)
 8000704:	480e      	ldr	r0, [pc, #56]	; (8000740 <main+0x114>)
 8000706:	23fa      	movs	r3, #250	; 0xfa
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2301      	movs	r3, #1
 800070e:	f002 f85f 	bl	80027d0 <HAL_SPI_TransmitReceive>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <main+0xee>
		  Error_Handler ();
 8000716:	f000 fa1f 	bl	8000b58 <Error_Handler>
	  HAL_Delay ( 50 );
 800071a:	2032      	movs	r0, #50	; 0x32
 800071c:	f000 fc12 	bl	8000f44 <HAL_Delay>
	  HAL_GPIO_WritePin	( SPI1_CS_GPIO_Port , SPI1_CS_Pin , GPIO_PIN_SET );
 8000720:	23a0      	movs	r3, #160	; 0xa0
 8000722:	05db      	lsls	r3, r3, #23
 8000724:	2201      	movs	r2, #1
 8000726:	2101      	movs	r1, #1
 8000728:	0018      	movs	r0, r3
 800072a:	f000 fe47 	bl	80013bc <HAL_GPIO_WritePin>
	  HAL_Delay ( 50 );
 800072e:	2032      	movs	r0, #50	; 0x32
 8000730:	f000 fc08 	bl	8000f44 <HAL_Delay>
	  iis2dlpc_device_id_get ( &dev_ctx , &whoami );
 8000734:	e792      	b.n	800065c <main+0x30>
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	08000a81 	.word	0x08000a81
 800073c:	08000ae5 	.word	0x08000ae5
 8000740:	200000d8 	.word	0x200000d8
 8000744:	2000003c 	.word	0x2000003c
 8000748:	2000013c 	.word	0x2000013c
 800074c:	20000000 	.word	0x20000000
 8000750:	20000044 	.word	0x20000044
 8000754:	2000000c 	.word	0x2000000c
 8000758:	20000040 	.word	0x20000040
 800075c:	20000010 	.word	0x20000010

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b09d      	sub	sp, #116	; 0x74
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	2438      	movs	r4, #56	; 0x38
 8000768:	193b      	adds	r3, r7, r4
 800076a:	0018      	movs	r0, r3
 800076c:	2338      	movs	r3, #56	; 0x38
 800076e:	001a      	movs	r2, r3
 8000770:	2100      	movs	r1, #0
 8000772:	f003 fb5b 	bl	8003e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000776:	2328      	movs	r3, #40	; 0x28
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	0018      	movs	r0, r3
 800077c:	2310      	movs	r3, #16
 800077e:	001a      	movs	r2, r3
 8000780:	2100      	movs	r1, #0
 8000782:	f003 fb53 	bl	8003e2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000786:	003b      	movs	r3, r7
 8000788:	0018      	movs	r0, r3
 800078a:	2328      	movs	r3, #40	; 0x28
 800078c:	001a      	movs	r2, r3
 800078e:	2100      	movs	r1, #0
 8000790:	f003 fb4c 	bl	8003e2c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	0018      	movs	r0, r3
 800079a:	f000 fe2d 	bl	80013f8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	2202      	movs	r2, #2
 80007a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	2280      	movs	r2, #128	; 0x80
 80007a8:	0052      	lsls	r2, r2, #1
 80007aa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	2240      	movs	r2, #64	; 0x40
 80007b6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007b8:	193b      	adds	r3, r7, r4
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 fe65 	bl	8001490 <HAL_RCC_OscConfig>
 80007c6:	1e03      	subs	r3, r0, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007ca:	f000 f9c5 	bl	8000b58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	2128      	movs	r1, #40	; 0x28
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2207      	movs	r2, #7
 80007d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2200      	movs	r2, #0
 80007da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2100      	movs	r1, #0
 80007ec:	0018      	movs	r0, r3
 80007ee:	f001 f96f 	bl	8001ad0 <HAL_RCC_ClockConfig>
 80007f2:	1e03      	subs	r3, r0, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007f6:	f000 f9af 	bl	8000b58 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80007fa:	003b      	movs	r3, r7
 80007fc:	2201      	movs	r2, #1
 80007fe:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000800:	003b      	movs	r3, r7
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000806:	003b      	movs	r3, r7
 8000808:	0018      	movs	r0, r3
 800080a:	f001 fb0b 	bl	8001e24 <HAL_RCCEx_PeriphCLKConfig>
 800080e:	1e03      	subs	r3, r0, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000812:	f000 f9a1 	bl	8000b58 <Error_Handler>
  }
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b01d      	add	sp, #116	; 0x74
 800081c:	bd90      	pop	{r4, r7, pc}
	...

08000820 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_SPI1_Init+0x74>)
 8000826:	4a1c      	ldr	r2, [pc, #112]	; (8000898 <MX_SPI1_Init+0x78>)
 8000828:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_SPI1_Init+0x74>)
 800082c:	2282      	movs	r2, #130	; 0x82
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_SPI1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_SPI1_Init+0x74>)
 800083a:	22e0      	movs	r2, #224	; 0xe0
 800083c:	00d2      	lsls	r2, r2, #3
 800083e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_SPI1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <MX_SPI1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_SPI1_Init+0x74>)
 800084e:	2280      	movs	r2, #128	; 0x80
 8000850:	0092      	lsls	r2, r2, #2
 8000852:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_SPI1_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_SPI1_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_SPI1_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_SPI1_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_SPI1_Init+0x74>)
 800086e:	2207      	movs	r2, #7
 8000870:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_SPI1_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_SPI1_Init+0x74>)
 800087a:	2208      	movs	r2, #8
 800087c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <MX_SPI1_Init+0x74>)
 8000880:	0018      	movs	r0, r3
 8000882:	f001 fc49 	bl	8002118 <HAL_SPI_Init>
 8000886:	1e03      	subs	r3, r0, #0
 8000888:	d001      	beq.n	800088e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800088a:	f000 f965 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200000d8 	.word	0x200000d8
 8000898:	40013000 	.word	0x40013000

0800089c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008a0:	4b23      	ldr	r3, [pc, #140]	; (8000930 <MX_USART1_UART_Init+0x94>)
 80008a2:	4a24      	ldr	r2, [pc, #144]	; (8000934 <MX_USART1_UART_Init+0x98>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008a6:	4b22      	ldr	r3, [pc, #136]	; (8000930 <MX_USART1_UART_Init+0x94>)
 80008a8:	2296      	movs	r2, #150	; 0x96
 80008aa:	0192      	lsls	r2, r2, #6
 80008ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b20      	ldr	r3, [pc, #128]	; (8000930 <MX_USART1_UART_Init+0x94>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_USART1_UART_Init+0x94>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_USART1_UART_Init+0x94>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_USART1_UART_Init+0x94>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_USART1_UART_Init+0x94>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_USART1_UART_Init+0x94>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_USART1_UART_Init+0x94>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_USART1_UART_Init+0x94>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_USART1_UART_Init+0x94>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_USART1_UART_Init+0x94>)
 80008e6:	0018      	movs	r0, r3
 80008e8:	f002 fb18 	bl	8002f1c <HAL_UART_Init>
 80008ec:	1e03      	subs	r3, r0, #0
 80008ee:	d001      	beq.n	80008f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008f0:	f000 f932 	bl	8000b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_USART1_UART_Init+0x94>)
 80008f6:	2100      	movs	r1, #0
 80008f8:	0018      	movs	r0, r3
 80008fa:	f003 f993 	bl	8003c24 <HAL_UARTEx_SetTxFifoThreshold>
 80008fe:	1e03      	subs	r3, r0, #0
 8000900:	d001      	beq.n	8000906 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000902:	f000 f929 	bl	8000b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_USART1_UART_Init+0x94>)
 8000908:	2100      	movs	r1, #0
 800090a:	0018      	movs	r0, r3
 800090c:	f003 f9ca 	bl	8003ca4 <HAL_UARTEx_SetRxFifoThreshold>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d001      	beq.n	8000918 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000914:	f000 f920 	bl	8000b58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <MX_USART1_UART_Init+0x94>)
 800091a:	0018      	movs	r0, r3
 800091c:	f003 f948 	bl	8003bb0 <HAL_UARTEx_DisableFifoMode>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d001      	beq.n	8000928 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000924:	f000 f918 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	20000048 	.word	0x20000048
 8000934:	40013800 	.word	0x40013800

08000938 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800093c:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_USART2_UART_Init+0x60>)
 800093e:	4a17      	ldr	r2, [pc, #92]	; (800099c <MX_USART2_UART_Init+0x64>)
 8000940:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_USART2_UART_Init+0x60>)
 8000944:	22e1      	movs	r2, #225	; 0xe1
 8000946:	0252      	lsls	r2, r2, #9
 8000948:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_USART2_UART_Init+0x60>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_USART2_UART_Init+0x60>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_USART2_UART_Init+0x60>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_USART2_UART_Init+0x60>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <MX_USART2_UART_Init+0x60>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_USART2_UART_Init+0x60>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <MX_USART2_UART_Init+0x60>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_USART2_UART_Init+0x60>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097a:	4b07      	ldr	r3, [pc, #28]	; (8000998 <MX_USART2_UART_Init+0x60>)
 800097c:	2200      	movs	r2, #0
 800097e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <MX_USART2_UART_Init+0x60>)
 8000982:	0018      	movs	r0, r3
 8000984:	f002 faca 	bl	8002f1c <HAL_UART_Init>
 8000988:	1e03      	subs	r3, r0, #0
 800098a:	d001      	beq.n	8000990 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800098c:	f000 f8e4 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	2000013c 	.word	0x2000013c
 800099c:	40004400 	.word	0x40004400

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b089      	sub	sp, #36	; 0x24
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	240c      	movs	r4, #12
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	0018      	movs	r0, r3
 80009ac:	2314      	movs	r3, #20
 80009ae:	001a      	movs	r2, r3
 80009b0:	2100      	movs	r1, #0
 80009b2:	f003 fa3b 	bl	8003e2c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	4b30      	ldr	r3, [pc, #192]	; (8000a78 <MX_GPIO_Init+0xd8>)
 80009b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ba:	4b2f      	ldr	r3, [pc, #188]	; (8000a78 <MX_GPIO_Init+0xd8>)
 80009bc:	2101      	movs	r1, #1
 80009be:	430a      	orrs	r2, r1
 80009c0:	635a      	str	r2, [r3, #52]	; 0x34
 80009c2:	4b2d      	ldr	r3, [pc, #180]	; (8000a78 <MX_GPIO_Init+0xd8>)
 80009c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009c6:	2201      	movs	r2, #1
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	4b2a      	ldr	r3, [pc, #168]	; (8000a78 <MX_GPIO_Init+0xd8>)
 80009d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009d2:	4b29      	ldr	r3, [pc, #164]	; (8000a78 <MX_GPIO_Init+0xd8>)
 80009d4:	2104      	movs	r1, #4
 80009d6:	430a      	orrs	r2, r1
 80009d8:	635a      	str	r2, [r3, #52]	; 0x34
 80009da:	4b27      	ldr	r3, [pc, #156]	; (8000a78 <MX_GPIO_Init+0xd8>)
 80009dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009de:	2204      	movs	r2, #4
 80009e0:	4013      	ands	r3, r2
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80009e6:	23a0      	movs	r3, #160	; 0xa0
 80009e8:	05db      	lsls	r3, r3, #23
 80009ea:	2200      	movs	r2, #0
 80009ec:	2101      	movs	r1, #1
 80009ee:	0018      	movs	r0, r3
 80009f0:	f000 fce4 	bl	80013bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80009f4:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <MX_GPIO_Init+0xdc>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	2140      	movs	r1, #64	; 0x40
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 fcde 	bl	80013bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	2201      	movs	r2, #1
 8000a04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	193b      	adds	r3, r7, r4
 8000a08:	2201      	movs	r2, #1
 8000a0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	193b      	adds	r3, r7, r4
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000a18:	193a      	adds	r2, r7, r4
 8000a1a:	23a0      	movs	r3, #160	; 0xa0
 8000a1c:	05db      	lsls	r3, r3, #23
 8000a1e:	0011      	movs	r1, r2
 8000a20:	0018      	movs	r0, r3
 8000a22:	f000 fb67 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	2240      	movs	r2, #64	; 0x40
 8000a2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	193b      	adds	r3, r7, r4
 8000a2e:	2201      	movs	r2, #1
 8000a30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	193b      	adds	r3, r7, r4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	193b      	adds	r3, r7, r4
 8000a40:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <MX_GPIO_Init+0xdc>)
 8000a42:	0019      	movs	r1, r3
 8000a44:	0010      	movs	r0, r2
 8000a46:	f000 fb55 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IIS2DLPC_INT1_Pin */
  GPIO_InitStruct.Pin = IIS2DLPC_INT1_Pin;
 8000a4a:	0021      	movs	r1, r4
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	0112      	lsls	r2, r2, #4
 8000a52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2288      	movs	r2, #136	; 0x88
 8000a58:	0352      	lsls	r2, r2, #13
 8000a5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IIS2DLPC_INT1_GPIO_Port, &GPIO_InitStruct);
 8000a62:	187a      	adds	r2, r7, r1
 8000a64:	23a0      	movs	r3, #160	; 0xa0
 8000a66:	05db      	lsls	r3, r3, #23
 8000a68:	0011      	movs	r1, r2
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 fb42 	bl	80010f4 <HAL_GPIO_Init>

}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b009      	add	sp, #36	; 0x24
 8000a76:	bd90      	pop	{r4, r7, pc}
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	50000800 	.word	0x50000800

08000a80 <platform_write>:

/* USER CODE BEGIN 4 */
static int32_t platform_write ( void *handle , uint8_t reg , const uint8_t *bufp , uint16_t len )
{
 8000a80:	b5b0      	push	{r4, r5, r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	0008      	movs	r0, r1
 8000a8a:	607a      	str	r2, [r7, #4]
 8000a8c:	0019      	movs	r1, r3
 8000a8e:	240b      	movs	r4, #11
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	1c02      	adds	r2, r0, #0
 8000a94:	701a      	strb	r2, [r3, #0]
 8000a96:	2508      	movs	r5, #8
 8000a98:	197b      	adds	r3, r7, r5
 8000a9a:	1c0a      	adds	r2, r1, #0
 8000a9c:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( SPI1_CS_GPIO_Port , SPI1_CS_Pin , GPIO_PIN_RESET);
 8000a9e:	23a0      	movs	r3, #160	; 0xa0
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f000 fc88 	bl	80013bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 );
 8000aac:	23fa      	movs	r3, #250	; 0xfa
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	1939      	adds	r1, r7, r4
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f001 fbe7 	bl	8002288 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 );
 8000aba:	23fa      	movs	r3, #250	; 0xfa
 8000abc:	009c      	lsls	r4, r3, #2
 8000abe:	197b      	adds	r3, r7, r5
 8000ac0:	881a      	ldrh	r2, [r3, #0]
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	68f8      	ldr	r0, [r7, #12]
 8000ac6:	0023      	movs	r3, r4
 8000ac8:	f001 fbde 	bl	8002288 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( SPI1_CS_GPIO_Port , SPI1_CS_Pin , GPIO_PIN_SET);
 8000acc:	23a0      	movs	r3, #160	; 0xa0
 8000ace:	05db      	lsls	r3, r3, #23
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f000 fc71 	bl	80013bc <HAL_GPIO_WritePin>
	return 0;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	0018      	movs	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b004      	add	sp, #16
 8000ae2:	bdb0      	pop	{r4, r5, r7, pc}

08000ae4 <platform_read>:
static int32_t platform_read ( void *handle , uint8_t reg , uint8_t *bufp , uint16_t len )
{
 8000ae4:	b5b0      	push	{r4, r5, r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	0008      	movs	r0, r1
 8000aee:	607a      	str	r2, [r7, #4]
 8000af0:	0019      	movs	r1, r3
 8000af2:	240b      	movs	r4, #11
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	1c02      	adds	r2, r0, #0
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	2508      	movs	r5, #8
 8000afc:	197b      	adds	r3, r7, r5
 8000afe:	1c0a      	adds	r2, r1, #0
 8000b00:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	4252      	negs	r2, r2
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin	( SPI1_CS_GPIO_Port , SPI1_CS_Pin , GPIO_PIN_RESET );
 8000b12:	23a0      	movs	r3, #160	; 0xa0
 8000b14:	05db      	lsls	r3, r3, #23
 8000b16:	2200      	movs	r2, #0
 8000b18:	2101      	movs	r1, #1
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 fc4e 	bl	80013bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 );
 8000b20:	23fa      	movs	r3, #250	; 0xfa
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	1939      	adds	r1, r7, r4
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f001 fbad 	bl	8002288 <HAL_SPI_Transmit>
	HAL_SPI_Receive		( handle , bufp , len, 1000 );
 8000b2e:	23fa      	movs	r3, #250	; 0xfa
 8000b30:	009c      	lsls	r4, r3, #2
 8000b32:	197b      	adds	r3, r7, r5
 8000b34:	881a      	ldrh	r2, [r3, #0]
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	68f8      	ldr	r0, [r7, #12]
 8000b3a:	0023      	movs	r3, r4
 8000b3c:	f001 fcfc 	bl	8002538 <HAL_SPI_Receive>
	HAL_GPIO_WritePin	( SPI1_CS_GPIO_Port , SPI1_CS_Pin , GPIO_PIN_SET );
 8000b40:	23a0      	movs	r3, #160	; 0xa0
 8000b42:	05db      	lsls	r3, r3, #23
 8000b44:	2201      	movs	r2, #1
 8000b46:	2101      	movs	r1, #1
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f000 fc37 	bl	80013bc <HAL_GPIO_WritePin>
	return 0;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	0018      	movs	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b004      	add	sp, #16
 8000b56:	bdb0      	pop	{r4, r5, r7, pc}

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <Error_Handler+0x8>
	...

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <HAL_MspInit+0x44>)
 8000b6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HAL_MspInit+0x44>)
 8000b70:	2101      	movs	r1, #1
 8000b72:	430a      	orrs	r2, r1
 8000b74:	641a      	str	r2, [r3, #64]	; 0x40
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <HAL_MspInit+0x44>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <HAL_MspInit+0x44>)
 8000b84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_MspInit+0x44>)
 8000b88:	2180      	movs	r1, #128	; 0x80
 8000b8a:	0549      	lsls	r1, r1, #21
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_MspInit+0x44>)
 8000b92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b94:	2380      	movs	r3, #128	; 0x80
 8000b96:	055b      	lsls	r3, r3, #21
 8000b98:	4013      	ands	r3, r2
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b002      	add	sp, #8
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	40021000 	.word	0x40021000

08000bac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bac:	b590      	push	{r4, r7, lr}
 8000bae:	b08b      	sub	sp, #44	; 0x2c
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	2414      	movs	r4, #20
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	0018      	movs	r0, r3
 8000bba:	2314      	movs	r3, #20
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f003 f934 	bl	8003e2c <memset>
  if(hspi->Instance==SPI1)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a1b      	ldr	r2, [pc, #108]	; (8000c38 <HAL_SPI_MspInit+0x8c>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d130      	bne.n	8000c30 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bce:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <HAL_SPI_MspInit+0x90>)
 8000bd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <HAL_SPI_MspInit+0x90>)
 8000bd4:	2180      	movs	r1, #128	; 0x80
 8000bd6:	0149      	lsls	r1, r1, #5
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	641a      	str	r2, [r3, #64]	; 0x40
 8000bdc:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <HAL_SPI_MspInit+0x90>)
 8000bde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	015b      	lsls	r3, r3, #5
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <HAL_SPI_MspInit+0x90>)
 8000bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <HAL_SPI_MspInit+0x90>)
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	635a      	str	r2, [r3, #52]	; 0x34
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <HAL_SPI_MspInit+0x90>)
 8000bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000c02:	0021      	movs	r1, r4
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	22c2      	movs	r2, #194	; 0xc2
 8000c08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	187a      	adds	r2, r7, r1
 8000c24:	23a0      	movs	r3, #160	; 0xa0
 8000c26:	05db      	lsls	r3, r3, #23
 8000c28:	0011      	movs	r1, r2
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f000 fa62 	bl	80010f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b00b      	add	sp, #44	; 0x2c
 8000c36:	bd90      	pop	{r4, r7, pc}
 8000c38:	40013000 	.word	0x40013000
 8000c3c:	40021000 	.word	0x40021000

08000c40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b08d      	sub	sp, #52	; 0x34
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	241c      	movs	r4, #28
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	2314      	movs	r3, #20
 8000c50:	001a      	movs	r2, r3
 8000c52:	2100      	movs	r1, #0
 8000c54:	f003 f8ea 	bl	8003e2c <memset>
  if(huart->Instance==USART1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a37      	ldr	r2, [pc, #220]	; (8000d3c <HAL_UART_MspInit+0xfc>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d132      	bne.n	8000cc8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c62:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <HAL_UART_MspInit+0x100>)
 8000c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c66:	4b36      	ldr	r3, [pc, #216]	; (8000d40 <HAL_UART_MspInit+0x100>)
 8000c68:	2180      	movs	r1, #128	; 0x80
 8000c6a:	01c9      	lsls	r1, r1, #7
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	641a      	str	r2, [r3, #64]	; 0x40
 8000c70:	4b33      	ldr	r3, [pc, #204]	; (8000d40 <HAL_UART_MspInit+0x100>)
 8000c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	01db      	lsls	r3, r3, #7
 8000c78:	4013      	ands	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]
 8000c7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b30      	ldr	r3, [pc, #192]	; (8000d40 <HAL_UART_MspInit+0x100>)
 8000c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c82:	4b2f      	ldr	r3, [pc, #188]	; (8000d40 <HAL_UART_MspInit+0x100>)
 8000c84:	2101      	movs	r1, #1
 8000c86:	430a      	orrs	r2, r1
 8000c88:	635a      	str	r2, [r3, #52]	; 0x34
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <HAL_UART_MspInit+0x100>)
 8000c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c8e:	2201      	movs	r2, #1
 8000c90:	4013      	ands	r3, r2
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	22c0      	movs	r2, #192	; 0xc0
 8000c9a:	00d2      	lsls	r2, r2, #3
 8000c9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	0021      	movs	r1, r4
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	187a      	adds	r2, r7, r1
 8000cba:	23a0      	movs	r3, #160	; 0xa0
 8000cbc:	05db      	lsls	r3, r3, #23
 8000cbe:	0011      	movs	r1, r2
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f000 fa17 	bl	80010f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cc6:	e035      	b.n	8000d34 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART2)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a1d      	ldr	r2, [pc, #116]	; (8000d44 <HAL_UART_MspInit+0x104>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d130      	bne.n	8000d34 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cd2:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <HAL_UART_MspInit+0x100>)
 8000cd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <HAL_UART_MspInit+0x100>)
 8000cd8:	2180      	movs	r1, #128	; 0x80
 8000cda:	0289      	lsls	r1, r1, #10
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <HAL_UART_MspInit+0x100>)
 8000ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	029b      	lsls	r3, r3, #10
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <HAL_UART_MspInit+0x100>)
 8000cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <HAL_UART_MspInit+0x100>)
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	635a      	str	r2, [r3, #52]	; 0x34
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <HAL_UART_MspInit+0x100>)
 8000cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4013      	ands	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d06:	211c      	movs	r1, #28
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2202      	movs	r2, #2
 8000d12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	2201      	movs	r2, #1
 8000d24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	187a      	adds	r2, r7, r1
 8000d28:	23a0      	movs	r3, #160	; 0xa0
 8000d2a:	05db      	lsls	r3, r3, #23
 8000d2c:	0011      	movs	r1, r2
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f000 f9e0 	bl	80010f4 <HAL_GPIO_Init>
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b00d      	add	sp, #52	; 0x34
 8000d3a:	bd90      	pop	{r4, r7, pc}
 8000d3c:	40013800 	.word	0x40013800
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40004400 	.word	0x40004400

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <NMI_Handler+0x4>

08000d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d58:	46c0      	nop			; (mov r8, r8)
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6c:	f000 f8ce 	bl	8000f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d84:	f7ff fff7 	bl	8000d76 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d88:	480c      	ldr	r0, [pc, #48]	; (8000dbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000d8a:	490d      	ldr	r1, [pc, #52]	; (8000dc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <LoopForever+0xe>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da0:	4c0a      	ldr	r4, [pc, #40]	; (8000dcc <LoopForever+0x16>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dae:	f003 f819 	bl	8003de4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000db2:	f7ff fc3b 	bl	800062c <main>

08000db6 <LoopForever>:

LoopForever:
  b LoopForever
 8000db6:	e7fe      	b.n	8000db6 <LoopForever>
  ldr   r0, =_estack
 8000db8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000dc4:	08003f10 	.word	0x08003f10
  ldr r2, =_sbss
 8000dc8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000dcc:	200001d0 	.word	0x200001d0

08000dd0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC1_IRQHandler>

08000dd2 <iis2dlpc_read_reg>:
  *
  */
int32_t iis2dlpc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8000dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd4:	b087      	sub	sp, #28
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	0008      	movs	r0, r1
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	0019      	movs	r1, r3
 8000de0:	260b      	movs	r6, #11
 8000de2:	19bb      	adds	r3, r7, r6
 8000de4:	1c02      	adds	r2, r0, #0
 8000de6:	701a      	strb	r2, [r3, #0]
 8000de8:	2508      	movs	r5, #8
 8000dea:	197b      	adds	r3, r7, r5
 8000dec:	1c0a      	adds	r2, r1, #0
 8000dee:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	685c      	ldr	r4, [r3, #4]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	6898      	ldr	r0, [r3, #8]
 8000df8:	197b      	adds	r3, r7, r5
 8000dfa:	881d      	ldrh	r5, [r3, #0]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	19bb      	adds	r3, r7, r6
 8000e00:	7819      	ldrb	r1, [r3, #0]
 8000e02:	002b      	movs	r3, r5
 8000e04:	47a0      	blx	r4
 8000e06:	0003      	movs	r3, r0
 8000e08:	617b      	str	r3, [r7, #20]

  return ret;
 8000e0a:	697b      	ldr	r3, [r7, #20]
}
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b007      	add	sp, #28
 8000e12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e14 <iis2dlpc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_WHO_AM_I, buff, 1);
 8000e1e:	683a      	ldr	r2, [r7, #0]
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	2301      	movs	r3, #1
 8000e24:	210f      	movs	r1, #15
 8000e26:	f7ff ffd4 	bl	8000dd2 <iis2dlpc_read_reg>
 8000e2a:	0003      	movs	r3, r0
 8000e2c:	60fb      	str	r3, [r7, #12]

  return ret;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	0018      	movs	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b004      	add	sp, #16
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_Init+0x3c>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_Init+0x3c>)
 8000e4a:	2180      	movs	r1, #128	; 0x80
 8000e4c:	0049      	lsls	r1, r1, #1
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e52:	2003      	movs	r0, #3
 8000e54:	f000 f810 	bl	8000e78 <HAL_InitTick>
 8000e58:	1e03      	subs	r3, r0, #0
 8000e5a:	d003      	beq.n	8000e64 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e5c:	1dfb      	adds	r3, r7, #7
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
 8000e62:	e001      	b.n	8000e68 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e64:	f7ff fe7e 	bl	8000b64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e68:	1dfb      	adds	r3, r7, #7
 8000e6a:	781b      	ldrb	r3, [r3, #0]
}
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b002      	add	sp, #8
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40022000 	.word	0x40022000

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e80:	230f      	movs	r3, #15
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000e88:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <HAL_InitTick+0x88>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d02b      	beq.n	8000ee8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000e90:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <HAL_InitTick+0x8c>)
 8000e92:	681c      	ldr	r4, [r3, #0]
 8000e94:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <HAL_InitTick+0x88>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	0019      	movs	r1, r3
 8000e9a:	23fa      	movs	r3, #250	; 0xfa
 8000e9c:	0098      	lsls	r0, r3, #2
 8000e9e:	f7ff f939 	bl	8000114 <__udivsi3>
 8000ea2:	0003      	movs	r3, r0
 8000ea4:	0019      	movs	r1, r3
 8000ea6:	0020      	movs	r0, r4
 8000ea8:	f7ff f934 	bl	8000114 <__udivsi3>
 8000eac:	0003      	movs	r3, r0
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f000 f913 	bl	80010da <HAL_SYSTICK_Config>
 8000eb4:	1e03      	subs	r3, r0, #0
 8000eb6:	d112      	bne.n	8000ede <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b03      	cmp	r3, #3
 8000ebc:	d80a      	bhi.n	8000ed4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	425b      	negs	r3, r3
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f000 f8f2 	bl	80010b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_InitTick+0x90>)
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	e00d      	b.n	8000ef0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	2201      	movs	r2, #1
 8000eda:	701a      	strb	r2, [r3, #0]
 8000edc:	e008      	b.n	8000ef0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ede:	230f      	movs	r3, #15
 8000ee0:	18fb      	adds	r3, r7, r3
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	701a      	strb	r2, [r3, #0]
 8000ee6:	e003      	b.n	8000ef0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ee8:	230f      	movs	r3, #15
 8000eea:	18fb      	adds	r3, r7, r3
 8000eec:	2201      	movs	r2, #1
 8000eee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	781b      	ldrb	r3, [r3, #0]
}
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b005      	add	sp, #20
 8000efc:	bd90      	pop	{r4, r7, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	2000001c 	.word	0x2000001c
 8000f04:	20000014 	.word	0x20000014
 8000f08:	20000018 	.word	0x20000018

08000f0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <HAL_IncTick+0x1c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	001a      	movs	r2, r3
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_IncTick+0x20>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	18d2      	adds	r2, r2, r3
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_IncTick+0x20>)
 8000f1e:	601a      	str	r2, [r3, #0]
}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	2000001c 	.word	0x2000001c
 8000f2c:	200001cc 	.word	0x200001cc

08000f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b02      	ldr	r3, [pc, #8]	; (8000f40 <HAL_GetTick+0x10>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	0018      	movs	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	200001cc 	.word	0x200001cc

08000f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f4c:	f7ff fff0 	bl	8000f30 <HAL_GetTick>
 8000f50:	0003      	movs	r3, r0
 8000f52:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	d005      	beq.n	8000f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_Delay+0x44>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	001a      	movs	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	189b      	adds	r3, r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	f7ff ffe0 	bl	8000f30 <HAL_GetTick>
 8000f70:	0002      	movs	r2, r0
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d8f7      	bhi.n	8000f6c <HAL_Delay+0x28>
  {
  }
}
 8000f7c:	46c0      	nop			; (mov r8, r8)
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b004      	add	sp, #16
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	2000001c 	.word	0x2000001c

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	0002      	movs	r2, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8000fa0:	d828      	bhi.n	8000ff4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa2:	4a2f      	ldr	r2, [pc, #188]	; (8001060 <__NVIC_SetPriority+0xd4>)
 8000fa4:	1dfb      	adds	r3, r7, #7
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	b25b      	sxtb	r3, r3
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	33c0      	adds	r3, #192	; 0xc0
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	589b      	ldr	r3, [r3, r2]
 8000fb2:	1dfa      	adds	r2, r7, #7
 8000fb4:	7812      	ldrb	r2, [r2, #0]
 8000fb6:	0011      	movs	r1, r2
 8000fb8:	2203      	movs	r2, #3
 8000fba:	400a      	ands	r2, r1
 8000fbc:	00d2      	lsls	r2, r2, #3
 8000fbe:	21ff      	movs	r1, #255	; 0xff
 8000fc0:	4091      	lsls	r1, r2
 8000fc2:	000a      	movs	r2, r1
 8000fc4:	43d2      	mvns	r2, r2
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	019b      	lsls	r3, r3, #6
 8000fce:	22ff      	movs	r2, #255	; 0xff
 8000fd0:	401a      	ands	r2, r3
 8000fd2:	1dfb      	adds	r3, r7, #7
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	2303      	movs	r3, #3
 8000fda:	4003      	ands	r3, r0
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fe0:	481f      	ldr	r0, [pc, #124]	; (8001060 <__NVIC_SetPriority+0xd4>)
 8000fe2:	1dfb      	adds	r3, r7, #7
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	b25b      	sxtb	r3, r3
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	430a      	orrs	r2, r1
 8000fec:	33c0      	adds	r3, #192	; 0xc0
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ff2:	e031      	b.n	8001058 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff4:	4a1b      	ldr	r2, [pc, #108]	; (8001064 <__NVIC_SetPriority+0xd8>)
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	0019      	movs	r1, r3
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	400b      	ands	r3, r1
 8001000:	3b08      	subs	r3, #8
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	3306      	adds	r3, #6
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	18d3      	adds	r3, r2, r3
 800100a:	3304      	adds	r3, #4
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	1dfa      	adds	r2, r7, #7
 8001010:	7812      	ldrb	r2, [r2, #0]
 8001012:	0011      	movs	r1, r2
 8001014:	2203      	movs	r2, #3
 8001016:	400a      	ands	r2, r1
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	21ff      	movs	r1, #255	; 0xff
 800101c:	4091      	lsls	r1, r2
 800101e:	000a      	movs	r2, r1
 8001020:	43d2      	mvns	r2, r2
 8001022:	401a      	ands	r2, r3
 8001024:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	019b      	lsls	r3, r3, #6
 800102a:	22ff      	movs	r2, #255	; 0xff
 800102c:	401a      	ands	r2, r3
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	0018      	movs	r0, r3
 8001034:	2303      	movs	r3, #3
 8001036:	4003      	ands	r3, r0
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <__NVIC_SetPriority+0xd8>)
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	001c      	movs	r4, r3
 8001044:	230f      	movs	r3, #15
 8001046:	4023      	ands	r3, r4
 8001048:	3b08      	subs	r3, #8
 800104a:	089b      	lsrs	r3, r3, #2
 800104c:	430a      	orrs	r2, r1
 800104e:	3306      	adds	r3, #6
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	18c3      	adds	r3, r0, r3
 8001054:	3304      	adds	r3, #4
 8001056:	601a      	str	r2, [r3, #0]
}
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	b003      	add	sp, #12
 800105e:	bd90      	pop	{r4, r7, pc}
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	1e5a      	subs	r2, r3, #1
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	045b      	lsls	r3, r3, #17
 8001078:	429a      	cmp	r2, r3
 800107a:	d301      	bcc.n	8001080 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107c:	2301      	movs	r3, #1
 800107e:	e010      	b.n	80010a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <SysTick_Config+0x44>)
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	3a01      	subs	r2, #1
 8001086:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001088:	2301      	movs	r3, #1
 800108a:	425b      	negs	r3, r3
 800108c:	2103      	movs	r1, #3
 800108e:	0018      	movs	r0, r3
 8001090:	f7ff ff7c 	bl	8000f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <SysTick_Config+0x44>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <SysTick_Config+0x44>)
 800109c:	2207      	movs	r2, #7
 800109e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	0018      	movs	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b002      	add	sp, #8
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	e000e010 	.word	0xe000e010

080010b0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	210f      	movs	r1, #15
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	1c02      	adds	r2, r0, #0
 80010c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	0011      	movs	r1, r2
 80010cc:	0018      	movs	r0, r3
 80010ce:	f7ff ff5d 	bl	8000f8c <__NVIC_SetPriority>
}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b004      	add	sp, #16
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	0018      	movs	r0, r3
 80010e6:	f7ff ffbf 	bl	8001068 <SysTick_Config>
 80010ea:	0003      	movs	r3, r0
}
 80010ec:	0018      	movs	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b002      	add	sp, #8
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001102:	e147      	b.n	8001394 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2101      	movs	r1, #1
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	4091      	lsls	r1, r2
 800110e:	000a      	movs	r2, r1
 8001110:	4013      	ands	r3, r2
 8001112:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d100      	bne.n	800111c <HAL_GPIO_Init+0x28>
 800111a:	e138      	b.n	800138e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2203      	movs	r2, #3
 8001122:	4013      	ands	r3, r2
 8001124:	2b01      	cmp	r3, #1
 8001126:	d005      	beq.n	8001134 <HAL_GPIO_Init+0x40>
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2203      	movs	r2, #3
 800112e:	4013      	ands	r3, r2
 8001130:	2b02      	cmp	r3, #2
 8001132:	d130      	bne.n	8001196 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	409a      	lsls	r2, r3
 8001142:	0013      	movs	r3, r2
 8001144:	43da      	mvns	r2, r3
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68da      	ldr	r2, [r3, #12]
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	409a      	lsls	r2, r3
 8001156:	0013      	movs	r3, r2
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800116a:	2201      	movs	r2, #1
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	409a      	lsls	r2, r3
 8001170:	0013      	movs	r3, r2
 8001172:	43da      	mvns	r2, r3
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	091b      	lsrs	r3, r3, #4
 8001180:	2201      	movs	r2, #1
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
 8001188:	0013      	movs	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2203      	movs	r2, #3
 800119c:	4013      	ands	r3, r2
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d017      	beq.n	80011d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2203      	movs	r2, #3
 80011ae:	409a      	lsls	r2, r3
 80011b0:	0013      	movs	r3, r2
 80011b2:	43da      	mvns	r2, r3
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	409a      	lsls	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2203      	movs	r2, #3
 80011d8:	4013      	ands	r3, r2
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d123      	bne.n	8001226 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	08da      	lsrs	r2, r3, #3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3208      	adds	r2, #8
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	58d3      	ldr	r3, [r2, r3]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	2207      	movs	r2, #7
 80011f0:	4013      	ands	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	220f      	movs	r2, #15
 80011f6:	409a      	lsls	r2, r3
 80011f8:	0013      	movs	r3, r2
 80011fa:	43da      	mvns	r2, r3
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	691a      	ldr	r2, [r3, #16]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	2107      	movs	r1, #7
 800120a:	400b      	ands	r3, r1
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	409a      	lsls	r2, r3
 8001210:	0013      	movs	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	08da      	lsrs	r2, r3, #3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3208      	adds	r2, #8
 8001220:	0092      	lsls	r2, r2, #2
 8001222:	6939      	ldr	r1, [r7, #16]
 8001224:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	409a      	lsls	r2, r3
 8001234:	0013      	movs	r3, r2
 8001236:	43da      	mvns	r2, r3
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2203      	movs	r2, #3
 8001244:	401a      	ands	r2, r3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	409a      	lsls	r2, r3
 800124c:	0013      	movs	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	23c0      	movs	r3, #192	; 0xc0
 8001260:	029b      	lsls	r3, r3, #10
 8001262:	4013      	ands	r3, r2
 8001264:	d100      	bne.n	8001268 <HAL_GPIO_Init+0x174>
 8001266:	e092      	b.n	800138e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001268:	4a50      	ldr	r2, [pc, #320]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3318      	adds	r3, #24
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	589b      	ldr	r3, [r3, r2]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	2203      	movs	r2, #3
 800127a:	4013      	ands	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	220f      	movs	r2, #15
 8001280:	409a      	lsls	r2, r3
 8001282:	0013      	movs	r3, r2
 8001284:	43da      	mvns	r2, r3
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	23a0      	movs	r3, #160	; 0xa0
 8001290:	05db      	lsls	r3, r3, #23
 8001292:	429a      	cmp	r2, r3
 8001294:	d013      	beq.n	80012be <HAL_GPIO_Init+0x1ca>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a45      	ldr	r2, [pc, #276]	; (80013b0 <HAL_GPIO_Init+0x2bc>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d00d      	beq.n	80012ba <HAL_GPIO_Init+0x1c6>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a44      	ldr	r2, [pc, #272]	; (80013b4 <HAL_GPIO_Init+0x2c0>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d007      	beq.n	80012b6 <HAL_GPIO_Init+0x1c2>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a43      	ldr	r2, [pc, #268]	; (80013b8 <HAL_GPIO_Init+0x2c4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d101      	bne.n	80012b2 <HAL_GPIO_Init+0x1be>
 80012ae:	2303      	movs	r3, #3
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x1cc>
 80012b2:	2305      	movs	r3, #5
 80012b4:	e004      	b.n	80012c0 <HAL_GPIO_Init+0x1cc>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e002      	b.n	80012c0 <HAL_GPIO_Init+0x1cc>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_GPIO_Init+0x1cc>
 80012be:	2300      	movs	r3, #0
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	2103      	movs	r1, #3
 80012c4:	400a      	ands	r2, r1
 80012c6:	00d2      	lsls	r2, r2, #3
 80012c8:	4093      	lsls	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80012d0:	4936      	ldr	r1, [pc, #216]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3318      	adds	r3, #24
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012de:	4a33      	ldr	r2, [pc, #204]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	58d3      	ldr	r3, [r2, r3]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	43da      	mvns	r2, r3
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	025b      	lsls	r3, r3, #9
 80012f8:	4013      	ands	r3, r2
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001304:	4929      	ldr	r1, [pc, #164]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 8001306:	2280      	movs	r2, #128	; 0x80
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 800130c:	4a27      	ldr	r2, [pc, #156]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 800130e:	2384      	movs	r3, #132	; 0x84
 8001310:	58d3      	ldr	r3, [r2, r3]
 8001312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	43da      	mvns	r2, r3
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	029b      	lsls	r3, r3, #10
 8001326:	4013      	ands	r3, r2
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4313      	orrs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001332:	491e      	ldr	r1, [pc, #120]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 8001334:	2284      	movs	r2, #132	; 0x84
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	43da      	mvns	r2, r3
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	2380      	movs	r3, #128	; 0x80
 8001350:	035b      	lsls	r3, r3, #13
 8001352:	4013      	ands	r3, r2
 8001354:	d003      	beq.n	800135e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	43da      	mvns	r2, r3
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	039b      	lsls	r3, r3, #14
 800137c:	4013      	ands	r3, r2
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	3301      	adds	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	40da      	lsrs	r2, r3
 800139c:	1e13      	subs	r3, r2, #0
 800139e:	d000      	beq.n	80013a2 <HAL_GPIO_Init+0x2ae>
 80013a0:	e6b0      	b.n	8001104 <HAL_GPIO_Init+0x10>
  }
}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	46c0      	nop			; (mov r8, r8)
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b006      	add	sp, #24
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40021800 	.word	0x40021800
 80013b0:	50000400 	.word	0x50000400
 80013b4:	50000800 	.word	0x50000800
 80013b8:	50000c00 	.word	0x50000c00

080013bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	0008      	movs	r0, r1
 80013c6:	0011      	movs	r1, r2
 80013c8:	1cbb      	adds	r3, r7, #2
 80013ca:	1c02      	adds	r2, r0, #0
 80013cc:	801a      	strh	r2, [r3, #0]
 80013ce:	1c7b      	adds	r3, r7, #1
 80013d0:	1c0a      	adds	r2, r1, #0
 80013d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013d4:	1c7b      	adds	r3, r7, #1
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d004      	beq.n	80013e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013dc:	1cbb      	adds	r3, r7, #2
 80013de:	881a      	ldrh	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013e4:	e003      	b.n	80013ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013e6:	1cbb      	adds	r3, r7, #2
 80013e8:	881a      	ldrh	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b002      	add	sp, #8
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a19      	ldr	r2, [pc, #100]	; (800146c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001406:	4013      	ands	r3, r2
 8001408:	0019      	movs	r1, r3
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	430a      	orrs	r2, r1
 8001410:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	429a      	cmp	r2, r3
 800141a:	d11f      	bne.n	800145c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	0013      	movs	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	189b      	adds	r3, r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4912      	ldr	r1, [pc, #72]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800142a:	0018      	movs	r0, r3
 800142c:	f7fe fe72 	bl	8000114 <__udivsi3>
 8001430:	0003      	movs	r3, r0
 8001432:	3301      	adds	r3, #1
 8001434:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001436:	e008      	b.n	800144a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	3b01      	subs	r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	e001      	b.n	800144a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e009      	b.n	800145e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800144c:	695a      	ldr	r2, [r3, #20]
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	401a      	ands	r2, r3
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	429a      	cmp	r2, r3
 800145a:	d0ed      	beq.n	8001438 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	0018      	movs	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	b004      	add	sp, #16
 8001464:	bd80      	pop	{r7, pc}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	40007000 	.word	0x40007000
 800146c:	fffff9ff 	.word	0xfffff9ff
 8001470:	20000014 	.word	0x20000014
 8001474:	000f4240 	.word	0x000f4240

08001478 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <LL_RCC_GetAPB1Prescaler+0x14>)
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	23e0      	movs	r3, #224	; 0xe0
 8001482:	01db      	lsls	r3, r3, #7
 8001484:	4013      	ands	r3, r2
}
 8001486:	0018      	movs	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40021000 	.word	0x40021000

08001490 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e304      	b.n	8001aac <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2201      	movs	r2, #1
 80014a8:	4013      	ands	r3, r2
 80014aa:	d100      	bne.n	80014ae <HAL_RCC_OscConfig+0x1e>
 80014ac:	e07c      	b.n	80015a8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ae:	4bc3      	ldr	r3, [pc, #780]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2238      	movs	r2, #56	; 0x38
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014b8:	4bc0      	ldr	r3, [pc, #768]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	2203      	movs	r2, #3
 80014be:	4013      	ands	r3, r2
 80014c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	2b10      	cmp	r3, #16
 80014c6:	d102      	bne.n	80014ce <HAL_RCC_OscConfig+0x3e>
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d002      	beq.n	80014d4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d10b      	bne.n	80014ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d4:	4bb9      	ldr	r3, [pc, #740]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	029b      	lsls	r3, r3, #10
 80014dc:	4013      	ands	r3, r2
 80014de:	d062      	beq.n	80015a6 <HAL_RCC_OscConfig+0x116>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d15e      	bne.n	80015a6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e2df      	b.n	8001aac <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	025b      	lsls	r3, r3, #9
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d107      	bne.n	8001508 <HAL_RCC_OscConfig+0x78>
 80014f8:	4bb0      	ldr	r3, [pc, #704]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4baf      	ldr	r3, [pc, #700]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80014fe:	2180      	movs	r1, #128	; 0x80
 8001500:	0249      	lsls	r1, r1, #9
 8001502:	430a      	orrs	r2, r1
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	e020      	b.n	800154a <HAL_RCC_OscConfig+0xba>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	23a0      	movs	r3, #160	; 0xa0
 800150e:	02db      	lsls	r3, r3, #11
 8001510:	429a      	cmp	r2, r3
 8001512:	d10e      	bne.n	8001532 <HAL_RCC_OscConfig+0xa2>
 8001514:	4ba9      	ldr	r3, [pc, #676]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4ba8      	ldr	r3, [pc, #672]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800151a:	2180      	movs	r1, #128	; 0x80
 800151c:	02c9      	lsls	r1, r1, #11
 800151e:	430a      	orrs	r2, r1
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	4ba6      	ldr	r3, [pc, #664]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4ba5      	ldr	r3, [pc, #660]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001528:	2180      	movs	r1, #128	; 0x80
 800152a:	0249      	lsls	r1, r1, #9
 800152c:	430a      	orrs	r2, r1
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	e00b      	b.n	800154a <HAL_RCC_OscConfig+0xba>
 8001532:	4ba2      	ldr	r3, [pc, #648]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	4ba1      	ldr	r3, [pc, #644]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001538:	49a1      	ldr	r1, [pc, #644]	; (80017c0 <HAL_RCC_OscConfig+0x330>)
 800153a:	400a      	ands	r2, r1
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	4b9f      	ldr	r3, [pc, #636]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4b9e      	ldr	r3, [pc, #632]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001544:	499f      	ldr	r1, [pc, #636]	; (80017c4 <HAL_RCC_OscConfig+0x334>)
 8001546:	400a      	ands	r2, r1
 8001548:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d014      	beq.n	800157c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001552:	f7ff fced 	bl	8000f30 <HAL_GetTick>
 8001556:	0003      	movs	r3, r0
 8001558:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fce8 	bl	8000f30 <HAL_GetTick>
 8001560:	0002      	movs	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	; 0x64
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e29e      	b.n	8001aac <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800156e:	4b93      	ldr	r3, [pc, #588]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	029b      	lsls	r3, r3, #10
 8001576:	4013      	ands	r3, r2
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0xcc>
 800157a:	e015      	b.n	80015a8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157c:	f7ff fcd8 	bl	8000f30 <HAL_GetTick>
 8001580:	0003      	movs	r3, r0
 8001582:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001586:	f7ff fcd3 	bl	8000f30 <HAL_GetTick>
 800158a:	0002      	movs	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b64      	cmp	r3, #100	; 0x64
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e289      	b.n	8001aac <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001598:	4b88      	ldr	r3, [pc, #544]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	029b      	lsls	r3, r3, #10
 80015a0:	4013      	ands	r3, r2
 80015a2:	d1f0      	bne.n	8001586 <HAL_RCC_OscConfig+0xf6>
 80015a4:	e000      	b.n	80015a8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2202      	movs	r2, #2
 80015ae:	4013      	ands	r3, r2
 80015b0:	d100      	bne.n	80015b4 <HAL_RCC_OscConfig+0x124>
 80015b2:	e099      	b.n	80016e8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b4:	4b81      	ldr	r3, [pc, #516]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2238      	movs	r2, #56	; 0x38
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015be:	4b7f      	ldr	r3, [pc, #508]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	2203      	movs	r2, #3
 80015c4:	4013      	ands	r3, r2
 80015c6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	2b10      	cmp	r3, #16
 80015cc:	d102      	bne.n	80015d4 <HAL_RCC_OscConfig+0x144>
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d002      	beq.n	80015da <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d135      	bne.n	8001646 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015da:	4b78      	ldr	r3, [pc, #480]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	2380      	movs	r3, #128	; 0x80
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4013      	ands	r3, r2
 80015e4:	d005      	beq.n	80015f2 <HAL_RCC_OscConfig+0x162>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e25c      	b.n	8001aac <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f2:	4b72      	ldr	r3, [pc, #456]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	4a74      	ldr	r2, [pc, #464]	; (80017c8 <HAL_RCC_OscConfig+0x338>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	0019      	movs	r1, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	021a      	lsls	r2, r3, #8
 8001602:	4b6e      	ldr	r3, [pc, #440]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001604:	430a      	orrs	r2, r1
 8001606:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d112      	bne.n	8001634 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800160e:	4b6b      	ldr	r3, [pc, #428]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a6e      	ldr	r2, [pc, #440]	; (80017cc <HAL_RCC_OscConfig+0x33c>)
 8001614:	4013      	ands	r3, r2
 8001616:	0019      	movs	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691a      	ldr	r2, [r3, #16]
 800161c:	4b67      	ldr	r3, [pc, #412]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800161e:	430a      	orrs	r2, r1
 8001620:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001622:	4b66      	ldr	r3, [pc, #408]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	0adb      	lsrs	r3, r3, #11
 8001628:	2207      	movs	r2, #7
 800162a:	4013      	ands	r3, r2
 800162c:	4a68      	ldr	r2, [pc, #416]	; (80017d0 <HAL_RCC_OscConfig+0x340>)
 800162e:	40da      	lsrs	r2, r3
 8001630:	4b68      	ldr	r3, [pc, #416]	; (80017d4 <HAL_RCC_OscConfig+0x344>)
 8001632:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001634:	4b68      	ldr	r3, [pc, #416]	; (80017d8 <HAL_RCC_OscConfig+0x348>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	0018      	movs	r0, r3
 800163a:	f7ff fc1d 	bl	8000e78 <HAL_InitTick>
 800163e:	1e03      	subs	r3, r0, #0
 8001640:	d051      	beq.n	80016e6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e232      	b.n	8001aac <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d030      	beq.n	80016b0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800164e:	4b5b      	ldr	r3, [pc, #364]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a5e      	ldr	r2, [pc, #376]	; (80017cc <HAL_RCC_OscConfig+0x33c>)
 8001654:	4013      	ands	r3, r2
 8001656:	0019      	movs	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691a      	ldr	r2, [r3, #16]
 800165c:	4b57      	ldr	r3, [pc, #348]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800165e:	430a      	orrs	r2, r1
 8001660:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001662:	4b56      	ldr	r3, [pc, #344]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	4b55      	ldr	r3, [pc, #340]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001668:	2180      	movs	r1, #128	; 0x80
 800166a:	0049      	lsls	r1, r1, #1
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff fc5e 	bl	8000f30 <HAL_GetTick>
 8001674:	0003      	movs	r3, r0
 8001676:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167a:	f7ff fc59 	bl	8000f30 <HAL_GetTick>
 800167e:	0002      	movs	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e20f      	b.n	8001aac <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800168c:	4b4b      	ldr	r3, [pc, #300]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4013      	ands	r3, r2
 8001696:	d0f0      	beq.n	800167a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001698:	4b48      	ldr	r3, [pc, #288]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	4a4a      	ldr	r2, [pc, #296]	; (80017c8 <HAL_RCC_OscConfig+0x338>)
 800169e:	4013      	ands	r3, r2
 80016a0:	0019      	movs	r1, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	021a      	lsls	r2, r3, #8
 80016a8:	4b44      	ldr	r3, [pc, #272]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80016aa:	430a      	orrs	r2, r1
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	e01b      	b.n	80016e8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80016b0:	4b42      	ldr	r3, [pc, #264]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b41      	ldr	r3, [pc, #260]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80016b6:	4949      	ldr	r1, [pc, #292]	; (80017dc <HAL_RCC_OscConfig+0x34c>)
 80016b8:	400a      	ands	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff fc38 	bl	8000f30 <HAL_GetTick>
 80016c0:	0003      	movs	r3, r0
 80016c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c6:	f7ff fc33 	bl	8000f30 <HAL_GetTick>
 80016ca:	0002      	movs	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e1e9      	b.n	8001aac <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016d8:	4b38      	ldr	r3, [pc, #224]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	4013      	ands	r3, r2
 80016e2:	d1f0      	bne.n	80016c6 <HAL_RCC_OscConfig+0x236>
 80016e4:	e000      	b.n	80016e8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2208      	movs	r2, #8
 80016ee:	4013      	ands	r3, r2
 80016f0:	d047      	beq.n	8001782 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80016f2:	4b32      	ldr	r3, [pc, #200]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2238      	movs	r2, #56	; 0x38
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b18      	cmp	r3, #24
 80016fc:	d10a      	bne.n	8001714 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80016fe:	4b2f      	ldr	r3, [pc, #188]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001702:	2202      	movs	r2, #2
 8001704:	4013      	ands	r3, r2
 8001706:	d03c      	beq.n	8001782 <HAL_RCC_OscConfig+0x2f2>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d138      	bne.n	8001782 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e1cb      	b.n	8001aac <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d019      	beq.n	8001750 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800171c:	4b27      	ldr	r3, [pc, #156]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800171e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001720:	4b26      	ldr	r3, [pc, #152]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001722:	2101      	movs	r1, #1
 8001724:	430a      	orrs	r2, r1
 8001726:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff fc02 	bl	8000f30 <HAL_GetTick>
 800172c:	0003      	movs	r3, r0
 800172e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001732:	f7ff fbfd 	bl	8000f30 <HAL_GetTick>
 8001736:	0002      	movs	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e1b3      	b.n	8001aac <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001748:	2202      	movs	r2, #2
 800174a:	4013      	ands	r3, r2
 800174c:	d0f1      	beq.n	8001732 <HAL_RCC_OscConfig+0x2a2>
 800174e:	e018      	b.n	8001782 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001752:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001754:	4b19      	ldr	r3, [pc, #100]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001756:	2101      	movs	r1, #1
 8001758:	438a      	bics	r2, r1
 800175a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175c:	f7ff fbe8 	bl	8000f30 <HAL_GetTick>
 8001760:	0003      	movs	r3, r0
 8001762:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001766:	f7ff fbe3 	bl	8000f30 <HAL_GetTick>
 800176a:	0002      	movs	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e199      	b.n	8001aac <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001778:	4b10      	ldr	r3, [pc, #64]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800177a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177c:	2202      	movs	r2, #2
 800177e:	4013      	ands	r3, r2
 8001780:	d1f1      	bne.n	8001766 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2204      	movs	r2, #4
 8001788:	4013      	ands	r3, r2
 800178a:	d100      	bne.n	800178e <HAL_RCC_OscConfig+0x2fe>
 800178c:	e0c6      	b.n	800191c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800178e:	231f      	movs	r3, #31
 8001790:	18fb      	adds	r3, r7, r3
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2238      	movs	r2, #56	; 0x38
 800179c:	4013      	ands	r3, r2
 800179e:	2b20      	cmp	r3, #32
 80017a0:	d11e      	bne.n	80017e0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80017a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a6:	2202      	movs	r2, #2
 80017a8:	4013      	ands	r3, r2
 80017aa:	d100      	bne.n	80017ae <HAL_RCC_OscConfig+0x31e>
 80017ac:	e0b6      	b.n	800191c <HAL_RCC_OscConfig+0x48c>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d000      	beq.n	80017b8 <HAL_RCC_OscConfig+0x328>
 80017b6:	e0b1      	b.n	800191c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e177      	b.n	8001aac <HAL_RCC_OscConfig+0x61c>
 80017bc:	40021000 	.word	0x40021000
 80017c0:	fffeffff 	.word	0xfffeffff
 80017c4:	fffbffff 	.word	0xfffbffff
 80017c8:	ffff80ff 	.word	0xffff80ff
 80017cc:	ffffc7ff 	.word	0xffffc7ff
 80017d0:	00f42400 	.word	0x00f42400
 80017d4:	20000014 	.word	0x20000014
 80017d8:	20000018 	.word	0x20000018
 80017dc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017e0:	4bb4      	ldr	r3, [pc, #720]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 80017e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	055b      	lsls	r3, r3, #21
 80017e8:	4013      	ands	r3, r2
 80017ea:	d101      	bne.n	80017f0 <HAL_RCC_OscConfig+0x360>
 80017ec:	2301      	movs	r3, #1
 80017ee:	e000      	b.n	80017f2 <HAL_RCC_OscConfig+0x362>
 80017f0:	2300      	movs	r3, #0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d011      	beq.n	800181a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	4baf      	ldr	r3, [pc, #700]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 80017f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017fa:	4bae      	ldr	r3, [pc, #696]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	0549      	lsls	r1, r1, #21
 8001800:	430a      	orrs	r2, r1
 8001802:	63da      	str	r2, [r3, #60]	; 0x3c
 8001804:	4bab      	ldr	r3, [pc, #684]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 8001806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	055b      	lsls	r3, r3, #21
 800180c:	4013      	ands	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001812:	231f      	movs	r3, #31
 8001814:	18fb      	adds	r3, r7, r3
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800181a:	4ba7      	ldr	r3, [pc, #668]	; (8001ab8 <HAL_RCC_OscConfig+0x628>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4013      	ands	r3, r2
 8001824:	d11a      	bne.n	800185c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001826:	4ba4      	ldr	r3, [pc, #656]	; (8001ab8 <HAL_RCC_OscConfig+0x628>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	4ba3      	ldr	r3, [pc, #652]	; (8001ab8 <HAL_RCC_OscConfig+0x628>)
 800182c:	2180      	movs	r1, #128	; 0x80
 800182e:	0049      	lsls	r1, r1, #1
 8001830:	430a      	orrs	r2, r1
 8001832:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001834:	f7ff fb7c 	bl	8000f30 <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183e:	f7ff fb77 	bl	8000f30 <HAL_GetTick>
 8001842:	0002      	movs	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e12d      	b.n	8001aac <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001850:	4b99      	ldr	r3, [pc, #612]	; (8001ab8 <HAL_RCC_OscConfig+0x628>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4013      	ands	r3, r2
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d106      	bne.n	8001872 <HAL_RCC_OscConfig+0x3e2>
 8001864:	4b93      	ldr	r3, [pc, #588]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 8001866:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001868:	4b92      	ldr	r3, [pc, #584]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 800186a:	2101      	movs	r1, #1
 800186c:	430a      	orrs	r2, r1
 800186e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001870:	e01c      	b.n	80018ac <HAL_RCC_OscConfig+0x41c>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b05      	cmp	r3, #5
 8001878:	d10c      	bne.n	8001894 <HAL_RCC_OscConfig+0x404>
 800187a:	4b8e      	ldr	r3, [pc, #568]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 800187c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800187e:	4b8d      	ldr	r3, [pc, #564]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 8001880:	2104      	movs	r1, #4
 8001882:	430a      	orrs	r2, r1
 8001884:	65da      	str	r2, [r3, #92]	; 0x5c
 8001886:	4b8b      	ldr	r3, [pc, #556]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 8001888:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800188a:	4b8a      	ldr	r3, [pc, #552]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 800188c:	2101      	movs	r1, #1
 800188e:	430a      	orrs	r2, r1
 8001890:	65da      	str	r2, [r3, #92]	; 0x5c
 8001892:	e00b      	b.n	80018ac <HAL_RCC_OscConfig+0x41c>
 8001894:	4b87      	ldr	r3, [pc, #540]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 8001896:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001898:	4b86      	ldr	r3, [pc, #536]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 800189a:	2101      	movs	r1, #1
 800189c:	438a      	bics	r2, r1
 800189e:	65da      	str	r2, [r3, #92]	; 0x5c
 80018a0:	4b84      	ldr	r3, [pc, #528]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 80018a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018a4:	4b83      	ldr	r3, [pc, #524]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 80018a6:	2104      	movs	r1, #4
 80018a8:	438a      	bics	r2, r1
 80018aa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d014      	beq.n	80018de <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff fb3c 	bl	8000f30 <HAL_GetTick>
 80018b8:	0003      	movs	r3, r0
 80018ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018bc:	e009      	b.n	80018d2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018be:	f7ff fb37 	bl	8000f30 <HAL_GetTick>
 80018c2:	0002      	movs	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	4a7c      	ldr	r2, [pc, #496]	; (8001abc <HAL_RCC_OscConfig+0x62c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e0ec      	b.n	8001aac <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018d2:	4b78      	ldr	r3, [pc, #480]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 80018d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d6:	2202      	movs	r2, #2
 80018d8:	4013      	ands	r3, r2
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x42e>
 80018dc:	e013      	b.n	8001906 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018de:	f7ff fb27 	bl	8000f30 <HAL_GetTick>
 80018e2:	0003      	movs	r3, r0
 80018e4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018e6:	e009      	b.n	80018fc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e8:	f7ff fb22 	bl	8000f30 <HAL_GetTick>
 80018ec:	0002      	movs	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	4a72      	ldr	r2, [pc, #456]	; (8001abc <HAL_RCC_OscConfig+0x62c>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e0d7      	b.n	8001aac <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018fc:	4b6d      	ldr	r3, [pc, #436]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 80018fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001900:	2202      	movs	r2, #2
 8001902:	4013      	ands	r3, r2
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001906:	231f      	movs	r3, #31
 8001908:	18fb      	adds	r3, r7, r3
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001910:	4b68      	ldr	r3, [pc, #416]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 8001912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001914:	4b67      	ldr	r3, [pc, #412]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 8001916:	496a      	ldr	r1, [pc, #424]	; (8001ac0 <HAL_RCC_OscConfig+0x630>)
 8001918:	400a      	ands	r2, r1
 800191a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d100      	bne.n	8001926 <HAL_RCC_OscConfig+0x496>
 8001924:	e0c1      	b.n	8001aaa <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001926:	4b63      	ldr	r3, [pc, #396]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2238      	movs	r2, #56	; 0x38
 800192c:	4013      	ands	r3, r2
 800192e:	2b10      	cmp	r3, #16
 8001930:	d100      	bne.n	8001934 <HAL_RCC_OscConfig+0x4a4>
 8001932:	e081      	b.n	8001a38 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d156      	bne.n	80019ea <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193c:	4b5d      	ldr	r3, [pc, #372]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b5c      	ldr	r3, [pc, #368]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 8001942:	4960      	ldr	r1, [pc, #384]	; (8001ac4 <HAL_RCC_OscConfig+0x634>)
 8001944:	400a      	ands	r2, r1
 8001946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff faf2 	bl	8000f30 <HAL_GetTick>
 800194c:	0003      	movs	r3, r0
 800194e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001952:	f7ff faed 	bl	8000f30 <HAL_GetTick>
 8001956:	0002      	movs	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e0a3      	b.n	8001aac <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001964:	4b53      	ldr	r3, [pc, #332]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	049b      	lsls	r3, r3, #18
 800196c:	4013      	ands	r3, r2
 800196e:	d1f0      	bne.n	8001952 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001970:	4b50      	ldr	r3, [pc, #320]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4a54      	ldr	r2, [pc, #336]	; (8001ac8 <HAL_RCC_OscConfig+0x638>)
 8001976:	4013      	ands	r3, r2
 8001978:	0019      	movs	r1, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a1a      	ldr	r2, [r3, #32]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199c:	431a      	orrs	r2, r3
 800199e:	4b45      	ldr	r3, [pc, #276]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 80019a0:	430a      	orrs	r2, r1
 80019a2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019a4:	4b43      	ldr	r3, [pc, #268]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b42      	ldr	r3, [pc, #264]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	0449      	lsls	r1, r1, #17
 80019ae:	430a      	orrs	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80019b2:	4b40      	ldr	r3, [pc, #256]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	4b3f      	ldr	r3, [pc, #252]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 80019b8:	2180      	movs	r1, #128	; 0x80
 80019ba:	0549      	lsls	r1, r1, #21
 80019bc:	430a      	orrs	r2, r1
 80019be:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff fab6 	bl	8000f30 <HAL_GetTick>
 80019c4:	0003      	movs	r3, r0
 80019c6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ca:	f7ff fab1 	bl	8000f30 <HAL_GetTick>
 80019ce:	0002      	movs	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e067      	b.n	8001aac <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019dc:	4b35      	ldr	r3, [pc, #212]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	049b      	lsls	r3, r3, #18
 80019e4:	4013      	ands	r3, r2
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x53a>
 80019e8:	e05f      	b.n	8001aaa <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ea:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	4b31      	ldr	r3, [pc, #196]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 80019f0:	4934      	ldr	r1, [pc, #208]	; (8001ac4 <HAL_RCC_OscConfig+0x634>)
 80019f2:	400a      	ands	r2, r1
 80019f4:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80019f6:	4b2f      	ldr	r3, [pc, #188]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 80019f8:	68da      	ldr	r2, [r3, #12]
 80019fa:	4b2e      	ldr	r3, [pc, #184]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 80019fc:	2103      	movs	r1, #3
 80019fe:	438a      	bics	r2, r1
 8001a00:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001a02:	4b2c      	ldr	r3, [pc, #176]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 8001a08:	4930      	ldr	r1, [pc, #192]	; (8001acc <HAL_RCC_OscConfig+0x63c>)
 8001a0a:	400a      	ands	r2, r1
 8001a0c:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0e:	f7ff fa8f 	bl	8000f30 <HAL_GetTick>
 8001a12:	0003      	movs	r3, r0
 8001a14:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a18:	f7ff fa8a 	bl	8000f30 <HAL_GetTick>
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e040      	b.n	8001aac <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a2a:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	049b      	lsls	r3, r3, #18
 8001a32:	4013      	ands	r3, r2
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x588>
 8001a36:	e038      	b.n	8001aaa <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d101      	bne.n	8001a44 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e033      	b.n	8001aac <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	401a      	ands	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d126      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	2270      	movs	r2, #112	; 0x70
 8001a5c:	401a      	ands	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d11f      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	23fe      	movs	r3, #254	; 0xfe
 8001a6a:	01db      	lsls	r3, r3, #7
 8001a6c:	401a      	ands	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d116      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	23f8      	movs	r3, #248	; 0xf8
 8001a7c:	039b      	lsls	r3, r3, #14
 8001a7e:	401a      	ands	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d10e      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	23e0      	movs	r3, #224	; 0xe0
 8001a8c:	051b      	lsls	r3, r3, #20
 8001a8e:	401a      	ands	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d106      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	0f5b      	lsrs	r3, r3, #29
 8001a9c:	075a      	lsls	r2, r3, #29
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d001      	beq.n	8001aaa <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	0018      	movs	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b008      	add	sp, #32
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40007000 	.word	0x40007000
 8001abc:	00001388 	.word	0x00001388
 8001ac0:	efffffff 	.word	0xefffffff
 8001ac4:	feffffff 	.word	0xfeffffff
 8001ac8:	11c1808c 	.word	0x11c1808c
 8001acc:	eefeffff 	.word	0xeefeffff

08001ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0e9      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae4:	4b76      	ldr	r3, [pc, #472]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2207      	movs	r2, #7
 8001aea:	4013      	ands	r3, r2
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d91e      	bls.n	8001b30 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	4b73      	ldr	r3, [pc, #460]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2207      	movs	r2, #7
 8001af8:	4393      	bics	r3, r2
 8001afa:	0019      	movs	r1, r3
 8001afc:	4b70      	ldr	r3, [pc, #448]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b04:	f7ff fa14 	bl	8000f30 <HAL_GetTick>
 8001b08:	0003      	movs	r3, r0
 8001b0a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b0c:	e009      	b.n	8001b22 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0e:	f7ff fa0f 	bl	8000f30 <HAL_GetTick>
 8001b12:	0002      	movs	r2, r0
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	4a6a      	ldr	r2, [pc, #424]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f4>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e0ca      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b22:	4b67      	ldr	r3, [pc, #412]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2207      	movs	r2, #7
 8001b28:	4013      	ands	r3, r2
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d1ee      	bne.n	8001b0e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2202      	movs	r2, #2
 8001b36:	4013      	ands	r3, r2
 8001b38:	d015      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2204      	movs	r2, #4
 8001b40:	4013      	ands	r3, r2
 8001b42:	d006      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b44:	4b60      	ldr	r3, [pc, #384]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	4b5f      	ldr	r3, [pc, #380]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b4a:	21e0      	movs	r1, #224	; 0xe0
 8001b4c:	01c9      	lsls	r1, r1, #7
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b52:	4b5d      	ldr	r3, [pc, #372]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	4a5d      	ldr	r2, [pc, #372]	; (8001ccc <HAL_RCC_ClockConfig+0x1fc>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	4b59      	ldr	r3, [pc, #356]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b62:	430a      	orrs	r2, r1
 8001b64:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d057      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d107      	bne.n	8001b88 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b78:	4b53      	ldr	r3, [pc, #332]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	029b      	lsls	r3, r3, #10
 8001b80:	4013      	ands	r3, r2
 8001b82:	d12b      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e097      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b90:	4b4d      	ldr	r3, [pc, #308]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	049b      	lsls	r3, r3, #18
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d11f      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e08b      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d107      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ba8:	4b47      	ldr	r3, [pc, #284]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d113      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e07f      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d106      	bne.n	8001bce <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bc0:	4b41      	ldr	r3, [pc, #260]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d108      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e074      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bce:	4b3e      	ldr	r3, [pc, #248]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e06d      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bdc:	4b3a      	ldr	r3, [pc, #232]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2207      	movs	r2, #7
 8001be2:	4393      	bics	r3, r2
 8001be4:	0019      	movs	r1, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	4b37      	ldr	r3, [pc, #220]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001bec:	430a      	orrs	r2, r1
 8001bee:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bf0:	f7ff f99e 	bl	8000f30 <HAL_GetTick>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf8:	e009      	b.n	8001c0e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfa:	f7ff f999 	bl	8000f30 <HAL_GetTick>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	4a2f      	ldr	r2, [pc, #188]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e054      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0e:	4b2e      	ldr	r3, [pc, #184]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2238      	movs	r2, #56	; 0x38
 8001c14:	401a      	ands	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d1ec      	bne.n	8001bfa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c20:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2207      	movs	r2, #7
 8001c26:	4013      	ands	r3, r2
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d21e      	bcs.n	8001c6c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2207      	movs	r2, #7
 8001c34:	4393      	bics	r3, r2
 8001c36:	0019      	movs	r1, r3
 8001c38:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c40:	f7ff f976 	bl	8000f30 <HAL_GetTick>
 8001c44:	0003      	movs	r3, r0
 8001c46:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c48:	e009      	b.n	8001c5e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4a:	f7ff f971 	bl	8000f30 <HAL_GetTick>
 8001c4e:	0002      	movs	r2, r0
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	4a1b      	ldr	r2, [pc, #108]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e02c      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2207      	movs	r2, #7
 8001c64:	4013      	ands	r3, r2
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d1ee      	bne.n	8001c4a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2204      	movs	r2, #4
 8001c72:	4013      	ands	r3, r2
 8001c74:	d009      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c76:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	4a15      	ldr	r2, [pc, #84]	; (8001cd0 <HAL_RCC_ClockConfig+0x200>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	0019      	movs	r1, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001c86:	430a      	orrs	r2, r1
 8001c88:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c8a:	f000 f829 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 8001c8e:	0001      	movs	r1, r0
 8001c90:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	220f      	movs	r2, #15
 8001c98:	401a      	ands	r2, r3
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <HAL_RCC_ClockConfig+0x204>)
 8001c9c:	0092      	lsls	r2, r2, #2
 8001c9e:	58d3      	ldr	r3, [r2, r3]
 8001ca0:	221f      	movs	r2, #31
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	000a      	movs	r2, r1
 8001ca6:	40da      	lsrs	r2, r3
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_RCC_ClockConfig+0x208>)
 8001caa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001cac:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_RCC_ClockConfig+0x20c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f7ff f8e1 	bl	8000e78 <HAL_InitTick>
 8001cb6:	0003      	movs	r3, r0
}
 8001cb8:	0018      	movs	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b004      	add	sp, #16
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40022000 	.word	0x40022000
 8001cc4:	00001388 	.word	0x00001388
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	fffff0ff 	.word	0xfffff0ff
 8001cd0:	ffff8fff 	.word	0xffff8fff
 8001cd4:	08003e78 	.word	0x08003e78
 8001cd8:	20000014 	.word	0x20000014
 8001cdc:	20000018 	.word	0x20000018

08001ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ce6:	4b3c      	ldr	r3, [pc, #240]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2238      	movs	r2, #56	; 0x38
 8001cec:	4013      	ands	r3, r2
 8001cee:	d10f      	bne.n	8001d10 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001cf0:	4b39      	ldr	r3, [pc, #228]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	0adb      	lsrs	r3, r3, #11
 8001cf6:	2207      	movs	r2, #7
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	409a      	lsls	r2, r3
 8001cfe:	0013      	movs	r3, r2
 8001d00:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001d02:	6839      	ldr	r1, [r7, #0]
 8001d04:	4835      	ldr	r0, [pc, #212]	; (8001ddc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d06:	f7fe fa05 	bl	8000114 <__udivsi3>
 8001d0a:	0003      	movs	r3, r0
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	e05d      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d10:	4b31      	ldr	r3, [pc, #196]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2238      	movs	r2, #56	; 0x38
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d102      	bne.n	8001d22 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d1c:	4b30      	ldr	r3, [pc, #192]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	e054      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d22:	4b2d      	ldr	r3, [pc, #180]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2238      	movs	r2, #56	; 0x38
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b10      	cmp	r3, #16
 8001d2c:	d138      	bne.n	8001da0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001d2e:	4b2a      	ldr	r3, [pc, #168]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	2203      	movs	r2, #3
 8001d34:	4013      	ands	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	2207      	movs	r2, #7
 8001d40:	4013      	ands	r3, r2
 8001d42:	3301      	adds	r3, #1
 8001d44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d10d      	bne.n	8001d68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	4824      	ldr	r0, [pc, #144]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001d50:	f7fe f9e0 	bl	8000114 <__udivsi3>
 8001d54:	0003      	movs	r3, r0
 8001d56:	0019      	movs	r1, r3
 8001d58:	4b1f      	ldr	r3, [pc, #124]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	227f      	movs	r2, #127	; 0x7f
 8001d60:	4013      	ands	r3, r2
 8001d62:	434b      	muls	r3, r1
 8001d64:	617b      	str	r3, [r7, #20]
        break;
 8001d66:	e00d      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	481c      	ldr	r0, [pc, #112]	; (8001ddc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d6c:	f7fe f9d2 	bl	8000114 <__udivsi3>
 8001d70:	0003      	movs	r3, r0
 8001d72:	0019      	movs	r1, r3
 8001d74:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	0a1b      	lsrs	r3, r3, #8
 8001d7a:	227f      	movs	r2, #127	; 0x7f
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	434b      	muls	r3, r1
 8001d80:	617b      	str	r3, [r7, #20]
        break;
 8001d82:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	0f5b      	lsrs	r3, r3, #29
 8001d8a:	2207      	movs	r2, #7
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	3301      	adds	r3, #1
 8001d90:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	6978      	ldr	r0, [r7, #20]
 8001d96:	f7fe f9bd 	bl	8000114 <__udivsi3>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	e015      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001da0:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2238      	movs	r2, #56	; 0x38
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b20      	cmp	r3, #32
 8001daa:	d103      	bne.n	8001db4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	021b      	lsls	r3, r3, #8
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	e00b      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2238      	movs	r2, #56	; 0x38
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b18      	cmp	r3, #24
 8001dbe:	d103      	bne.n	8001dc8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001dc0:	23fa      	movs	r3, #250	; 0xfa
 8001dc2:	01db      	lsls	r3, r3, #7
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	e001      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001dcc:	693b      	ldr	r3, [r7, #16]
}
 8001dce:	0018      	movs	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b006      	add	sp, #24
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	00f42400 	.word	0x00f42400
 8001de0:	007a1200 	.word	0x007a1200

08001de4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de8:	4b02      	ldr	r3, [pc, #8]	; (8001df4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dea:	681b      	ldr	r3, [r3, #0]
}
 8001dec:	0018      	movs	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	20000014 	.word	0x20000014

08001df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df8:	b5b0      	push	{r4, r5, r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001dfc:	f7ff fff2 	bl	8001de4 <HAL_RCC_GetHCLKFreq>
 8001e00:	0004      	movs	r4, r0
 8001e02:	f7ff fb39 	bl	8001478 <LL_RCC_GetAPB1Prescaler>
 8001e06:	0003      	movs	r3, r0
 8001e08:	0b1a      	lsrs	r2, r3, #12
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e0c:	0092      	lsls	r2, r2, #2
 8001e0e:	58d3      	ldr	r3, [r2, r3]
 8001e10:	221f      	movs	r2, #31
 8001e12:	4013      	ands	r3, r2
 8001e14:	40dc      	lsrs	r4, r3
 8001e16:	0023      	movs	r3, r4
}
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	08003eb8 	.word	0x08003eb8

08001e24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001e2c:	2313      	movs	r3, #19
 8001e2e:	18fb      	adds	r3, r7, r3
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e34:	2312      	movs	r3, #18
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	029b      	lsls	r3, r3, #10
 8001e44:	4013      	ands	r3, r2
 8001e46:	d100      	bne.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001e48:	e0a3      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e4a:	2011      	movs	r0, #17
 8001e4c:	183b      	adds	r3, r7, r0
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e52:	4ba5      	ldr	r3, [pc, #660]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	055b      	lsls	r3, r3, #21
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d110      	bne.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5e:	4ba2      	ldr	r3, [pc, #648]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e62:	4ba1      	ldr	r3, [pc, #644]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e64:	2180      	movs	r1, #128	; 0x80
 8001e66:	0549      	lsls	r1, r1, #21
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e6c:	4b9e      	ldr	r3, [pc, #632]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	055b      	lsls	r3, r3, #21
 8001e74:	4013      	ands	r3, r2
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e7a:	183b      	adds	r3, r7, r0
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e80:	4b9a      	ldr	r3, [pc, #616]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b99      	ldr	r3, [pc, #612]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001e86:	2180      	movs	r1, #128	; 0x80
 8001e88:	0049      	lsls	r1, r1, #1
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e8e:	f7ff f84f 	bl	8000f30 <HAL_GetTick>
 8001e92:	0003      	movs	r3, r0
 8001e94:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e96:	e00b      	b.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e98:	f7ff f84a 	bl	8000f30 <HAL_GetTick>
 8001e9c:	0002      	movs	r2, r0
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d904      	bls.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001ea6:	2313      	movs	r3, #19
 8001ea8:	18fb      	adds	r3, r7, r3
 8001eaa:	2203      	movs	r2, #3
 8001eac:	701a      	strb	r2, [r3, #0]
        break;
 8001eae:	e005      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001eb0:	4b8e      	ldr	r3, [pc, #568]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d0ed      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001ebc:	2313      	movs	r3, #19
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d154      	bne.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ec6:	4b88      	ldr	r3, [pc, #544]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ec8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001eca:	23c0      	movs	r3, #192	; 0xc0
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4013      	ands	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d019      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d014      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ee2:	4b81      	ldr	r3, [pc, #516]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	4a82      	ldr	r2, [pc, #520]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001eec:	4b7e      	ldr	r3, [pc, #504]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001eee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ef0:	4b7d      	ldr	r3, [pc, #500]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ef2:	2180      	movs	r1, #128	; 0x80
 8001ef4:	0249      	lsls	r1, r1, #9
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001efa:	4b7b      	ldr	r3, [pc, #492]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001efc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001efe:	4b7a      	ldr	r3, [pc, #488]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f00:	497c      	ldr	r1, [pc, #496]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001f02:	400a      	ands	r2, r1
 8001f04:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f06:	4b78      	ldr	r3, [pc, #480]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	4013      	ands	r3, r2
 8001f12:	d016      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7ff f80c 	bl	8000f30 <HAL_GetTick>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f1c:	e00c      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1e:	f7ff f807 	bl	8000f30 <HAL_GetTick>
 8001f22:	0002      	movs	r2, r0
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	4a73      	ldr	r2, [pc, #460]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d904      	bls.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001f2e:	2313      	movs	r3, #19
 8001f30:	18fb      	adds	r3, r7, r3
 8001f32:	2203      	movs	r2, #3
 8001f34:	701a      	strb	r2, [r3, #0]
            break;
 8001f36:	e004      	b.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f38:	4b6b      	ldr	r3, [pc, #428]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d0ed      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001f42:	2313      	movs	r3, #19
 8001f44:	18fb      	adds	r3, r7, r3
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10a      	bne.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f4c:	4b66      	ldr	r3, [pc, #408]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f50:	4a67      	ldr	r2, [pc, #412]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	0019      	movs	r1, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f5a:	4b63      	ldr	r3, [pc, #396]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f60:	e00c      	b.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f62:	2312      	movs	r3, #18
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	2213      	movs	r2, #19
 8001f68:	18ba      	adds	r2, r7, r2
 8001f6a:	7812      	ldrb	r2, [r2, #0]
 8001f6c:	701a      	strb	r2, [r3, #0]
 8001f6e:	e005      	b.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f70:	2312      	movs	r3, #18
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	2213      	movs	r2, #19
 8001f76:	18ba      	adds	r2, r7, r2
 8001f78:	7812      	ldrb	r2, [r2, #0]
 8001f7a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f7c:	2311      	movs	r3, #17
 8001f7e:	18fb      	adds	r3, r7, r3
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d105      	bne.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f86:	4b58      	ldr	r3, [pc, #352]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f8a:	4b57      	ldr	r3, [pc, #348]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f8c:	495b      	ldr	r1, [pc, #364]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001f8e:	400a      	ands	r2, r1
 8001f90:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2201      	movs	r2, #1
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d009      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f9c:	4b52      	ldr	r3, [pc, #328]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	4393      	bics	r3, r2
 8001fa4:	0019      	movs	r1, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	4b4f      	ldr	r3, [pc, #316]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fac:	430a      	orrs	r2, r1
 8001fae:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2210      	movs	r2, #16
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d009      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fba:	4b4b      	ldr	r3, [pc, #300]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	4a50      	ldr	r2, [pc, #320]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	0019      	movs	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	4b47      	ldr	r3, [pc, #284]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	2380      	movs	r3, #128	; 0x80
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d009      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fda:	4b43      	ldr	r3, [pc, #268]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	4a49      	ldr	r2, [pc, #292]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	0019      	movs	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	695a      	ldr	r2, [r3, #20]
 8001fe8:	4b3f      	ldr	r3, [pc, #252]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fea:	430a      	orrs	r2, r1
 8001fec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d009      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ffa:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffe:	4a42      	ldr	r2, [pc, #264]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002000:	4013      	ands	r3, r2
 8002002:	0019      	movs	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	4b37      	ldr	r3, [pc, #220]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800200a:	430a      	orrs	r2, r1
 800200c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2220      	movs	r2, #32
 8002014:	4013      	ands	r3, r2
 8002016:	d009      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002018:	4b33      	ldr	r3, [pc, #204]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800201a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201c:	4a3b      	ldr	r2, [pc, #236]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800201e:	4013      	ands	r3, r2
 8002020:	0019      	movs	r1, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	4b30      	ldr	r3, [pc, #192]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002028:	430a      	orrs	r2, r1
 800202a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	01db      	lsls	r3, r3, #7
 8002034:	4013      	ands	r3, r2
 8002036:	d015      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002038:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800203a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	0899      	lsrs	r1, r3, #2
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69da      	ldr	r2, [r3, #28]
 8002044:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002046:	430a      	orrs	r2, r1
 8002048:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69da      	ldr	r2, [r3, #28]
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	05db      	lsls	r3, r3, #23
 8002052:	429a      	cmp	r2, r3
 8002054:	d106      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002056:	4b24      	ldr	r3, [pc, #144]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	4b23      	ldr	r3, [pc, #140]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800205c:	2180      	movs	r1, #128	; 0x80
 800205e:	0249      	lsls	r1, r1, #9
 8002060:	430a      	orrs	r2, r1
 8002062:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	039b      	lsls	r3, r3, #14
 800206c:	4013      	ands	r3, r2
 800206e:	d016      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002070:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002074:	4a26      	ldr	r2, [pc, #152]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002076:	4013      	ands	r3, r2
 8002078:	0019      	movs	r1, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1a      	ldr	r2, [r3, #32]
 800207e:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002080:	430a      	orrs	r2, r1
 8002082:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1a      	ldr	r2, [r3, #32]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	03db      	lsls	r3, r3, #15
 800208c:	429a      	cmp	r2, r3
 800208e:	d106      	bne.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002090:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002096:	2180      	movs	r1, #128	; 0x80
 8002098:	0449      	lsls	r1, r1, #17
 800209a:	430a      	orrs	r2, r1
 800209c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	4013      	ands	r3, r2
 80020a8:	d016      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80020aa:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ae:	4a19      	ldr	r2, [pc, #100]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	0019      	movs	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020ba:	430a      	orrs	r2, r1
 80020bc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	01db      	lsls	r3, r3, #7
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d106      	bne.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80020ca:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020d0:	2180      	movs	r1, #128	; 0x80
 80020d2:	0249      	lsls	r1, r1, #9
 80020d4:	430a      	orrs	r2, r1
 80020d6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80020d8:	2312      	movs	r3, #18
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	781b      	ldrb	r3, [r3, #0]
}
 80020de:	0018      	movs	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b006      	add	sp, #24
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40007000 	.word	0x40007000
 80020f0:	fffffcff 	.word	0xfffffcff
 80020f4:	fffeffff 	.word	0xfffeffff
 80020f8:	00001388 	.word	0x00001388
 80020fc:	efffffff 	.word	0xefffffff
 8002100:	fffff3ff 	.word	0xfffff3ff
 8002104:	fff3ffff 	.word	0xfff3ffff
 8002108:	ffcfffff 	.word	0xffcfffff
 800210c:	ffffcfff 	.word	0xffffcfff
 8002110:	ffbfffff 	.word	0xffbfffff
 8002114:	ffff3fff 	.word	0xffff3fff

08002118 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e0a8      	b.n	800227c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	2382      	movs	r3, #130	; 0x82
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	429a      	cmp	r2, r3
 800213c:	d009      	beq.n	8002152 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	61da      	str	r2, [r3, #28]
 8002144:	e005      	b.n	8002152 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	225d      	movs	r2, #93	; 0x5d
 800215c:	5c9b      	ldrb	r3, [r3, r2]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d107      	bne.n	8002174 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	225c      	movs	r2, #92	; 0x5c
 8002168:	2100      	movs	r1, #0
 800216a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	0018      	movs	r0, r3
 8002170:	f7fe fd1c 	bl	8000bac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	225d      	movs	r2, #93	; 0x5d
 8002178:	2102      	movs	r1, #2
 800217a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2140      	movs	r1, #64	; 0x40
 8002188:	438a      	bics	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	23e0      	movs	r3, #224	; 0xe0
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	429a      	cmp	r2, r3
 8002196:	d902      	bls.n	800219e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	e002      	b.n	80021a4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	015b      	lsls	r3, r3, #5
 80021a2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	23f0      	movs	r3, #240	; 0xf0
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d008      	beq.n	80021c2 <HAL_SPI_Init+0xaa>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	23e0      	movs	r3, #224	; 0xe0
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d002      	beq.n	80021c2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	2382      	movs	r3, #130	; 0x82
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	401a      	ands	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6899      	ldr	r1, [r3, #8]
 80021d0:	2384      	movs	r3, #132	; 0x84
 80021d2:	021b      	lsls	r3, r3, #8
 80021d4:	400b      	ands	r3, r1
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	2102      	movs	r1, #2
 80021de:	400b      	ands	r3, r1
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	2101      	movs	r1, #1
 80021e8:	400b      	ands	r3, r1
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6999      	ldr	r1, [r3, #24]
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	400b      	ands	r3, r1
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	2138      	movs	r1, #56	; 0x38
 80021fe:	400b      	ands	r3, r1
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	2180      	movs	r1, #128	; 0x80
 8002208:	400b      	ands	r3, r1
 800220a:	431a      	orrs	r2, r3
 800220c:	0011      	movs	r1, r2
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	019b      	lsls	r3, r3, #6
 8002216:	401a      	ands	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	0c1b      	lsrs	r3, r3, #16
 8002226:	2204      	movs	r2, #4
 8002228:	401a      	ands	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	2110      	movs	r1, #16
 8002230:	400b      	ands	r3, r1
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002238:	2108      	movs	r1, #8
 800223a:	400b      	ands	r3, r1
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68d9      	ldr	r1, [r3, #12]
 8002242:	23f0      	movs	r3, #240	; 0xf0
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	400b      	ands	r3, r1
 8002248:	431a      	orrs	r2, r3
 800224a:	0011      	movs	r1, r2
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	015b      	lsls	r3, r3, #5
 8002252:	401a      	ands	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	69da      	ldr	r2, [r3, #28]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4907      	ldr	r1, [pc, #28]	; (8002284 <HAL_SPI_Init+0x16c>)
 8002268:	400a      	ands	r2, r1
 800226a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	225d      	movs	r2, #93	; 0x5d
 8002276:	2101      	movs	r1, #1
 8002278:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	0018      	movs	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	b004      	add	sp, #16
 8002282:	bd80      	pop	{r7, pc}
 8002284:	fffff7ff 	.word	0xfffff7ff

08002288 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	1dbb      	adds	r3, r7, #6
 8002296:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002298:	231f      	movs	r3, #31
 800229a:	18fb      	adds	r3, r7, r3
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	225c      	movs	r2, #92	; 0x5c
 80022a4:	5c9b      	ldrb	r3, [r3, r2]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_SPI_Transmit+0x26>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e140      	b.n	8002530 <HAL_SPI_Transmit+0x2a8>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	225c      	movs	r2, #92	; 0x5c
 80022b2:	2101      	movs	r1, #1
 80022b4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022b6:	f7fe fe3b 	bl	8000f30 <HAL_GetTick>
 80022ba:	0003      	movs	r3, r0
 80022bc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80022be:	2316      	movs	r3, #22
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	1dba      	adds	r2, r7, #6
 80022c4:	8812      	ldrh	r2, [r2, #0]
 80022c6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	225d      	movs	r2, #93	; 0x5d
 80022cc:	5c9b      	ldrb	r3, [r3, r2]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d004      	beq.n	80022de <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80022d4:	231f      	movs	r3, #31
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	2202      	movs	r2, #2
 80022da:	701a      	strb	r2, [r3, #0]
    goto error;
 80022dc:	e11d      	b.n	800251a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_SPI_Transmit+0x64>
 80022e4:	1dbb      	adds	r3, r7, #6
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d104      	bne.n	80022f6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80022ec:	231f      	movs	r3, #31
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	2201      	movs	r2, #1
 80022f2:	701a      	strb	r2, [r3, #0]
    goto error;
 80022f4:	e111      	b.n	800251a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	225d      	movs	r2, #93	; 0x5d
 80022fa:	2103      	movs	r1, #3
 80022fc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1dba      	adds	r2, r7, #6
 800230e:	8812      	ldrh	r2, [r2, #0]
 8002310:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1dba      	adds	r2, r7, #6
 8002316:	8812      	ldrh	r2, [r2, #0]
 8002318:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2244      	movs	r2, #68	; 0x44
 8002324:	2100      	movs	r1, #0
 8002326:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2246      	movs	r2, #70	; 0x46
 800232c:	2100      	movs	r1, #0
 800232e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	2380      	movs	r3, #128	; 0x80
 8002342:	021b      	lsls	r3, r3, #8
 8002344:	429a      	cmp	r2, r3
 8002346:	d110      	bne.n	800236a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2140      	movs	r1, #64	; 0x40
 8002354:	438a      	bics	r2, r1
 8002356:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2180      	movs	r1, #128	; 0x80
 8002364:	01c9      	lsls	r1, r1, #7
 8002366:	430a      	orrs	r2, r1
 8002368:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2240      	movs	r2, #64	; 0x40
 8002372:	4013      	ands	r3, r2
 8002374:	2b40      	cmp	r3, #64	; 0x40
 8002376:	d007      	beq.n	8002388 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2140      	movs	r1, #64	; 0x40
 8002384:	430a      	orrs	r2, r1
 8002386:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	23e0      	movs	r3, #224	; 0xe0
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	429a      	cmp	r2, r3
 8002392:	d94e      	bls.n	8002432 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d004      	beq.n	80023a6 <HAL_SPI_Transmit+0x11e>
 800239c:	2316      	movs	r3, #22
 800239e:	18fb      	adds	r3, r7, r3
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d13f      	bne.n	8002426 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023aa:	881a      	ldrh	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b6:	1c9a      	adds	r2, r3, #2
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80023ca:	e02c      	b.n	8002426 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2202      	movs	r2, #2
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d112      	bne.n	8002400 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023de:	881a      	ldrh	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ea:	1c9a      	adds	r2, r3, #2
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023fe:	e012      	b.n	8002426 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002400:	f7fe fd96 	bl	8000f30 <HAL_GetTick>
 8002404:	0002      	movs	r2, r0
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d802      	bhi.n	8002416 <HAL_SPI_Transmit+0x18e>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	3301      	adds	r3, #1
 8002414:	d102      	bne.n	800241c <HAL_SPI_Transmit+0x194>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d104      	bne.n	8002426 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800241c:	231f      	movs	r3, #31
 800241e:	18fb      	adds	r3, r7, r3
 8002420:	2203      	movs	r2, #3
 8002422:	701a      	strb	r2, [r3, #0]
          goto error;
 8002424:	e079      	b.n	800251a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800242a:	b29b      	uxth	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1cd      	bne.n	80023cc <HAL_SPI_Transmit+0x144>
 8002430:	e04f      	b.n	80024d2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d004      	beq.n	8002444 <HAL_SPI_Transmit+0x1bc>
 800243a:	2316      	movs	r3, #22
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d141      	bne.n	80024c8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	330c      	adds	r3, #12
 800244e:	7812      	ldrb	r2, [r2, #0]
 8002450:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002460:	b29b      	uxth	r3, r3
 8002462:	3b01      	subs	r3, #1
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800246a:	e02d      	b.n	80024c8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2202      	movs	r2, #2
 8002474:	4013      	ands	r3, r2
 8002476:	2b02      	cmp	r3, #2
 8002478:	d113      	bne.n	80024a2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	330c      	adds	r3, #12
 8002484:	7812      	ldrb	r2, [r2, #0]
 8002486:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002496:	b29b      	uxth	r3, r3
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024a0:	e012      	b.n	80024c8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024a2:	f7fe fd45 	bl	8000f30 <HAL_GetTick>
 80024a6:	0002      	movs	r2, r0
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d802      	bhi.n	80024b8 <HAL_SPI_Transmit+0x230>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	3301      	adds	r3, #1
 80024b6:	d102      	bne.n	80024be <HAL_SPI_Transmit+0x236>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d104      	bne.n	80024c8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80024be:	231f      	movs	r3, #31
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	2203      	movs	r2, #3
 80024c4:	701a      	strb	r2, [r3, #0]
          goto error;
 80024c6:	e028      	b.n	800251a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1cc      	bne.n	800246c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	6839      	ldr	r1, [r7, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	0018      	movs	r0, r3
 80024da:	f000 fcd9 	bl	8002e90 <SPI_EndRxTxTransaction>
 80024de:	1e03      	subs	r3, r0, #0
 80024e0:	d002      	beq.n	80024e8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2220      	movs	r2, #32
 80024e6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10a      	bne.n	8002506 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024f0:	2300      	movs	r3, #0
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800250a:	2b00      	cmp	r3, #0
 800250c:	d004      	beq.n	8002518 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800250e:	231f      	movs	r3, #31
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	2201      	movs	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
 8002516:	e000      	b.n	800251a <HAL_SPI_Transmit+0x292>
  }

error:
 8002518:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	225d      	movs	r2, #93	; 0x5d
 800251e:	2101      	movs	r1, #1
 8002520:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	225c      	movs	r2, #92	; 0x5c
 8002526:	2100      	movs	r1, #0
 8002528:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800252a:	231f      	movs	r3, #31
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	781b      	ldrb	r3, [r3, #0]
}
 8002530:	0018      	movs	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	b008      	add	sp, #32
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b089      	sub	sp, #36	; 0x24
 800253c:	af02      	add	r7, sp, #8
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	1dbb      	adds	r3, r7, #6
 8002546:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002548:	2317      	movs	r3, #23
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	2382      	movs	r3, #130	; 0x82
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	429a      	cmp	r2, r3
 800255a:	d113      	bne.n	8002584 <HAL_SPI_Receive+0x4c>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10f      	bne.n	8002584 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	225d      	movs	r2, #93	; 0x5d
 8002568:	2104      	movs	r1, #4
 800256a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800256c:	1dbb      	adds	r3, r7, #6
 800256e:	881c      	ldrh	r4, [r3, #0]
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	68b9      	ldr	r1, [r7, #8]
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	0023      	movs	r3, r4
 800257c:	f000 f928 	bl	80027d0 <HAL_SPI_TransmitReceive>
 8002580:	0003      	movs	r3, r0
 8002582:	e11c      	b.n	80027be <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	225c      	movs	r2, #92	; 0x5c
 8002588:	5c9b      	ldrb	r3, [r3, r2]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_SPI_Receive+0x5a>
 800258e:	2302      	movs	r3, #2
 8002590:	e115      	b.n	80027be <HAL_SPI_Receive+0x286>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	225c      	movs	r2, #92	; 0x5c
 8002596:	2101      	movs	r1, #1
 8002598:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800259a:	f7fe fcc9 	bl	8000f30 <HAL_GetTick>
 800259e:	0003      	movs	r3, r0
 80025a0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	225d      	movs	r2, #93	; 0x5d
 80025a6:	5c9b      	ldrb	r3, [r3, r2]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d004      	beq.n	80025b8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80025ae:	2317      	movs	r3, #23
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	2202      	movs	r2, #2
 80025b4:	701a      	strb	r2, [r3, #0]
    goto error;
 80025b6:	e0f7      	b.n	80027a8 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_SPI_Receive+0x8e>
 80025be:	1dbb      	adds	r3, r7, #6
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d104      	bne.n	80025d0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80025c6:	2317      	movs	r3, #23
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
    goto error;
 80025ce:	e0eb      	b.n	80027a8 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	225d      	movs	r2, #93	; 0x5d
 80025d4:	2104      	movs	r1, #4
 80025d6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1dba      	adds	r2, r7, #6
 80025e8:	2144      	movs	r1, #68	; 0x44
 80025ea:	8812      	ldrh	r2, [r2, #0]
 80025ec:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1dba      	adds	r2, r7, #6
 80025f2:	2146      	movs	r1, #70	; 0x46
 80025f4:	8812      	ldrh	r2, [r2, #0]
 80025f6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	23e0      	movs	r3, #224	; 0xe0
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	429a      	cmp	r2, r3
 8002620:	d908      	bls.n	8002634 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4966      	ldr	r1, [pc, #408]	; (80027c8 <HAL_SPI_Receive+0x290>)
 800262e:	400a      	ands	r2, r1
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	e008      	b.n	8002646 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2180      	movs	r1, #128	; 0x80
 8002640:	0149      	lsls	r1, r1, #5
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	429a      	cmp	r2, r3
 8002650:	d10f      	bne.n	8002672 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2140      	movs	r1, #64	; 0x40
 800265e:	438a      	bics	r2, r1
 8002660:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4957      	ldr	r1, [pc, #348]	; (80027cc <HAL_SPI_Receive+0x294>)
 800266e:	400a      	ands	r2, r1
 8002670:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2240      	movs	r2, #64	; 0x40
 800267a:	4013      	ands	r3, r2
 800267c:	2b40      	cmp	r3, #64	; 0x40
 800267e:	d007      	beq.n	8002690 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2140      	movs	r1, #64	; 0x40
 800268c:	430a      	orrs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	23e0      	movs	r3, #224	; 0xe0
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	429a      	cmp	r2, r3
 800269a:	d900      	bls.n	800269e <HAL_SPI_Receive+0x166>
 800269c:	e069      	b.n	8002772 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800269e:	e031      	b.n	8002704 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2201      	movs	r2, #1
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d117      	bne.n	80026de <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	330c      	adds	r3, #12
 80026b4:	001a      	movs	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	7812      	ldrb	r2, [r2, #0]
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2246      	movs	r2, #70	; 0x46
 80026ce:	5a9b      	ldrh	r3, [r3, r2]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b299      	uxth	r1, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2246      	movs	r2, #70	; 0x46
 80026da:	5299      	strh	r1, [r3, r2]
 80026dc:	e012      	b.n	8002704 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026de:	f7fe fc27 	bl	8000f30 <HAL_GetTick>
 80026e2:	0002      	movs	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d802      	bhi.n	80026f4 <HAL_SPI_Receive+0x1bc>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	3301      	adds	r3, #1
 80026f2:	d102      	bne.n	80026fa <HAL_SPI_Receive+0x1c2>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d104      	bne.n	8002704 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80026fa:	2317      	movs	r3, #23
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	2203      	movs	r2, #3
 8002700:	701a      	strb	r2, [r3, #0]
          goto error;
 8002702:	e051      	b.n	80027a8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2246      	movs	r2, #70	; 0x46
 8002708:	5a9b      	ldrh	r3, [r3, r2]
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1c7      	bne.n	80026a0 <HAL_SPI_Receive+0x168>
 8002710:	e035      	b.n	800277e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2201      	movs	r2, #1
 800271a:	4013      	ands	r3, r2
 800271c:	2b01      	cmp	r3, #1
 800271e:	d115      	bne.n	800274c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	b292      	uxth	r2, r2
 800272c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	1c9a      	adds	r2, r3, #2
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2246      	movs	r2, #70	; 0x46
 800273c:	5a9b      	ldrh	r3, [r3, r2]
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	b299      	uxth	r1, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2246      	movs	r2, #70	; 0x46
 8002748:	5299      	strh	r1, [r3, r2]
 800274a:	e012      	b.n	8002772 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800274c:	f7fe fbf0 	bl	8000f30 <HAL_GetTick>
 8002750:	0002      	movs	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d802      	bhi.n	8002762 <HAL_SPI_Receive+0x22a>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	3301      	adds	r3, #1
 8002760:	d102      	bne.n	8002768 <HAL_SPI_Receive+0x230>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d104      	bne.n	8002772 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8002768:	2317      	movs	r3, #23
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	2203      	movs	r2, #3
 800276e:	701a      	strb	r2, [r3, #0]
          goto error;
 8002770:	e01a      	b.n	80027a8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2246      	movs	r2, #70	; 0x46
 8002776:	5a9b      	ldrh	r3, [r3, r2]
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1c9      	bne.n	8002712 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	6839      	ldr	r1, [r7, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	0018      	movs	r0, r3
 8002786:	f000 fb25 	bl	8002dd4 <SPI_EndRxTransaction>
 800278a:	1e03      	subs	r3, r0, #0
 800278c:	d002      	beq.n	8002794 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2220      	movs	r2, #32
 8002792:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002798:	2b00      	cmp	r3, #0
 800279a:	d004      	beq.n	80027a6 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800279c:	2317      	movs	r3, #23
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	2201      	movs	r2, #1
 80027a2:	701a      	strb	r2, [r3, #0]
 80027a4:	e000      	b.n	80027a8 <HAL_SPI_Receive+0x270>
  }

error :
 80027a6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	225d      	movs	r2, #93	; 0x5d
 80027ac:	2101      	movs	r1, #1
 80027ae:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	225c      	movs	r2, #92	; 0x5c
 80027b4:	2100      	movs	r1, #0
 80027b6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80027b8:	2317      	movs	r3, #23
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	781b      	ldrb	r3, [r3, #0]
}
 80027be:	0018      	movs	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b007      	add	sp, #28
 80027c4:	bd90      	pop	{r4, r7, pc}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	ffffefff 	.word	0xffffefff
 80027cc:	ffffbfff 	.word	0xffffbfff

080027d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	001a      	movs	r2, r3
 80027de:	1cbb      	adds	r3, r7, #2
 80027e0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027e2:	2301      	movs	r3, #1
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027e6:	2323      	movs	r3, #35	; 0x23
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	225c      	movs	r2, #92	; 0x5c
 80027f2:	5c9b      	ldrb	r3, [r3, r2]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_SPI_TransmitReceive+0x2c>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e1b5      	b.n	8002b68 <HAL_SPI_TransmitReceive+0x398>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	225c      	movs	r2, #92	; 0x5c
 8002800:	2101      	movs	r1, #1
 8002802:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002804:	f7fe fb94 	bl	8000f30 <HAL_GetTick>
 8002808:	0003      	movs	r3, r0
 800280a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800280c:	201b      	movs	r0, #27
 800280e:	183b      	adds	r3, r7, r0
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	215d      	movs	r1, #93	; 0x5d
 8002814:	5c52      	ldrb	r2, [r2, r1]
 8002816:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800281e:	2312      	movs	r3, #18
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	1cba      	adds	r2, r7, #2
 8002824:	8812      	ldrh	r2, [r2, #0]
 8002826:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002828:	183b      	adds	r3, r7, r0
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d011      	beq.n	8002854 <HAL_SPI_TransmitReceive+0x84>
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	2382      	movs	r3, #130	; 0x82
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	429a      	cmp	r2, r3
 8002838:	d107      	bne.n	800284a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d103      	bne.n	800284a <HAL_SPI_TransmitReceive+0x7a>
 8002842:	183b      	adds	r3, r7, r0
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b04      	cmp	r3, #4
 8002848:	d004      	beq.n	8002854 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800284a:	2323      	movs	r3, #35	; 0x23
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	2202      	movs	r2, #2
 8002850:	701a      	strb	r2, [r3, #0]
    goto error;
 8002852:	e17e      	b.n	8002b52 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d006      	beq.n	8002868 <HAL_SPI_TransmitReceive+0x98>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_SPI_TransmitReceive+0x98>
 8002860:	1cbb      	adds	r3, r7, #2
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d104      	bne.n	8002872 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002868:	2323      	movs	r3, #35	; 0x23
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002870:	e16f      	b.n	8002b52 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	225d      	movs	r2, #93	; 0x5d
 8002876:	5c9b      	ldrb	r3, [r3, r2]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b04      	cmp	r3, #4
 800287c:	d003      	beq.n	8002886 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	225d      	movs	r2, #93	; 0x5d
 8002882:	2105      	movs	r1, #5
 8002884:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1cba      	adds	r2, r7, #2
 8002896:	2146      	movs	r1, #70	; 0x46
 8002898:	8812      	ldrh	r2, [r2, #0]
 800289a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1cba      	adds	r2, r7, #2
 80028a0:	2144      	movs	r1, #68	; 0x44
 80028a2:	8812      	ldrh	r2, [r2, #0]
 80028a4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	1cba      	adds	r2, r7, #2
 80028b0:	8812      	ldrh	r2, [r2, #0]
 80028b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1cba      	adds	r2, r7, #2
 80028b8:	8812      	ldrh	r2, [r2, #0]
 80028ba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	23e0      	movs	r3, #224	; 0xe0
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d908      	bls.n	80028e6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	49a4      	ldr	r1, [pc, #656]	; (8002b70 <HAL_SPI_TransmitReceive+0x3a0>)
 80028e0:	400a      	ands	r2, r1
 80028e2:	605a      	str	r2, [r3, #4]
 80028e4:	e008      	b.n	80028f8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2180      	movs	r1, #128	; 0x80
 80028f2:	0149      	lsls	r1, r1, #5
 80028f4:	430a      	orrs	r2, r1
 80028f6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2240      	movs	r2, #64	; 0x40
 8002900:	4013      	ands	r3, r2
 8002902:	2b40      	cmp	r3, #64	; 0x40
 8002904:	d007      	beq.n	8002916 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2140      	movs	r1, #64	; 0x40
 8002912:	430a      	orrs	r2, r1
 8002914:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	23e0      	movs	r3, #224	; 0xe0
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	429a      	cmp	r2, r3
 8002920:	d800      	bhi.n	8002924 <HAL_SPI_TransmitReceive+0x154>
 8002922:	e07f      	b.n	8002a24 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_SPI_TransmitReceive+0x168>
 800292c:	2312      	movs	r3, #18
 800292e:	18fb      	adds	r3, r7, r3
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d000      	beq.n	8002938 <HAL_SPI_TransmitReceive+0x168>
 8002936:	e069      	b.n	8002a0c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293c:	881a      	ldrh	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002948:	1c9a      	adds	r2, r3, #2
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800295c:	e056      	b.n	8002a0c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2202      	movs	r2, #2
 8002966:	4013      	ands	r3, r2
 8002968:	2b02      	cmp	r3, #2
 800296a:	d11b      	bne.n	80029a4 <HAL_SPI_TransmitReceive+0x1d4>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d016      	beq.n	80029a4 <HAL_SPI_TransmitReceive+0x1d4>
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	2b01      	cmp	r3, #1
 800297a:	d113      	bne.n	80029a4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002980:	881a      	ldrh	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298c:	1c9a      	adds	r2, r3, #2
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2201      	movs	r2, #1
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d11c      	bne.n	80029ec <HAL_SPI_TransmitReceive+0x21c>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2246      	movs	r2, #70	; 0x46
 80029b6:	5a9b      	ldrh	r3, [r3, r2]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d016      	beq.n	80029ec <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	b292      	uxth	r2, r2
 80029ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	1c9a      	adds	r2, r3, #2
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2246      	movs	r2, #70	; 0x46
 80029da:	5a9b      	ldrh	r3, [r3, r2]
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b299      	uxth	r1, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2246      	movs	r2, #70	; 0x46
 80029e6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029e8:	2301      	movs	r3, #1
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029ec:	f7fe faa0 	bl	8000f30 <HAL_GetTick>
 80029f0:	0002      	movs	r2, r0
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d807      	bhi.n	8002a0c <HAL_SPI_TransmitReceive+0x23c>
 80029fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fe:	3301      	adds	r3, #1
 8002a00:	d004      	beq.n	8002a0c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8002a02:	2323      	movs	r3, #35	; 0x23
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	2203      	movs	r2, #3
 8002a08:	701a      	strb	r2, [r3, #0]
        goto error;
 8002a0a:	e0a2      	b.n	8002b52 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1a3      	bne.n	800295e <HAL_SPI_TransmitReceive+0x18e>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2246      	movs	r2, #70	; 0x46
 8002a1a:	5a9b      	ldrh	r3, [r3, r2]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d19d      	bne.n	800295e <HAL_SPI_TransmitReceive+0x18e>
 8002a22:	e085      	b.n	8002b30 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_SPI_TransmitReceive+0x268>
 8002a2c:	2312      	movs	r3, #18
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d000      	beq.n	8002a38 <HAL_SPI_TransmitReceive+0x268>
 8002a36:	e070      	b.n	8002b1a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	330c      	adds	r3, #12
 8002a42:	7812      	ldrb	r2, [r2, #0]
 8002a44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a5e:	e05c      	b.n	8002b1a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2202      	movs	r2, #2
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d11c      	bne.n	8002aa8 <HAL_SPI_TransmitReceive+0x2d8>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d017      	beq.n	8002aa8 <HAL_SPI_TransmitReceive+0x2d8>
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d114      	bne.n	8002aa8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	330c      	adds	r3, #12
 8002a88:	7812      	ldrb	r2, [r2, #0]
 8002a8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d11e      	bne.n	8002af4 <HAL_SPI_TransmitReceive+0x324>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2246      	movs	r2, #70	; 0x46
 8002aba:	5a9b      	ldrh	r3, [r3, r2]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d018      	beq.n	8002af4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	330c      	adds	r3, #12
 8002ac8:	001a      	movs	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	7812      	ldrb	r2, [r2, #0]
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2246      	movs	r2, #70	; 0x46
 8002ae2:	5a9b      	ldrh	r3, [r3, r2]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b299      	uxth	r1, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2246      	movs	r2, #70	; 0x46
 8002aee:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002af0:	2301      	movs	r3, #1
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002af4:	f7fe fa1c 	bl	8000f30 <HAL_GetTick>
 8002af8:	0002      	movs	r2, r0
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d802      	bhi.n	8002b0a <HAL_SPI_TransmitReceive+0x33a>
 8002b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b06:	3301      	adds	r3, #1
 8002b08:	d102      	bne.n	8002b10 <HAL_SPI_TransmitReceive+0x340>
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d104      	bne.n	8002b1a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8002b10:	2323      	movs	r3, #35	; 0x23
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	2203      	movs	r2, #3
 8002b16:	701a      	strb	r2, [r3, #0]
        goto error;
 8002b18:	e01b      	b.n	8002b52 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d19d      	bne.n	8002a60 <HAL_SPI_TransmitReceive+0x290>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2246      	movs	r2, #70	; 0x46
 8002b28:	5a9b      	ldrh	r3, [r3, r2]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d197      	bne.n	8002a60 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b30:	69fa      	ldr	r2, [r7, #28]
 8002b32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	0018      	movs	r0, r3
 8002b38:	f000 f9aa 	bl	8002e90 <SPI_EndRxTxTransaction>
 8002b3c:	1e03      	subs	r3, r0, #0
 8002b3e:	d007      	beq.n	8002b50 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8002b40:	2323      	movs	r3, #35	; 0x23
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	661a      	str	r2, [r3, #96]	; 0x60
 8002b4e:	e000      	b.n	8002b52 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8002b50:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	225d      	movs	r2, #93	; 0x5d
 8002b56:	2101      	movs	r1, #1
 8002b58:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	225c      	movs	r2, #92	; 0x5c
 8002b5e:	2100      	movs	r1, #0
 8002b60:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002b62:	2323      	movs	r3, #35	; 0x23
 8002b64:	18fb      	adds	r3, r7, r3
 8002b66:	781b      	ldrb	r3, [r3, #0]
}
 8002b68:	0018      	movs	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	b00a      	add	sp, #40	; 0x28
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	ffffefff 	.word	0xffffefff

08002b74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	1dfb      	adds	r3, r7, #7
 8002b82:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b84:	f7fe f9d4 	bl	8000f30 <HAL_GetTick>
 8002b88:	0002      	movs	r2, r0
 8002b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	18d3      	adds	r3, r2, r3
 8002b92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b94:	f7fe f9cc 	bl	8000f30 <HAL_GetTick>
 8002b98:	0003      	movs	r3, r0
 8002b9a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b9c:	4b3a      	ldr	r3, [pc, #232]	; (8002c88 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	015b      	lsls	r3, r3, #5
 8002ba2:	0d1b      	lsrs	r3, r3, #20
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	4353      	muls	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002baa:	e058      	b.n	8002c5e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	d055      	beq.n	8002c5e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bb2:	f7fe f9bd 	bl	8000f30 <HAL_GetTick>
 8002bb6:	0002      	movs	r2, r0
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d902      	bls.n	8002bc8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d142      	bne.n	8002c4e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	21e0      	movs	r1, #224	; 0xe0
 8002bd4:	438a      	bics	r2, r1
 8002bd6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	2382      	movs	r3, #130	; 0x82
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d113      	bne.n	8002c0c <SPI_WaitFlagStateUntilTimeout+0x98>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d005      	beq.n	8002bfc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d107      	bne.n	8002c0c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2140      	movs	r1, #64	; 0x40
 8002c08:	438a      	bics	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	019b      	lsls	r3, r3, #6
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d110      	bne.n	8002c3a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	491a      	ldr	r1, [pc, #104]	; (8002c8c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002c24:	400a      	ands	r2, r1
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2180      	movs	r1, #128	; 0x80
 8002c34:	0189      	lsls	r1, r1, #6
 8002c36:	430a      	orrs	r2, r1
 8002c38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	225d      	movs	r2, #93	; 0x5d
 8002c3e:	2101      	movs	r1, #1
 8002c40:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	225c      	movs	r2, #92	; 0x5c
 8002c46:	2100      	movs	r1, #0
 8002c48:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e017      	b.n	8002c7e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	4013      	ands	r3, r2
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	425a      	negs	r2, r3
 8002c6e:	4153      	adcs	r3, r2
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	001a      	movs	r2, r3
 8002c74:	1dfb      	adds	r3, r7, #7
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d197      	bne.n	8002bac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	0018      	movs	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	b008      	add	sp, #32
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	20000014 	.word	0x20000014
 8002c8c:	ffffdfff 	.word	0xffffdfff

08002c90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	; 0x28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002c9e:	2317      	movs	r3, #23
 8002ca0:	18fb      	adds	r3, r7, r3
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002ca6:	f7fe f943 	bl	8000f30 <HAL_GetTick>
 8002caa:	0002      	movs	r2, r0
 8002cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	18d3      	adds	r3, r2, r3
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002cb6:	f7fe f93b 	bl	8000f30 <HAL_GetTick>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	330c      	adds	r3, #12
 8002cc4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002cc6:	4b41      	ldr	r3, [pc, #260]	; (8002dcc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	0013      	movs	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	189b      	adds	r3, r3, r2
 8002cd0:	00da      	lsls	r2, r3, #3
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	0d1b      	lsrs	r3, r3, #20
 8002cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd8:	4353      	muls	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002cdc:	e068      	b.n	8002db0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	23c0      	movs	r3, #192	; 0xc0
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d10a      	bne.n	8002cfe <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d107      	bne.n	8002cfe <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	2117      	movs	r1, #23
 8002cf6:	187b      	adds	r3, r7, r1
 8002cf8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002cfa:	187b      	adds	r3, r7, r1
 8002cfc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	3301      	adds	r3, #1
 8002d02:	d055      	beq.n	8002db0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d04:	f7fe f914 	bl	8000f30 <HAL_GetTick>
 8002d08:	0002      	movs	r2, r0
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d902      	bls.n	8002d1a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d142      	bne.n	8002da0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	21e0      	movs	r1, #224	; 0xe0
 8002d26:	438a      	bics	r2, r1
 8002d28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	2382      	movs	r3, #130	; 0x82
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d113      	bne.n	8002d5e <SPI_WaitFifoStateUntilTimeout+0xce>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	021b      	lsls	r3, r3, #8
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d005      	beq.n	8002d4e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	2380      	movs	r3, #128	; 0x80
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d107      	bne.n	8002d5e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2140      	movs	r1, #64	; 0x40
 8002d5a:	438a      	bics	r2, r1
 8002d5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d62:	2380      	movs	r3, #128	; 0x80
 8002d64:	019b      	lsls	r3, r3, #6
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d110      	bne.n	8002d8c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4916      	ldr	r1, [pc, #88]	; (8002dd0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002d76:	400a      	ands	r2, r1
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2180      	movs	r1, #128	; 0x80
 8002d86:	0189      	lsls	r1, r1, #6
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	225d      	movs	r2, #93	; 0x5d
 8002d90:	2101      	movs	r1, #1
 8002d92:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	225c      	movs	r2, #92	; 0x5c
 8002d98:	2100      	movs	r1, #0
 8002d9a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e010      	b.n	8002dc2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	4013      	ands	r3, r2
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d18e      	bne.n	8002cde <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b00a      	add	sp, #40	; 0x28
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	20000014 	.word	0x20000014
 8002dd0:	ffffdfff 	.word	0xffffdfff

08002dd4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	2382      	movs	r3, #130	; 0x82
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d113      	bne.n	8002e14 <SPI_EndRxTransaction+0x40>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d005      	beq.n	8002e04 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	2380      	movs	r3, #128	; 0x80
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d107      	bne.n	8002e14 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2140      	movs	r1, #64	; 0x40
 8002e10:	438a      	bics	r2, r1
 8002e12:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	0013      	movs	r3, r2
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2180      	movs	r1, #128	; 0x80
 8002e22:	f7ff fea7 	bl	8002b74 <SPI_WaitFlagStateUntilTimeout>
 8002e26:	1e03      	subs	r3, r0, #0
 8002e28:	d007      	beq.n	8002e3a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e2e:	2220      	movs	r2, #32
 8002e30:	431a      	orrs	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e026      	b.n	8002e88 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	2382      	movs	r3, #130	; 0x82
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d11f      	bne.n	8002e86 <SPI_EndRxTransaction+0xb2>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	2380      	movs	r3, #128	; 0x80
 8002e4c:	021b      	lsls	r3, r3, #8
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d005      	beq.n	8002e5e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d113      	bne.n	8002e86 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	23c0      	movs	r3, #192	; 0xc0
 8002e62:	00d9      	lsls	r1, r3, #3
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	0013      	movs	r3, r2
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f7ff ff0f 	bl	8002c90 <SPI_WaitFifoStateUntilTimeout>
 8002e72:	1e03      	subs	r3, r0, #0
 8002e74:	d007      	beq.n	8002e86 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e000      	b.n	8002e88 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	0018      	movs	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	b004      	add	sp, #16
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	23c0      	movs	r3, #192	; 0xc0
 8002ea0:	0159      	lsls	r1, r3, #5
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	0013      	movs	r3, r2
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f7ff fef0 	bl	8002c90 <SPI_WaitFifoStateUntilTimeout>
 8002eb0:	1e03      	subs	r3, r0, #0
 8002eb2:	d007      	beq.n	8002ec4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb8:	2220      	movs	r2, #32
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e027      	b.n	8002f14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	0013      	movs	r3, r2
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2180      	movs	r1, #128	; 0x80
 8002ed2:	f7ff fe4f 	bl	8002b74 <SPI_WaitFlagStateUntilTimeout>
 8002ed6:	1e03      	subs	r3, r0, #0
 8002ed8:	d007      	beq.n	8002eea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ede:	2220      	movs	r2, #32
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e014      	b.n	8002f14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	23c0      	movs	r3, #192	; 0xc0
 8002eee:	00d9      	lsls	r1, r3, #3
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	0013      	movs	r3, r2
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f7ff fec9 	bl	8002c90 <SPI_WaitFifoStateUntilTimeout>
 8002efe:	1e03      	subs	r3, r0, #0
 8002f00:	d007      	beq.n	8002f12 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f06:	2220      	movs	r2, #32
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e000      	b.n	8002f14 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b004      	add	sp, #16
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e046      	b.n	8002fbc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2284      	movs	r2, #132	; 0x84
 8002f32:	589b      	ldr	r3, [r3, r2]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d107      	bne.n	8002f48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2280      	movs	r2, #128	; 0x80
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	0018      	movs	r0, r3
 8002f44:	f7fd fe7c 	bl	8000c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2284      	movs	r2, #132	; 0x84
 8002f4c:	2124      	movs	r1, #36	; 0x24
 8002f4e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	438a      	bics	r2, r1
 8002f5e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	0018      	movs	r0, r3
 8002f64:	f000 f9ce 	bl	8003304 <UART_SetConfig>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e024      	b.n	8002fbc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f000 fc51 	bl	8003824 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	490d      	ldr	r1, [pc, #52]	; (8002fc4 <HAL_UART_Init+0xa8>)
 8002f8e:	400a      	ands	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	212a      	movs	r1, #42	; 0x2a
 8002f9e:	438a      	bics	r2, r1
 8002fa0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2101      	movs	r1, #1
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f000 fce9 	bl	800398c <UART_CheckIdleState>
 8002fba:	0003      	movs	r3, r0
}
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b002      	add	sp, #8
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	ffffb7ff 	.word	0xffffb7ff

08002fc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	; 0x28
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	1dbb      	adds	r3, r7, #6
 8002fd6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2284      	movs	r2, #132	; 0x84
 8002fdc:	589b      	ldr	r3, [r3, r2]
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	d000      	beq.n	8002fe4 <HAL_UART_Transmit+0x1c>
 8002fe2:	e097      	b.n	8003114 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_UART_Transmit+0x2a>
 8002fea:	1dbb      	adds	r3, r7, #6
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e08f      	b.n	8003116 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	015b      	lsls	r3, r3, #5
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d109      	bne.n	8003016 <HAL_UART_Transmit+0x4e>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d105      	bne.n	8003016 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2201      	movs	r2, #1
 800300e:	4013      	ands	r3, r2
 8003010:	d001      	beq.n	8003016 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e07f      	b.n	8003116 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2280      	movs	r2, #128	; 0x80
 800301a:	5c9b      	ldrb	r3, [r3, r2]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_UART_Transmit+0x5c>
 8003020:	2302      	movs	r3, #2
 8003022:	e078      	b.n	8003116 <HAL_UART_Transmit+0x14e>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2280      	movs	r2, #128	; 0x80
 8003028:	2101      	movs	r1, #1
 800302a:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	228c      	movs	r2, #140	; 0x8c
 8003030:	2100      	movs	r1, #0
 8003032:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2284      	movs	r2, #132	; 0x84
 8003038:	2121      	movs	r1, #33	; 0x21
 800303a:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800303c:	f7fd ff78 	bl	8000f30 <HAL_GetTick>
 8003040:	0003      	movs	r3, r0
 8003042:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1dba      	adds	r2, r7, #6
 8003048:	2154      	movs	r1, #84	; 0x54
 800304a:	8812      	ldrh	r2, [r2, #0]
 800304c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1dba      	adds	r2, r7, #6
 8003052:	2156      	movs	r1, #86	; 0x56
 8003054:	8812      	ldrh	r2, [r2, #0]
 8003056:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	2380      	movs	r3, #128	; 0x80
 800305e:	015b      	lsls	r3, r3, #5
 8003060:	429a      	cmp	r2, r3
 8003062:	d108      	bne.n	8003076 <HAL_UART_Transmit+0xae>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d104      	bne.n	8003076 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 800306c:	2300      	movs	r3, #0
 800306e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	61bb      	str	r3, [r7, #24]
 8003074:	e003      	b.n	800307e <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800307a:	2300      	movs	r3, #0
 800307c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2280      	movs	r2, #128	; 0x80
 8003082:	2100      	movs	r1, #0
 8003084:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003086:	e02c      	b.n	80030e2 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	0013      	movs	r3, r2
 8003092:	2200      	movs	r2, #0
 8003094:	2180      	movs	r1, #128	; 0x80
 8003096:	f000 fcc3 	bl	8003a20 <UART_WaitOnFlagUntilTimeout>
 800309a:	1e03      	subs	r3, r0, #0
 800309c:	d001      	beq.n	80030a2 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e039      	b.n	8003116 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10b      	bne.n	80030c0 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	001a      	movs	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	05d2      	lsls	r2, r2, #23
 80030b4:	0dd2      	lsrs	r2, r2, #23
 80030b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	3302      	adds	r3, #2
 80030bc:	61bb      	str	r3, [r7, #24]
 80030be:	e007      	b.n	80030d0 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	781a      	ldrb	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3301      	adds	r3, #1
 80030ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2256      	movs	r2, #86	; 0x56
 80030d4:	5a9b      	ldrh	r3, [r3, r2]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b299      	uxth	r1, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2256      	movs	r2, #86	; 0x56
 80030e0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2256      	movs	r2, #86	; 0x56
 80030e6:	5a9b      	ldrh	r3, [r3, r2]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1cc      	bne.n	8003088 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	0013      	movs	r3, r2
 80030f8:	2200      	movs	r2, #0
 80030fa:	2140      	movs	r1, #64	; 0x40
 80030fc:	f000 fc90 	bl	8003a20 <UART_WaitOnFlagUntilTimeout>
 8003100:	1e03      	subs	r3, r0, #0
 8003102:	d001      	beq.n	8003108 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e006      	b.n	8003116 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2284      	movs	r2, #132	; 0x84
 800310c:	2120      	movs	r1, #32
 800310e:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	e000      	b.n	8003116 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8003114:	2302      	movs	r3, #2
  }
}
 8003116:	0018      	movs	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	b008      	add	sp, #32
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08a      	sub	sp, #40	; 0x28
 8003124:	af02      	add	r7, sp, #8
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	1dbb      	adds	r3, r7, #6
 800312e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2288      	movs	r2, #136	; 0x88
 8003134:	589b      	ldr	r3, [r3, r2]
 8003136:	2b20      	cmp	r3, #32
 8003138:	d000      	beq.n	800313c <HAL_UART_Receive+0x1c>
 800313a:	e0db      	b.n	80032f4 <HAL_UART_Receive+0x1d4>
  {
    if ((pData == NULL) || (Size == 0U))
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_UART_Receive+0x2a>
 8003142:	1dbb      	adds	r3, r7, #6
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e0d3      	b.n	80032f6 <HAL_UART_Receive+0x1d6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	2380      	movs	r3, #128	; 0x80
 8003154:	015b      	lsls	r3, r3, #5
 8003156:	429a      	cmp	r2, r3
 8003158:	d109      	bne.n	800316e <HAL_UART_Receive+0x4e>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d105      	bne.n	800316e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2201      	movs	r2, #1
 8003166:	4013      	ands	r3, r2
 8003168:	d001      	beq.n	800316e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0c3      	b.n	80032f6 <HAL_UART_Receive+0x1d6>
      }
    }

    __HAL_LOCK(huart);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2280      	movs	r2, #128	; 0x80
 8003172:	5c9b      	ldrb	r3, [r3, r2]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_UART_Receive+0x5c>
 8003178:	2302      	movs	r3, #2
 800317a:	e0bc      	b.n	80032f6 <HAL_UART_Receive+0x1d6>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2280      	movs	r2, #128	; 0x80
 8003180:	2101      	movs	r1, #1
 8003182:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	228c      	movs	r2, #140	; 0x8c
 8003188:	2100      	movs	r1, #0
 800318a:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2288      	movs	r2, #136	; 0x88
 8003190:	2122      	movs	r1, #34	; 0x22
 8003192:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800319a:	f7fd fec9 	bl	8000f30 <HAL_GetTick>
 800319e:	0003      	movs	r3, r0
 80031a0:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1dba      	adds	r2, r7, #6
 80031a6:	215c      	movs	r1, #92	; 0x5c
 80031a8:	8812      	ldrh	r2, [r2, #0]
 80031aa:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1dba      	adds	r2, r7, #6
 80031b0:	215e      	movs	r1, #94	; 0x5e
 80031b2:	8812      	ldrh	r2, [r2, #0]
 80031b4:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	2380      	movs	r3, #128	; 0x80
 80031bc:	015b      	lsls	r3, r3, #5
 80031be:	429a      	cmp	r2, r3
 80031c0:	d10d      	bne.n	80031de <HAL_UART_Receive+0xbe>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d104      	bne.n	80031d4 <HAL_UART_Receive+0xb4>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2260      	movs	r2, #96	; 0x60
 80031ce:	494c      	ldr	r1, [pc, #304]	; (8003300 <HAL_UART_Receive+0x1e0>)
 80031d0:	5299      	strh	r1, [r3, r2]
 80031d2:	e02e      	b.n	8003232 <HAL_UART_Receive+0x112>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2260      	movs	r2, #96	; 0x60
 80031d8:	21ff      	movs	r1, #255	; 0xff
 80031da:	5299      	strh	r1, [r3, r2]
 80031dc:	e029      	b.n	8003232 <HAL_UART_Receive+0x112>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10d      	bne.n	8003202 <HAL_UART_Receive+0xe2>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d104      	bne.n	80031f8 <HAL_UART_Receive+0xd8>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2260      	movs	r2, #96	; 0x60
 80031f2:	21ff      	movs	r1, #255	; 0xff
 80031f4:	5299      	strh	r1, [r3, r2]
 80031f6:	e01c      	b.n	8003232 <HAL_UART_Receive+0x112>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2260      	movs	r2, #96	; 0x60
 80031fc:	217f      	movs	r1, #127	; 0x7f
 80031fe:	5299      	strh	r1, [r3, r2]
 8003200:	e017      	b.n	8003232 <HAL_UART_Receive+0x112>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	2380      	movs	r3, #128	; 0x80
 8003208:	055b      	lsls	r3, r3, #21
 800320a:	429a      	cmp	r2, r3
 800320c:	d10d      	bne.n	800322a <HAL_UART_Receive+0x10a>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d104      	bne.n	8003220 <HAL_UART_Receive+0x100>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2260      	movs	r2, #96	; 0x60
 800321a:	217f      	movs	r1, #127	; 0x7f
 800321c:	5299      	strh	r1, [r3, r2]
 800321e:	e008      	b.n	8003232 <HAL_UART_Receive+0x112>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2260      	movs	r2, #96	; 0x60
 8003224:	213f      	movs	r1, #63	; 0x3f
 8003226:	5299      	strh	r1, [r3, r2]
 8003228:	e003      	b.n	8003232 <HAL_UART_Receive+0x112>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2260      	movs	r2, #96	; 0x60
 800322e:	2100      	movs	r1, #0
 8003230:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003232:	2312      	movs	r3, #18
 8003234:	18fb      	adds	r3, r7, r3
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	2160      	movs	r1, #96	; 0x60
 800323a:	5a52      	ldrh	r2, [r2, r1]
 800323c:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	2380      	movs	r3, #128	; 0x80
 8003244:	015b      	lsls	r3, r3, #5
 8003246:	429a      	cmp	r2, r3
 8003248:	d108      	bne.n	800325c <HAL_UART_Receive+0x13c>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d104      	bne.n	800325c <HAL_UART_Receive+0x13c>
    {
      pdata8bits  = NULL;
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	61bb      	str	r3, [r7, #24]
 800325a:	e003      	b.n	8003264 <HAL_UART_Receive+0x144>
    }
    else
    {
      pdata8bits  = pData;
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003260:	2300      	movs	r3, #0
 8003262:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2280      	movs	r2, #128	; 0x80
 8003268:	2100      	movs	r1, #0
 800326a:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800326c:	e036      	b.n	80032dc <HAL_UART_Receive+0x1bc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	0013      	movs	r3, r2
 8003278:	2200      	movs	r2, #0
 800327a:	2120      	movs	r1, #32
 800327c:	f000 fbd0 	bl	8003a20 <UART_WaitOnFlagUntilTimeout>
 8003280:	1e03      	subs	r3, r0, #0
 8003282:	d001      	beq.n	8003288 <HAL_UART_Receive+0x168>
      {
        return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e036      	b.n	80032f6 <HAL_UART_Receive+0x1d6>
      }
      if (pdata8bits == NULL)
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10e      	bne.n	80032ac <HAL_UART_Receive+0x18c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	b29b      	uxth	r3, r3
 8003296:	2212      	movs	r2, #18
 8003298:	18ba      	adds	r2, r7, r2
 800329a:	8812      	ldrh	r2, [r2, #0]
 800329c:	4013      	ands	r3, r2
 800329e:	b29a      	uxth	r2, r3
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	3302      	adds	r3, #2
 80032a8:	61bb      	str	r3, [r7, #24]
 80032aa:	e00e      	b.n	80032ca <HAL_UART_Receive+0x1aa>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2212      	movs	r2, #18
 80032b6:	18ba      	adds	r2, r7, r2
 80032b8:	8812      	ldrh	r2, [r2, #0]
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	4013      	ands	r3, r2
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	3301      	adds	r3, #1
 80032c8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	225e      	movs	r2, #94	; 0x5e
 80032ce:	5a9b      	ldrh	r3, [r3, r2]
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b299      	uxth	r1, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	225e      	movs	r2, #94	; 0x5e
 80032da:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	225e      	movs	r2, #94	; 0x5e
 80032e0:	5a9b      	ldrh	r3, [r3, r2]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1c2      	bne.n	800326e <HAL_UART_Receive+0x14e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2288      	movs	r2, #136	; 0x88
 80032ec:	2120      	movs	r1, #32
 80032ee:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	e000      	b.n	80032f6 <HAL_UART_Receive+0x1d6>
  }
  else
  {
    return HAL_BUSY;
 80032f4:	2302      	movs	r3, #2
  }
}
 80032f6:	0018      	movs	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	b008      	add	sp, #32
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	000001ff 	.word	0x000001ff

08003304 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003304:	b5b0      	push	{r4, r5, r7, lr}
 8003306:	b090      	sub	sp, #64	; 0x40
 8003308:	af00      	add	r7, sp, #0
 800330a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800330c:	231a      	movs	r3, #26
 800330e:	2220      	movs	r2, #32
 8003310:	4694      	mov	ip, r2
 8003312:	44bc      	add	ip, r7
 8003314:	4463      	add	r3, ip
 8003316:	2200      	movs	r2, #0
 8003318:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	431a      	orrs	r2, r3
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	431a      	orrs	r2, r3
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	4313      	orrs	r3, r2
 8003330:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4ac7      	ldr	r2, [pc, #796]	; (8003658 <UART_SetConfig+0x354>)
 800333a:	4013      	ands	r3, r2
 800333c:	0019      	movs	r1, r3
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003344:	430b      	orrs	r3, r1
 8003346:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	4ac3      	ldr	r2, [pc, #780]	; (800365c <UART_SetConfig+0x358>)
 8003350:	4013      	ands	r3, r2
 8003352:	0018      	movs	r0, r3
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	68d9      	ldr	r1, [r3, #12]
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	0003      	movs	r3, r0
 800335e:	430b      	orrs	r3, r1
 8003360:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4abc      	ldr	r2, [pc, #752]	; (8003660 <UART_SetConfig+0x35c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d004      	beq.n	800337c <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003378:	4313      	orrs	r3, r2
 800337a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	4ab8      	ldr	r2, [pc, #736]	; (8003664 <UART_SetConfig+0x360>)
 8003384:	4013      	ands	r3, r2
 8003386:	0019      	movs	r1, r3
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800338e:	430b      	orrs	r3, r1
 8003390:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	220f      	movs	r2, #15
 800339a:	4393      	bics	r3, r2
 800339c:	0018      	movs	r0, r3
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	0003      	movs	r3, r0
 80033a8:	430b      	orrs	r3, r1
 80033aa:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4aad      	ldr	r2, [pc, #692]	; (8003668 <UART_SetConfig+0x364>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d136      	bne.n	8003424 <UART_SetConfig+0x120>
 80033b6:	4bad      	ldr	r3, [pc, #692]	; (800366c <UART_SetConfig+0x368>)
 80033b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ba:	2203      	movs	r2, #3
 80033bc:	4013      	ands	r3, r2
 80033be:	2b03      	cmp	r3, #3
 80033c0:	d020      	beq.n	8003404 <UART_SetConfig+0x100>
 80033c2:	d827      	bhi.n	8003414 <UART_SetConfig+0x110>
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d00d      	beq.n	80033e4 <UART_SetConfig+0xe0>
 80033c8:	d824      	bhi.n	8003414 <UART_SetConfig+0x110>
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <UART_SetConfig+0xd0>
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d010      	beq.n	80033f4 <UART_SetConfig+0xf0>
 80033d2:	e01f      	b.n	8003414 <UART_SetConfig+0x110>
 80033d4:	231b      	movs	r3, #27
 80033d6:	2220      	movs	r2, #32
 80033d8:	4694      	mov	ip, r2
 80033da:	44bc      	add	ip, r7
 80033dc:	4463      	add	r3, ip
 80033de:	2200      	movs	r2, #0
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	e07c      	b.n	80034de <UART_SetConfig+0x1da>
 80033e4:	231b      	movs	r3, #27
 80033e6:	2220      	movs	r2, #32
 80033e8:	4694      	mov	ip, r2
 80033ea:	44bc      	add	ip, r7
 80033ec:	4463      	add	r3, ip
 80033ee:	2202      	movs	r2, #2
 80033f0:	701a      	strb	r2, [r3, #0]
 80033f2:	e074      	b.n	80034de <UART_SetConfig+0x1da>
 80033f4:	231b      	movs	r3, #27
 80033f6:	2220      	movs	r2, #32
 80033f8:	4694      	mov	ip, r2
 80033fa:	44bc      	add	ip, r7
 80033fc:	4463      	add	r3, ip
 80033fe:	2204      	movs	r2, #4
 8003400:	701a      	strb	r2, [r3, #0]
 8003402:	e06c      	b.n	80034de <UART_SetConfig+0x1da>
 8003404:	231b      	movs	r3, #27
 8003406:	2220      	movs	r2, #32
 8003408:	4694      	mov	ip, r2
 800340a:	44bc      	add	ip, r7
 800340c:	4463      	add	r3, ip
 800340e:	2208      	movs	r2, #8
 8003410:	701a      	strb	r2, [r3, #0]
 8003412:	e064      	b.n	80034de <UART_SetConfig+0x1da>
 8003414:	231b      	movs	r3, #27
 8003416:	2220      	movs	r2, #32
 8003418:	4694      	mov	ip, r2
 800341a:	44bc      	add	ip, r7
 800341c:	4463      	add	r3, ip
 800341e:	2210      	movs	r2, #16
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	e05c      	b.n	80034de <UART_SetConfig+0x1da>
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a91      	ldr	r2, [pc, #580]	; (8003670 <UART_SetConfig+0x36c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d107      	bne.n	800343e <UART_SetConfig+0x13a>
 800342e:	231b      	movs	r3, #27
 8003430:	2220      	movs	r2, #32
 8003432:	4694      	mov	ip, r2
 8003434:	44bc      	add	ip, r7
 8003436:	4463      	add	r3, ip
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
 800343c:	e04f      	b.n	80034de <UART_SetConfig+0x1da>
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a87      	ldr	r2, [pc, #540]	; (8003660 <UART_SetConfig+0x35c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d143      	bne.n	80034d0 <UART_SetConfig+0x1cc>
 8003448:	4b88      	ldr	r3, [pc, #544]	; (800366c <UART_SetConfig+0x368>)
 800344a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800344c:	23c0      	movs	r3, #192	; 0xc0
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	4013      	ands	r3, r2
 8003452:	22c0      	movs	r2, #192	; 0xc0
 8003454:	0112      	lsls	r2, r2, #4
 8003456:	4293      	cmp	r3, r2
 8003458:	d02a      	beq.n	80034b0 <UART_SetConfig+0x1ac>
 800345a:	22c0      	movs	r2, #192	; 0xc0
 800345c:	0112      	lsls	r2, r2, #4
 800345e:	4293      	cmp	r3, r2
 8003460:	d82e      	bhi.n	80034c0 <UART_SetConfig+0x1bc>
 8003462:	2280      	movs	r2, #128	; 0x80
 8003464:	0112      	lsls	r2, r2, #4
 8003466:	4293      	cmp	r3, r2
 8003468:	d012      	beq.n	8003490 <UART_SetConfig+0x18c>
 800346a:	2280      	movs	r2, #128	; 0x80
 800346c:	0112      	lsls	r2, r2, #4
 800346e:	4293      	cmp	r3, r2
 8003470:	d826      	bhi.n	80034c0 <UART_SetConfig+0x1bc>
 8003472:	2b00      	cmp	r3, #0
 8003474:	d004      	beq.n	8003480 <UART_SetConfig+0x17c>
 8003476:	2280      	movs	r2, #128	; 0x80
 8003478:	00d2      	lsls	r2, r2, #3
 800347a:	4293      	cmp	r3, r2
 800347c:	d010      	beq.n	80034a0 <UART_SetConfig+0x19c>
 800347e:	e01f      	b.n	80034c0 <UART_SetConfig+0x1bc>
 8003480:	231b      	movs	r3, #27
 8003482:	2220      	movs	r2, #32
 8003484:	4694      	mov	ip, r2
 8003486:	44bc      	add	ip, r7
 8003488:	4463      	add	r3, ip
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]
 800348e:	e026      	b.n	80034de <UART_SetConfig+0x1da>
 8003490:	231b      	movs	r3, #27
 8003492:	2220      	movs	r2, #32
 8003494:	4694      	mov	ip, r2
 8003496:	44bc      	add	ip, r7
 8003498:	4463      	add	r3, ip
 800349a:	2202      	movs	r2, #2
 800349c:	701a      	strb	r2, [r3, #0]
 800349e:	e01e      	b.n	80034de <UART_SetConfig+0x1da>
 80034a0:	231b      	movs	r3, #27
 80034a2:	2220      	movs	r2, #32
 80034a4:	4694      	mov	ip, r2
 80034a6:	44bc      	add	ip, r7
 80034a8:	4463      	add	r3, ip
 80034aa:	2204      	movs	r2, #4
 80034ac:	701a      	strb	r2, [r3, #0]
 80034ae:	e016      	b.n	80034de <UART_SetConfig+0x1da>
 80034b0:	231b      	movs	r3, #27
 80034b2:	2220      	movs	r2, #32
 80034b4:	4694      	mov	ip, r2
 80034b6:	44bc      	add	ip, r7
 80034b8:	4463      	add	r3, ip
 80034ba:	2208      	movs	r2, #8
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	e00e      	b.n	80034de <UART_SetConfig+0x1da>
 80034c0:	231b      	movs	r3, #27
 80034c2:	2220      	movs	r2, #32
 80034c4:	4694      	mov	ip, r2
 80034c6:	44bc      	add	ip, r7
 80034c8:	4463      	add	r3, ip
 80034ca:	2210      	movs	r2, #16
 80034cc:	701a      	strb	r2, [r3, #0]
 80034ce:	e006      	b.n	80034de <UART_SetConfig+0x1da>
 80034d0:	231b      	movs	r3, #27
 80034d2:	2220      	movs	r2, #32
 80034d4:	4694      	mov	ip, r2
 80034d6:	44bc      	add	ip, r7
 80034d8:	4463      	add	r3, ip
 80034da:	2210      	movs	r2, #16
 80034dc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a5f      	ldr	r2, [pc, #380]	; (8003660 <UART_SetConfig+0x35c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d000      	beq.n	80034ea <UART_SetConfig+0x1e6>
 80034e8:	e096      	b.n	8003618 <UART_SetConfig+0x314>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034ea:	231b      	movs	r3, #27
 80034ec:	2220      	movs	r2, #32
 80034ee:	4694      	mov	ip, r2
 80034f0:	44bc      	add	ip, r7
 80034f2:	4463      	add	r3, ip
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d015      	beq.n	8003526 <UART_SetConfig+0x222>
 80034fa:	dc18      	bgt.n	800352e <UART_SetConfig+0x22a>
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d00d      	beq.n	800351c <UART_SetConfig+0x218>
 8003500:	dc15      	bgt.n	800352e <UART_SetConfig+0x22a>
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <UART_SetConfig+0x208>
 8003506:	2b02      	cmp	r3, #2
 8003508:	d005      	beq.n	8003516 <UART_SetConfig+0x212>
 800350a:	e010      	b.n	800352e <UART_SetConfig+0x22a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800350c:	f7fe fc74 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 8003510:	0003      	movs	r3, r0
 8003512:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003514:	e015      	b.n	8003542 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003516:	4b57      	ldr	r3, [pc, #348]	; (8003674 <UART_SetConfig+0x370>)
 8003518:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800351a:	e012      	b.n	8003542 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800351c:	f7fe fbe0 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 8003520:	0003      	movs	r3, r0
 8003522:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003524:	e00d      	b.n	8003542 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003526:	2380      	movs	r3, #128	; 0x80
 8003528:	021b      	lsls	r3, r3, #8
 800352a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800352c:	e009      	b.n	8003542 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003532:	231a      	movs	r3, #26
 8003534:	2220      	movs	r2, #32
 8003536:	4694      	mov	ip, r2
 8003538:	44bc      	add	ip, r7
 800353a:	4463      	add	r3, ip
 800353c:	2201      	movs	r2, #1
 800353e:	701a      	strb	r2, [r3, #0]
        break;
 8003540:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003544:	2b00      	cmp	r3, #0
 8003546:	d100      	bne.n	800354a <UART_SetConfig+0x246>
 8003548:	e14f      	b.n	80037ea <UART_SetConfig+0x4e6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800354e:	4b4a      	ldr	r3, [pc, #296]	; (8003678 <UART_SetConfig+0x374>)
 8003550:	0052      	lsls	r2, r2, #1
 8003552:	5ad3      	ldrh	r3, [r2, r3]
 8003554:	0019      	movs	r1, r3
 8003556:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003558:	f7fc fddc 	bl	8000114 <__udivsi3>
 800355c:	0003      	movs	r3, r0
 800355e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	0013      	movs	r3, r2
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	189b      	adds	r3, r3, r2
 800356a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800356c:	429a      	cmp	r2, r3
 800356e:	d305      	bcc.n	800357c <UART_SetConfig+0x278>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003578:	429a      	cmp	r2, r3
 800357a:	d907      	bls.n	800358c <UART_SetConfig+0x288>
      {
        ret = HAL_ERROR;
 800357c:	231a      	movs	r3, #26
 800357e:	2220      	movs	r2, #32
 8003580:	4694      	mov	ip, r2
 8003582:	44bc      	add	ip, r7
 8003584:	4463      	add	r3, ip
 8003586:	2201      	movs	r2, #1
 8003588:	701a      	strb	r2, [r3, #0]
 800358a:	e12e      	b.n	80037ea <UART_SetConfig+0x4e6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800358c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358e:	61bb      	str	r3, [r7, #24]
 8003590:	2300      	movs	r3, #0
 8003592:	61fb      	str	r3, [r7, #28]
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003598:	4b37      	ldr	r3, [pc, #220]	; (8003678 <UART_SetConfig+0x374>)
 800359a:	0052      	lsls	r2, r2, #1
 800359c:	5ad3      	ldrh	r3, [r2, r3]
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	69b8      	ldr	r0, [r7, #24]
 80035aa:	69f9      	ldr	r1, [r7, #28]
 80035ac:	f7fc ff28 	bl	8000400 <__aeabi_uldivmod>
 80035b0:	0002      	movs	r2, r0
 80035b2:	000b      	movs	r3, r1
 80035b4:	0e11      	lsrs	r1, r2, #24
 80035b6:	021d      	lsls	r5, r3, #8
 80035b8:	430d      	orrs	r5, r1
 80035ba:	0214      	lsls	r4, r2, #8
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	085b      	lsrs	r3, r3, #1
 80035c2:	60bb      	str	r3, [r7, #8]
 80035c4:	2300      	movs	r3, #0
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	68b8      	ldr	r0, [r7, #8]
 80035ca:	68f9      	ldr	r1, [r7, #12]
 80035cc:	1900      	adds	r0, r0, r4
 80035ce:	4169      	adcs	r1, r5
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	603b      	str	r3, [r7, #0]
 80035d6:	2300      	movs	r3, #0
 80035d8:	607b      	str	r3, [r7, #4]
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f7fc ff0f 	bl	8000400 <__aeabi_uldivmod>
 80035e2:	0002      	movs	r2, r0
 80035e4:	000b      	movs	r3, r1
 80035e6:	0013      	movs	r3, r2
 80035e8:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ec:	23c0      	movs	r3, #192	; 0xc0
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d309      	bcc.n	8003608 <UART_SetConfig+0x304>
 80035f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	035b      	lsls	r3, r3, #13
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d204      	bcs.n	8003608 <UART_SetConfig+0x304>
        {
          huart->Instance->BRR = usartdiv;
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003604:	60da      	str	r2, [r3, #12]
 8003606:	e0f0      	b.n	80037ea <UART_SetConfig+0x4e6>
        }
        else
        {
          ret = HAL_ERROR;
 8003608:	231a      	movs	r3, #26
 800360a:	2220      	movs	r2, #32
 800360c:	4694      	mov	ip, r2
 800360e:	44bc      	add	ip, r7
 8003610:	4463      	add	r3, ip
 8003612:	2201      	movs	r2, #1
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	e0e8      	b.n	80037ea <UART_SetConfig+0x4e6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	69da      	ldr	r2, [r3, #28]
 800361c:	2380      	movs	r3, #128	; 0x80
 800361e:	021b      	lsls	r3, r3, #8
 8003620:	429a      	cmp	r2, r3
 8003622:	d000      	beq.n	8003626 <UART_SetConfig+0x322>
 8003624:	e086      	b.n	8003734 <UART_SetConfig+0x430>
  {
    switch (clocksource)
 8003626:	231b      	movs	r3, #27
 8003628:	2220      	movs	r2, #32
 800362a:	4694      	mov	ip, r2
 800362c:	44bc      	add	ip, r7
 800362e:	4463      	add	r3, ip
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b08      	cmp	r3, #8
 8003634:	d027      	beq.n	8003686 <UART_SetConfig+0x382>
 8003636:	dc2a      	bgt.n	800368e <UART_SetConfig+0x38a>
 8003638:	2b04      	cmp	r3, #4
 800363a:	d01f      	beq.n	800367c <UART_SetConfig+0x378>
 800363c:	dc27      	bgt.n	800368e <UART_SetConfig+0x38a>
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <UART_SetConfig+0x344>
 8003642:	2b02      	cmp	r3, #2
 8003644:	d005      	beq.n	8003652 <UART_SetConfig+0x34e>
 8003646:	e022      	b.n	800368e <UART_SetConfig+0x38a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003648:	f7fe fbd6 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 800364c:	0003      	movs	r3, r0
 800364e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003650:	e027      	b.n	80036a2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003652:	4b08      	ldr	r3, [pc, #32]	; (8003674 <UART_SetConfig+0x370>)
 8003654:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003656:	e024      	b.n	80036a2 <UART_SetConfig+0x39e>
 8003658:	cfff69f3 	.word	0xcfff69f3
 800365c:	ffffcfff 	.word	0xffffcfff
 8003660:	40008000 	.word	0x40008000
 8003664:	11fff4ff 	.word	0x11fff4ff
 8003668:	40013800 	.word	0x40013800
 800366c:	40021000 	.word	0x40021000
 8003670:	40004400 	.word	0x40004400
 8003674:	00f42400 	.word	0x00f42400
 8003678:	08003ed8 	.word	0x08003ed8
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800367c:	f7fe fb30 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 8003680:	0003      	movs	r3, r0
 8003682:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003684:	e00d      	b.n	80036a2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003686:	2380      	movs	r3, #128	; 0x80
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800368c:	e009      	b.n	80036a2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003692:	231a      	movs	r3, #26
 8003694:	2220      	movs	r2, #32
 8003696:	4694      	mov	ip, r2
 8003698:	44bc      	add	ip, r7
 800369a:	4463      	add	r3, ip
 800369c:	2201      	movs	r2, #1
 800369e:	701a      	strb	r2, [r3, #0]
        break;
 80036a0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d100      	bne.n	80036aa <UART_SetConfig+0x3a6>
 80036a8:	e09f      	b.n	80037ea <UART_SetConfig+0x4e6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ae:	4b5b      	ldr	r3, [pc, #364]	; (800381c <UART_SetConfig+0x518>)
 80036b0:	0052      	lsls	r2, r2, #1
 80036b2:	5ad3      	ldrh	r3, [r2, r3]
 80036b4:	0019      	movs	r1, r3
 80036b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036b8:	f7fc fd2c 	bl	8000114 <__udivsi3>
 80036bc:	0003      	movs	r3, r0
 80036be:	005a      	lsls	r2, r3, #1
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	085b      	lsrs	r3, r3, #1
 80036c6:	18d2      	adds	r2, r2, r3
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	0019      	movs	r1, r3
 80036ce:	0010      	movs	r0, r2
 80036d0:	f7fc fd20 	bl	8000114 <__udivsi3>
 80036d4:	0003      	movs	r3, r0
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036dc:	2b0f      	cmp	r3, #15
 80036de:	d921      	bls.n	8003724 <UART_SetConfig+0x420>
 80036e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036e2:	2380      	movs	r3, #128	; 0x80
 80036e4:	025b      	lsls	r3, r3, #9
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d21c      	bcs.n	8003724 <UART_SetConfig+0x420>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	200e      	movs	r0, #14
 80036f0:	2420      	movs	r4, #32
 80036f2:	193b      	adds	r3, r7, r4
 80036f4:	181b      	adds	r3, r3, r0
 80036f6:	210f      	movs	r1, #15
 80036f8:	438a      	bics	r2, r1
 80036fa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fe:	085b      	lsrs	r3, r3, #1
 8003700:	b29b      	uxth	r3, r3
 8003702:	2207      	movs	r2, #7
 8003704:	4013      	ands	r3, r2
 8003706:	b299      	uxth	r1, r3
 8003708:	193b      	adds	r3, r7, r4
 800370a:	181b      	adds	r3, r3, r0
 800370c:	193a      	adds	r2, r7, r4
 800370e:	1812      	adds	r2, r2, r0
 8003710:	8812      	ldrh	r2, [r2, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	193a      	adds	r2, r7, r4
 800371c:	1812      	adds	r2, r2, r0
 800371e:	8812      	ldrh	r2, [r2, #0]
 8003720:	60da      	str	r2, [r3, #12]
 8003722:	e062      	b.n	80037ea <UART_SetConfig+0x4e6>
      }
      else
      {
        ret = HAL_ERROR;
 8003724:	231a      	movs	r3, #26
 8003726:	2220      	movs	r2, #32
 8003728:	4694      	mov	ip, r2
 800372a:	44bc      	add	ip, r7
 800372c:	4463      	add	r3, ip
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	e05a      	b.n	80037ea <UART_SetConfig+0x4e6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003734:	231b      	movs	r3, #27
 8003736:	2220      	movs	r2, #32
 8003738:	4694      	mov	ip, r2
 800373a:	44bc      	add	ip, r7
 800373c:	4463      	add	r3, ip
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b08      	cmp	r3, #8
 8003742:	d015      	beq.n	8003770 <UART_SetConfig+0x46c>
 8003744:	dc18      	bgt.n	8003778 <UART_SetConfig+0x474>
 8003746:	2b04      	cmp	r3, #4
 8003748:	d00d      	beq.n	8003766 <UART_SetConfig+0x462>
 800374a:	dc15      	bgt.n	8003778 <UART_SetConfig+0x474>
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <UART_SetConfig+0x452>
 8003750:	2b02      	cmp	r3, #2
 8003752:	d005      	beq.n	8003760 <UART_SetConfig+0x45c>
 8003754:	e010      	b.n	8003778 <UART_SetConfig+0x474>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003756:	f7fe fb4f 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 800375a:	0003      	movs	r3, r0
 800375c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800375e:	e015      	b.n	800378c <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003760:	4b2f      	ldr	r3, [pc, #188]	; (8003820 <UART_SetConfig+0x51c>)
 8003762:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003764:	e012      	b.n	800378c <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003766:	f7fe fabb 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 800376a:	0003      	movs	r3, r0
 800376c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800376e:	e00d      	b.n	800378c <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003770:	2380      	movs	r3, #128	; 0x80
 8003772:	021b      	lsls	r3, r3, #8
 8003774:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003776:	e009      	b.n	800378c <UART_SetConfig+0x488>
      default:
        pclk = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800377c:	231a      	movs	r3, #26
 800377e:	2220      	movs	r2, #32
 8003780:	4694      	mov	ip, r2
 8003782:	44bc      	add	ip, r7
 8003784:	4463      	add	r3, ip
 8003786:	2201      	movs	r2, #1
 8003788:	701a      	strb	r2, [r3, #0]
        break;
 800378a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800378c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378e:	2b00      	cmp	r3, #0
 8003790:	d02b      	beq.n	80037ea <UART_SetConfig+0x4e6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003796:	4b21      	ldr	r3, [pc, #132]	; (800381c <UART_SetConfig+0x518>)
 8003798:	0052      	lsls	r2, r2, #1
 800379a:	5ad3      	ldrh	r3, [r2, r3]
 800379c:	0019      	movs	r1, r3
 800379e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80037a0:	f7fc fcb8 	bl	8000114 <__udivsi3>
 80037a4:	0003      	movs	r3, r0
 80037a6:	001a      	movs	r2, r3
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	085b      	lsrs	r3, r3, #1
 80037ae:	18d2      	adds	r2, r2, r3
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	0019      	movs	r1, r3
 80037b6:	0010      	movs	r0, r2
 80037b8:	f7fc fcac 	bl	8000114 <__udivsi3>
 80037bc:	0003      	movs	r3, r0
 80037be:	b29b      	uxth	r3, r3
 80037c0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c4:	2b0f      	cmp	r3, #15
 80037c6:	d909      	bls.n	80037dc <UART_SetConfig+0x4d8>
 80037c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ca:	2380      	movs	r3, #128	; 0x80
 80037cc:	025b      	lsls	r3, r3, #9
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d204      	bcs.n	80037dc <UART_SetConfig+0x4d8>
      {
        huart->Instance->BRR = usartdiv;
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	e006      	b.n	80037ea <UART_SetConfig+0x4e6>
      }
      else
      {
        ret = HAL_ERROR;
 80037dc:	231a      	movs	r3, #26
 80037de:	2220      	movs	r2, #32
 80037e0:	4694      	mov	ip, r2
 80037e2:	44bc      	add	ip, r7
 80037e4:	4463      	add	r3, ip
 80037e6:	2201      	movs	r2, #1
 80037e8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	226a      	movs	r2, #106	; 0x6a
 80037ee:	2101      	movs	r1, #1
 80037f0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	2268      	movs	r2, #104	; 0x68
 80037f6:	2101      	movs	r1, #1
 80037f8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	2200      	movs	r2, #0
 80037fe:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	2200      	movs	r2, #0
 8003804:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003806:	231a      	movs	r3, #26
 8003808:	2220      	movs	r2, #32
 800380a:	4694      	mov	ip, r2
 800380c:	44bc      	add	ip, r7
 800380e:	4463      	add	r3, ip
 8003810:	781b      	ldrb	r3, [r3, #0]
}
 8003812:	0018      	movs	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	b010      	add	sp, #64	; 0x40
 8003818:	bdb0      	pop	{r4, r5, r7, pc}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	08003ed8 	.word	0x08003ed8
 8003820:	00f42400 	.word	0x00f42400

08003824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003830:	2201      	movs	r2, #1
 8003832:	4013      	ands	r3, r2
 8003834:	d00b      	beq.n	800384e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a4a      	ldr	r2, [pc, #296]	; (8003968 <UART_AdvFeatureConfig+0x144>)
 800383e:	4013      	ands	r3, r2
 8003840:	0019      	movs	r1, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003852:	2202      	movs	r2, #2
 8003854:	4013      	ands	r3, r2
 8003856:	d00b      	beq.n	8003870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	4a43      	ldr	r2, [pc, #268]	; (800396c <UART_AdvFeatureConfig+0x148>)
 8003860:	4013      	ands	r3, r2
 8003862:	0019      	movs	r1, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003874:	2204      	movs	r2, #4
 8003876:	4013      	ands	r3, r2
 8003878:	d00b      	beq.n	8003892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	4a3b      	ldr	r2, [pc, #236]	; (8003970 <UART_AdvFeatureConfig+0x14c>)
 8003882:	4013      	ands	r3, r2
 8003884:	0019      	movs	r1, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	2208      	movs	r2, #8
 8003898:	4013      	ands	r3, r2
 800389a:	d00b      	beq.n	80038b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	4a34      	ldr	r2, [pc, #208]	; (8003974 <UART_AdvFeatureConfig+0x150>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	0019      	movs	r1, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b8:	2210      	movs	r2, #16
 80038ba:	4013      	ands	r3, r2
 80038bc:	d00b      	beq.n	80038d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4a2c      	ldr	r2, [pc, #176]	; (8003978 <UART_AdvFeatureConfig+0x154>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	0019      	movs	r1, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038da:	2220      	movs	r2, #32
 80038dc:	4013      	ands	r3, r2
 80038de:	d00b      	beq.n	80038f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	4a25      	ldr	r2, [pc, #148]	; (800397c <UART_AdvFeatureConfig+0x158>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	0019      	movs	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	2240      	movs	r2, #64	; 0x40
 80038fe:	4013      	ands	r3, r2
 8003900:	d01d      	beq.n	800393e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	4a1d      	ldr	r2, [pc, #116]	; (8003980 <UART_AdvFeatureConfig+0x15c>)
 800390a:	4013      	ands	r3, r2
 800390c:	0019      	movs	r1, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800391e:	2380      	movs	r3, #128	; 0x80
 8003920:	035b      	lsls	r3, r3, #13
 8003922:	429a      	cmp	r2, r3
 8003924:	d10b      	bne.n	800393e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	4a15      	ldr	r2, [pc, #84]	; (8003984 <UART_AdvFeatureConfig+0x160>)
 800392e:	4013      	ands	r3, r2
 8003930:	0019      	movs	r1, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003942:	2280      	movs	r2, #128	; 0x80
 8003944:	4013      	ands	r3, r2
 8003946:	d00b      	beq.n	8003960 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	4a0e      	ldr	r2, [pc, #56]	; (8003988 <UART_AdvFeatureConfig+0x164>)
 8003950:	4013      	ands	r3, r2
 8003952:	0019      	movs	r1, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	605a      	str	r2, [r3, #4]
  }
}
 8003960:	46c0      	nop			; (mov r8, r8)
 8003962:	46bd      	mov	sp, r7
 8003964:	b002      	add	sp, #8
 8003966:	bd80      	pop	{r7, pc}
 8003968:	fffdffff 	.word	0xfffdffff
 800396c:	fffeffff 	.word	0xfffeffff
 8003970:	fffbffff 	.word	0xfffbffff
 8003974:	ffff7fff 	.word	0xffff7fff
 8003978:	ffffefff 	.word	0xffffefff
 800397c:	ffffdfff 	.word	0xffffdfff
 8003980:	ffefffff 	.word	0xffefffff
 8003984:	ff9fffff 	.word	0xff9fffff
 8003988:	fff7ffff 	.word	0xfff7ffff

0800398c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af02      	add	r7, sp, #8
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	228c      	movs	r2, #140	; 0x8c
 8003998:	2100      	movs	r1, #0
 800399a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800399c:	f7fd fac8 	bl	8000f30 <HAL_GetTick>
 80039a0:	0003      	movs	r3, r0
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2208      	movs	r2, #8
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d10c      	bne.n	80039cc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2280      	movs	r2, #128	; 0x80
 80039b6:	0391      	lsls	r1, r2, #14
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	4a18      	ldr	r2, [pc, #96]	; (8003a1c <UART_CheckIdleState+0x90>)
 80039bc:	9200      	str	r2, [sp, #0]
 80039be:	2200      	movs	r2, #0
 80039c0:	f000 f82e 	bl	8003a20 <UART_WaitOnFlagUntilTimeout>
 80039c4:	1e03      	subs	r3, r0, #0
 80039c6:	d001      	beq.n	80039cc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e023      	b.n	8003a14 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2204      	movs	r2, #4
 80039d4:	4013      	ands	r3, r2
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d10c      	bne.n	80039f4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2280      	movs	r2, #128	; 0x80
 80039de:	03d1      	lsls	r1, r2, #15
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	4a0e      	ldr	r2, [pc, #56]	; (8003a1c <UART_CheckIdleState+0x90>)
 80039e4:	9200      	str	r2, [sp, #0]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f000 f81a 	bl	8003a20 <UART_WaitOnFlagUntilTimeout>
 80039ec:	1e03      	subs	r3, r0, #0
 80039ee:	d001      	beq.n	80039f4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e00f      	b.n	8003a14 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2284      	movs	r2, #132	; 0x84
 80039f8:	2120      	movs	r1, #32
 80039fa:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2288      	movs	r2, #136	; 0x88
 8003a00:	2120      	movs	r1, #32
 8003a02:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2280      	movs	r2, #128	; 0x80
 8003a0e:	2100      	movs	r1, #0
 8003a10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	0018      	movs	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b004      	add	sp, #16
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	01ffffff 	.word	0x01ffffff

08003a20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b094      	sub	sp, #80	; 0x50
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	1dfb      	adds	r3, r7, #7
 8003a2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a30:	e0a7      	b.n	8003b82 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a34:	3301      	adds	r3, #1
 8003a36:	d100      	bne.n	8003a3a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003a38:	e0a3      	b.n	8003b82 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3a:	f7fd fa79 	bl	8000f30 <HAL_GetTick>
 8003a3e:	0002      	movs	r2, r0
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d302      	bcc.n	8003a50 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d13f      	bne.n	8003ad0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a50:	f3ef 8310 	mrs	r3, PRIMASK
 8003a54:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003a58:	647b      	str	r3, [r7, #68]	; 0x44
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a60:	f383 8810 	msr	PRIMASK, r3
}
 8003a64:	46c0      	nop			; (mov r8, r8)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	494e      	ldr	r1, [pc, #312]	; (8003bac <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003a72:	400a      	ands	r2, r1
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a78:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	f383 8810 	msr	PRIMASK, r3
}
 8003a80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a82:	f3ef 8310 	mrs	r3, PRIMASK
 8003a86:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8a:	643b      	str	r3, [r7, #64]	; 0x40
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a92:	f383 8810 	msr	PRIMASK, r3
}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	438a      	bics	r2, r1
 8003aa6:	609a      	str	r2, [r3, #8]
 8003aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aae:	f383 8810 	msr	PRIMASK, r3
}
 8003ab2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2284      	movs	r2, #132	; 0x84
 8003ab8:	2120      	movs	r1, #32
 8003aba:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2288      	movs	r2, #136	; 0x88
 8003ac0:	2120      	movs	r1, #32
 8003ac2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2280      	movs	r2, #128	; 0x80
 8003ac8:	2100      	movs	r1, #0
 8003aca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e069      	b.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2204      	movs	r2, #4
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d052      	beq.n	8003b82 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	69da      	ldr	r2, [r3, #28]
 8003ae2:	2380      	movs	r3, #128	; 0x80
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	2380      	movs	r3, #128	; 0x80
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d148      	bne.n	8003b82 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2280      	movs	r2, #128	; 0x80
 8003af6:	0112      	lsls	r2, r2, #4
 8003af8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003afa:	f3ef 8310 	mrs	r3, PRIMASK
 8003afe:	613b      	str	r3, [r7, #16]
  return(result);
 8003b00:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b04:	2301      	movs	r3, #1
 8003b06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f383 8810 	msr	PRIMASK, r3
}
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4924      	ldr	r1, [pc, #144]	; (8003bac <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003b1c:	400a      	ands	r2, r1
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	f383 8810 	msr	PRIMASK, r3
}
 8003b2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b30:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b32:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b34:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b36:	2301      	movs	r3, #1
 8003b38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	f383 8810 	msr	PRIMASK, r3
}
 8003b40:	46c0      	nop			; (mov r8, r8)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	438a      	bics	r2, r1
 8003b50:	609a      	str	r2, [r3, #8]
 8003b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	f383 8810 	msr	PRIMASK, r3
}
 8003b5c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2284      	movs	r2, #132	; 0x84
 8003b62:	2120      	movs	r1, #32
 8003b64:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2288      	movs	r2, #136	; 0x88
 8003b6a:	2120      	movs	r1, #32
 8003b6c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	228c      	movs	r2, #140	; 0x8c
 8003b72:	2120      	movs	r1, #32
 8003b74:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2280      	movs	r2, #128	; 0x80
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e010      	b.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	425a      	negs	r2, r3
 8003b92:	4153      	adcs	r3, r2
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	001a      	movs	r2, r3
 8003b98:	1dfb      	adds	r3, r7, #7
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d100      	bne.n	8003ba2 <UART_WaitOnFlagUntilTimeout+0x182>
 8003ba0:	e747      	b.n	8003a32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b014      	add	sp, #80	; 0x50
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	fffffe5f 	.word	0xfffffe5f

08003bb0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2280      	movs	r2, #128	; 0x80
 8003bbc:	5c9b      	ldrb	r3, [r3, r2]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_UARTEx_DisableFifoMode+0x16>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e027      	b.n	8003c16 <HAL_UARTEx_DisableFifoMode+0x66>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2280      	movs	r2, #128	; 0x80
 8003bca:	2101      	movs	r1, #1
 8003bcc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2284      	movs	r2, #132	; 0x84
 8003bd2:	2124      	movs	r1, #36	; 0x24
 8003bd4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2101      	movs	r1, #1
 8003bea:	438a      	bics	r2, r1
 8003bec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4a0b      	ldr	r2, [pc, #44]	; (8003c20 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2284      	movs	r2, #132	; 0x84
 8003c08:	2120      	movs	r1, #32
 8003c0a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2280      	movs	r2, #128	; 0x80
 8003c10:	2100      	movs	r1, #0
 8003c12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	0018      	movs	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	b004      	add	sp, #16
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	dfffffff 	.word	0xdfffffff

08003c24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2280      	movs	r2, #128	; 0x80
 8003c32:	5c9b      	ldrb	r3, [r3, r2]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e02e      	b.n	8003c9a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2280      	movs	r2, #128	; 0x80
 8003c40:	2101      	movs	r1, #1
 8003c42:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2284      	movs	r2, #132	; 0x84
 8003c48:	2124      	movs	r1, #36	; 0x24
 8003c4a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2101      	movs	r1, #1
 8003c60:	438a      	bics	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	08d9      	lsrs	r1, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f000 f854 	bl	8003d28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2284      	movs	r2, #132	; 0x84
 8003c8c:	2120      	movs	r1, #32
 8003c8e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2280      	movs	r2, #128	; 0x80
 8003c94:	2100      	movs	r1, #0
 8003c96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	b004      	add	sp, #16
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2280      	movs	r2, #128	; 0x80
 8003cb2:	5c9b      	ldrb	r3, [r3, r2]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e02f      	b.n	8003d1c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2280      	movs	r2, #128	; 0x80
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2284      	movs	r2, #132	; 0x84
 8003cc8:	2124      	movs	r1, #36	; 0x24
 8003cca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2101      	movs	r1, #1
 8003ce0:	438a      	bics	r2, r1
 8003ce2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	4a0e      	ldr	r2, [pc, #56]	; (8003d24 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	0019      	movs	r1, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f000 f813 	bl	8003d28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2284      	movs	r2, #132	; 0x84
 8003d0e:	2120      	movs	r1, #32
 8003d10:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2280      	movs	r2, #128	; 0x80
 8003d16:	2100      	movs	r1, #0
 8003d18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b004      	add	sp, #16
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	f1ffffff 	.word	0xf1ffffff

08003d28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d108      	bne.n	8003d4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	226a      	movs	r2, #106	; 0x6a
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2268      	movs	r2, #104	; 0x68
 8003d44:	2101      	movs	r1, #1
 8003d46:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003d48:	e043      	b.n	8003dd2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003d4a:	260f      	movs	r6, #15
 8003d4c:	19bb      	adds	r3, r7, r6
 8003d4e:	2208      	movs	r2, #8
 8003d50:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003d52:	200e      	movs	r0, #14
 8003d54:	183b      	adds	r3, r7, r0
 8003d56:	2208      	movs	r2, #8
 8003d58:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	0e5b      	lsrs	r3, r3, #25
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	240d      	movs	r4, #13
 8003d66:	193b      	adds	r3, r7, r4
 8003d68:	2107      	movs	r1, #7
 8003d6a:	400a      	ands	r2, r1
 8003d6c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	0f5b      	lsrs	r3, r3, #29
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	250c      	movs	r5, #12
 8003d7a:	197b      	adds	r3, r7, r5
 8003d7c:	2107      	movs	r1, #7
 8003d7e:	400a      	ands	r2, r1
 8003d80:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d82:	183b      	adds	r3, r7, r0
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	197a      	adds	r2, r7, r5
 8003d88:	7812      	ldrb	r2, [r2, #0]
 8003d8a:	4914      	ldr	r1, [pc, #80]	; (8003ddc <UARTEx_SetNbDataToProcess+0xb4>)
 8003d8c:	5c8a      	ldrb	r2, [r1, r2]
 8003d8e:	435a      	muls	r2, r3
 8003d90:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d92:	197b      	adds	r3, r7, r5
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	4a12      	ldr	r2, [pc, #72]	; (8003de0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003d98:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d9a:	0019      	movs	r1, r3
 8003d9c:	f7fc fa44 	bl	8000228 <__divsi3>
 8003da0:	0003      	movs	r3, r0
 8003da2:	b299      	uxth	r1, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	226a      	movs	r2, #106	; 0x6a
 8003da8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003daa:	19bb      	adds	r3, r7, r6
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	193a      	adds	r2, r7, r4
 8003db0:	7812      	ldrb	r2, [r2, #0]
 8003db2:	490a      	ldr	r1, [pc, #40]	; (8003ddc <UARTEx_SetNbDataToProcess+0xb4>)
 8003db4:	5c8a      	ldrb	r2, [r1, r2]
 8003db6:	435a      	muls	r2, r3
 8003db8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003dba:	193b      	adds	r3, r7, r4
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	4a08      	ldr	r2, [pc, #32]	; (8003de0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003dc0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003dc2:	0019      	movs	r1, r3
 8003dc4:	f7fc fa30 	bl	8000228 <__divsi3>
 8003dc8:	0003      	movs	r3, r0
 8003dca:	b299      	uxth	r1, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2268      	movs	r2, #104	; 0x68
 8003dd0:	5299      	strh	r1, [r3, r2]
}
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	b005      	add	sp, #20
 8003dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	08003ef0 	.word	0x08003ef0
 8003de0:	08003ef8 	.word	0x08003ef8

08003de4 <__libc_init_array>:
 8003de4:	b570      	push	{r4, r5, r6, lr}
 8003de6:	2600      	movs	r6, #0
 8003de8:	4d0c      	ldr	r5, [pc, #48]	; (8003e1c <__libc_init_array+0x38>)
 8003dea:	4c0d      	ldr	r4, [pc, #52]	; (8003e20 <__libc_init_array+0x3c>)
 8003dec:	1b64      	subs	r4, r4, r5
 8003dee:	10a4      	asrs	r4, r4, #2
 8003df0:	42a6      	cmp	r6, r4
 8003df2:	d109      	bne.n	8003e08 <__libc_init_array+0x24>
 8003df4:	2600      	movs	r6, #0
 8003df6:	f000 f833 	bl	8003e60 <_init>
 8003dfa:	4d0a      	ldr	r5, [pc, #40]	; (8003e24 <__libc_init_array+0x40>)
 8003dfc:	4c0a      	ldr	r4, [pc, #40]	; (8003e28 <__libc_init_array+0x44>)
 8003dfe:	1b64      	subs	r4, r4, r5
 8003e00:	10a4      	asrs	r4, r4, #2
 8003e02:	42a6      	cmp	r6, r4
 8003e04:	d105      	bne.n	8003e12 <__libc_init_array+0x2e>
 8003e06:	bd70      	pop	{r4, r5, r6, pc}
 8003e08:	00b3      	lsls	r3, r6, #2
 8003e0a:	58eb      	ldr	r3, [r5, r3]
 8003e0c:	4798      	blx	r3
 8003e0e:	3601      	adds	r6, #1
 8003e10:	e7ee      	b.n	8003df0 <__libc_init_array+0xc>
 8003e12:	00b3      	lsls	r3, r6, #2
 8003e14:	58eb      	ldr	r3, [r5, r3]
 8003e16:	4798      	blx	r3
 8003e18:	3601      	adds	r6, #1
 8003e1a:	e7f2      	b.n	8003e02 <__libc_init_array+0x1e>
 8003e1c:	08003f08 	.word	0x08003f08
 8003e20:	08003f08 	.word	0x08003f08
 8003e24:	08003f08 	.word	0x08003f08
 8003e28:	08003f0c 	.word	0x08003f0c

08003e2c <memset>:
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	1882      	adds	r2, r0, r2
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d100      	bne.n	8003e36 <memset+0xa>
 8003e34:	4770      	bx	lr
 8003e36:	7019      	strb	r1, [r3, #0]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	e7f9      	b.n	8003e30 <memset+0x4>

08003e3c <strncmp>:
 8003e3c:	b530      	push	{r4, r5, lr}
 8003e3e:	0005      	movs	r5, r0
 8003e40:	1e10      	subs	r0, r2, #0
 8003e42:	d00b      	beq.n	8003e5c <strncmp+0x20>
 8003e44:	2400      	movs	r4, #0
 8003e46:	3a01      	subs	r2, #1
 8003e48:	5d2b      	ldrb	r3, [r5, r4]
 8003e4a:	5d08      	ldrb	r0, [r1, r4]
 8003e4c:	4283      	cmp	r3, r0
 8003e4e:	d104      	bne.n	8003e5a <strncmp+0x1e>
 8003e50:	4294      	cmp	r4, r2
 8003e52:	d002      	beq.n	8003e5a <strncmp+0x1e>
 8003e54:	3401      	adds	r4, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f6      	bne.n	8003e48 <strncmp+0xc>
 8003e5a:	1a18      	subs	r0, r3, r0
 8003e5c:	bd30      	pop	{r4, r5, pc}
	...

08003e60 <_init>:
 8003e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e66:	bc08      	pop	{r3}
 8003e68:	469e      	mov	lr, r3
 8003e6a:	4770      	bx	lr

08003e6c <_fini>:
 8003e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e72:	bc08      	pop	{r3}
 8003e74:	469e      	mov	lr, r3
 8003e76:	4770      	bx	lr
